each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 17.84]), ])
LT_avg_SP_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv_year, SP_code) %>%
summarise(stand = "all",
mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
LT_avg_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv_year) %>%
summarise(SP_code = "all",
stand = "all",
mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
}
LT_avg_SP_P <- as.data.frame(rbindlist(LT_avg_SP_P_list))
LT_avg_P <- as.data.frame(rbindlist(LT_avg_P_list))
# 1.7. binding LT data together -------------------------------------------------------------------------------------------------------
# 1.7.1. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_ST_P <- LT_SP_ST_P_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component"))  %>%
select(-(n_ha))
# 1.7.2. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_P <- LT_SP_BCNBA_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year', 'n_stands'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., LT_avg_SP_P,
by = c("plot_ID", "inv_year", "stand_component", "SP_code", "stand"))
# 1.7.3. LT stand data ----------------------------------------------------
LT_ST_P <- LT_ST_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component"))
# 1.7.4. LT plot data ----------------------------------------------------------------------------------------------------------------
LT_P <- LT_BCNBAn_ha %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., LT_avg_P,
by = c("plot_ID", "inv_year", "stand_component", "SP_code", "stand")) %>%
left_join(., LT_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component"))
# 1.7.5. summrizing LT data by stand type ---------------------------------
LT_TY <- LT_P %>%
group_by(stand_type, compartiment, stand_component, inv_year) %>%
summarise(B_t_ha = mean(B_t_ha),
C_t_ha = mean(C_t_ha),
N_t_ha = mean(N_t_ha)) %>%
left_join(.,
LT_P %>%
filter(compartiment == "ag") %>%
group_by(stand_type, compartiment, stand_component, inv_year) %>%
summarise(BA_m2_ha = mean(BA_m2_ha),
n_ha = mean(n_ha),
n_SP = mean(n_SP)) %>%
ungroup() %>%
select(-c("compartiment")),
by = c("stand_type", "stand_component", "inv_year")) %>%
mutate(plot_ID = "all",
dom_SP = "all",
SP_code = "all")
# 1.7.6. rbinding LT data together ----------------------------------------
LT_summary <- plyr::rbind.fill(LT_SP_ST_P,
LT_SP_P,
LT_ST_P,
LT_P,
LT_TY) %>%
arrange(plot_ID)
# to get only stand type summarised data one had to filter for:
# plot_ID == "all" & SP_code == "all" & stand  == "all"
# to get the plotwise summarised data one has to filter for:
# plot_ID != "all" & SP_code == "all" & stand  == "all"
# to get the species & plotwise wise summarised data one has to filter for:
# plot_ID != "all" & SP_code != "all" & stand == "all"
# to get the stand & plotwise  wise summarised data one has to filter for:
# plot_ID != "all" & SP_code == "all" & stand != "all"
# to get the stand , species & plotwise  wise summarised data one has to filter for:
# plot_ID != "all" & SP_code != "all" & stand != "all"
# 2. REGENERATION ---------------------------------------------------------
# 2.1. plot area - sum off all sampling circuits ---------------------------
# if there are plots that are labelled empty but have to included in the eare calcualtion
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_plot_A_ha <- rbind(RG_data %>%
mutate(plot_A_ha = as.numeric(area_m2)/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct(),
RG_stat_2 %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha)) %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))}else{
RG_plot_A_ha <- RG_data %>%
mutate(plot_A_ha = as.numeric(area_m2)/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))
}
# 2.2. number of RG  plants  per hectar ----------------------------------------------
RG_n_ha <- RG_data %>%
filter(compartiment == "ag") %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, inv_year) %>%
# sum number of trees  per sampling circuit
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "RG")
# 2.3. number of RG  species per hectar ----------------------------------------------
RG_n_SP_plot <- RG_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, SP_code) %>%
group_by(plot_ID, inv_year) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "RG")
# 2.4. RG big summary combining all grouping variables --------------------------------------------------------
# 2.4.1. RG summary by plot, inventory, compartiment, species and  -------------------------------------------
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_SP_ST_BCN_ha <- plyr::rbind.fill(
RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum number of trees  per sampling circuit
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct() ,
RG_stat_2 %>%
select(plot_ID, CCS_nr, plot_A_ha, inv_year, compartiment, B_t_ha, C_t_ha, N_t_ha)
) %>%
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha))%>%
mutate(stand_component = "RG")
}else{
RG_SP_ST_BCN_ha <-     RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum stocks of trees  per sampling circuit, stand, compartiment, and SP_code
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "RG")
}
# 2.4.2. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
RG_summary <- plyr::rbind.fill(
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all"),
# 2.4.3. RG summary by plot and stand, without grouping by species ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "stand"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(SP_code = "all"),
# 2.4.4. RG summary by plot, inventory, compartiment, not by speci --------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv_year,stand_component, n_ha),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component")) %>%
mutate(n_ha = ifelse(is.na(n_ha), 0, n_ha),
n_SP = ifelse(is.na(n_SP), 0, n_SP),
stand = "all",
SP_code = "all")
) %>% # close rbind
distinct() %>%
arrange(plot_ID)
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. DW summary per plot per SP per DW type per Dec state ---------------------------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-c(X, plot_A_ha))) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
# 3.4. DW big summary including all grouping variables and combinations -------------------------
# 3.4.1. grouped by species, decay type, deadwoodtype, plot, compartiment, inventory ------------------------------------------------------------------
DW_summary <-
plyr::rbind.fill(
DW_BCN_ha_SP_TY_DEC_P,
# 3.4.2. grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore------------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# 3.4.3. DW grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore --------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all") ,
# 3.4.4. DW grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# 3.4.5. DW grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, ST_LY_type, dw_type) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_type"),
multiple = "all") %>%
mutate(dw_sp = "all",
decay = "all"),
# 3.4.6. DW grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, decay) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "decay"),
multiple = "all") %>%
mutate(dw_sp = "all",
dw_type = "all") ,
# 3.4.7. DW grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
# mean and sd of length and diameter of deadwood
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, dw_sp) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_sp"),
multiple = "all") %>%
mutate(decay = "all",
dw_type = "all") ,
# 3.4.8.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
distinct() %>%
# number of DW items per ha
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct(),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of decay types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, decay) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dec = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of deadwood types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, dw_type) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dw_TY = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%  # close rbind
# add stand component for those datasets where it´s not included yet
mutate(stand_component = "DW") %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
LT_RG_DW_P <- rbind(
# plotwise summar yof tree dataset
LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# as there is no bg and total compartiment, this filter will only select ag compartiments
filter(compartiment %in% c("ag", "bg", "total")),
# take all "ag" compartiments of DW and assign them to the compartiment "total" as well, so we can create a row of total stocks for all stand components
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total"),
# total plot data over all stand components
) %>%
arrange(plot_ID)
LT_RG_DW_P <-
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('inv_year'), as.integer),
by = c("plot_ID", "inv_year")) %>%
arrange(plot_ID)
# 4. data export ----------------------------------------------------------
write.csv2(LT_summary, paste0(out.path.BZE3, paste(inv_name(LT_summary$inv_year[1]), "LT_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(RG_summary, paste0(out.path.BZE3, paste(inv_name(RG_summary$inv_year[1]), "RG_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(DW_summary, paste0(out.path.BZE3, paste(inv_name(DW_summary$inv_year[1]), "DW_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(LT_RG_DW_P, paste0(out.path.BZE3, paste(inv_name(LT_RG_DW_P$inv_year[1]), "LT_RG_DW_stocks_ha_all_groups", sep = "_"), ".csv"))
stop("there the visualization of 05_00_RG_LT_DW_summarizing_hevtar_values starts")
# deadwood single item data
DW_data <- read.delim(file = here("data/input/BZE3/bedw_liste.csv"), sep = ",", dec = ",") %>%
select( bund_nr, lfd_nr, typ,      baumgruppe, anzahl,  durchmesser, laenge, zersetzung)
#  bund_nr lfd_nr typ      baumgruppe anzahl  durchmesser laenge zersetzung
colnames(DW_data) <- c("plot_ID", "tree_ID", "dw_type", "dw_sp", "count", "d_cm", "l_dm", "decay")
DW_data %>% filter(plot_ID == 140187 & tree_ID == 1)
all_dw_bio_df
DW_data %>% filter(plot_ID == 140187)
DW_data <- DW_data %>% filter(plot_ID == 140187)
# 1. data prep  --------------------------------------
# 1.1. ALL - all plots & stand components ------------------------------------------------------------------------------------------------------------------------
# create a list with the BZE plots that should be excluded -----------------
# select plots that have a "Punktstatus (x_plotstatus_bze)"
plots_to_exclude <- inv_info %>%
filter(plot_inv_status >= 21 | plot_inv_status <0) %>%
select(plot_ID)
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.4 importing data -----------------------------------------------------
## BZE 2
# this dataset contains the BZE file tit_1 which displays info about the BZE inventory in general
# so info that´s base of all sub inventories like trees, deadwood, regeneration
inv_info <- read.delim(file = here("data/input/BZE2_HBI/tit_1.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE) %>% ##changebacklater BZE3 folder
select(-c("re_form", "re_lage", "neigung", "exposition", "anmerkung"))
colnames(inv_info) <- c("plot_ID", "team", "date", "plot_inv_status")
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
inv_info$date <- as.Date(inv_info$date)
inv_info$inv_year <- as.numeric(format(inv_info$date, "%Y"))
inv_info$inv <- inv_name(inv_info$inv_year)
## LIVING TREES
# this dataset contains information about the inventory of the respective individual sampling circuits as well as stand realted info like stand type & - structure
tree_inv_info <-  read.delim(file = here("data/input/BZE3/be.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE) %>% # be
select(bund_nr, team,  datum,  beart, besttyp, struktur,  pk1_aufnahme,   pk2_aufnahme, pk3_aufnahme, hbi_status)
colnames(tree_inv_info) <- c("plot_ID", "team", "date", "stand_spec", "stand_type", "structure", "CCS_5_inv_status",  "CCS_12_inv_status",  "CCS_17_inv_status", "hbi_status")
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
tree_inv_info$date <- as.Date(tree_inv_info$date)
tree_inv_info$inv_year <- as.numeric(format(tree_inv_info$date, "%Y"))
# this line can be removed later
tree_inv_info <- tree_inv_info %>% mutate(inv = inv_name(inv_year))
# BZE3 BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
trees_data <- read.delim(file = here("data/input/BZE3/beab.csv"), sep = ",", dec = ",") %>%
select(bund_nr, lfd_nr, baumkennzahl,zwiesel,bart, alter,alter_methode, d_mess, bhd_hoehe,  hoehe, kransatz, azi, hori, kraft,  schi       )
# BZE3 trees
colnames(trees_data) <- c("plot_ID", "tree_ID", "tree_inventory_status", "multi_stem",  "SP_code", "age", "age_meth", "D_mm", "DBH_h_cm", "H_dm", "C_h_dm", "azi_gon", "dist_cm", "Kraft",  "C_layer")
trees_data <- trees_data %>% dplyr::select(plot_ID,  tree_ID ,  tree_inventory_status ,  multi_stem , dist_cm ,  azi_gon ,
age ,  age_meth ,  SP_code ,  Kraft , C_layer , H_dm ,  C_h_dm , D_mm ,   DBH_h_cm )
# HBI/ BZE2 BEAB dataset
trees_HBI <- read.delim(file = here("data/input/BZE2_HBI/beab.csv"), sep = ",", dec = ",")
# BZE3 trees
colnames(trees_HBI) <- c("plot_ID", "tree_ID", "tree_inventory_status", "multi_stem",  "SP_code", "age", "age_meth", "D_mm", "DBH_h_cm", "H_dm", "C_h_dm", "azi_gon", "dist_cm", "Kraft",  "C_layer")
trees_HBI <- trees_HBI %>% dplyr::select(plot_ID,  tree_ID ,  tree_inventory_status ,  multi_stem , dist_cm ,  azi_gon ,
age ,  age_meth ,  SP_code ,  Kraft , C_layer , H_dm ,  C_h_dm , D_mm ,   DBH_h_cm )
# BZE3 forest edges
forest_edges <- read.delim(file = here("data/input/BZE3/be_waldraender.csv"), sep = ",", dec = ",")
colnames(forest_edges) <- c("plot_ID", "e_ID", "e_type", "e_form", "A_dist", "A_azi",  "B_dist", "B_azi", "T_dist", "T_azi") # t = turning point
## REGENERATION
# this dataset contains the inventory status, position and extend of the sampling circle satelites of the regeneration inventory of the BZE3
RG_loc_info <- read.delim(file = here("data/input/BZE3/bej.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
# assign column names    # bund_nr     pk_nr      pk_richtung     pk_dist     pk_aufnahme      pk_maxdist
colnames(RG_loc_info) <- c("plot_ID", "CCS_nr", "CCS_position",  "CCS_dist", "CCS_RG_inv_status", "CCS_max_dist_cm")
# this dataset contains the plant specific inventory data of the regenertaion inventory of the BZE3, including stand and area info
RG_data <- read.delim(file = here("data/input/BZE3/bejb.csv"), sep = ",", dec = ",")
#  "bund_nr"  "pk_nr"  "lfd_nr"   "bart"  "hoehe"    "grklasse"
colnames(RG_data) <- c("plot_ID", "CCS_nr", "tree_ID", "SP_code", "H_cm", "D_class_cm")
##DEADWOOD
# deadwood inventory info
DW_inv_info <- read.delim(file = here("data/input/BZE3/bedw.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
colnames(DW_inv_info) <- c("plot_ID", "CCS_DW_inv_status",  "dist_cm", "azi")
# deadwood single item data
DW_data <- read.delim(file = here("data/input/BZE3/bedw_liste.csv"), sep = ",", dec = ",") %>%
select( bund_nr, lfd_nr, typ,      baumgruppe, anzahl,  durchmesser, laenge, zersetzung)
#  bund_nr lfd_nr typ      baumgruppe anzahl  durchmesser laenge zersetzung
colnames(DW_data) <- c("plot_ID", "tree_ID", "dw_type", "dw_sp", "count", "d_cm", "l_dm", "decay")
DW_data <- DW_data %>% filter(plot_ID == 140187)
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.4 importing data -----------------------------------------------------
## BZE 2
# this dataset contains the BZE file tit_1 which displays info about the BZE inventory in general
# so info that´s base of all sub inventories like trees, deadwood, regeneration
inv_info <- read.delim(file = here("data/input/BZE2_HBI/tit_1.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE) %>% select(-c("re_form", "re_lage", "neigung", "exposition", "anmerkung"))
colnames(inv_info) <- c("plot_ID", "team", "date", "plot_inv_status")
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
inv_info$date <- as.Date(inv_info$date)
inv_info$inv_year <- as.numeric(format(inv_info$date, "%Y"))
# this line can be removed later
inv_info <- inv_info %>% mutate(inv = inv_name(inv_year))
## LIVING TREES
# this dataset contains information about the inventory of the respective individual sampling circuits as well as stand realted info like stand type & - structure
tree_inv_info <-  read.delim(file = here("data/input/BZE2_HBI/be.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE) %>% # be
select(bund_nr, team,  datum,  beart, besttyp, struktur,  pk1_aufnahme,   pk2_aufnahme, pk3_aufnahme, hbi_status)
colnames(tree_inv_info) <- c("plot_ID", "team", "date", "stand_spec", "stand_type", "structure",
"CCS_5_inv_status",  "CCS_12_inv_status",  "CCS_17_inv_status" , "hbi_status")
tree_inv_info <- tree_inv_info %>% mutate(hbi_status = case_when(str_detect(plot_ID, '^9') ~ 3,
str_detect(plot_ID, '^11') ~ 3,
str_detect(plot_ID, '^12') ~ 3,
hbi_status == -9 ~ 1,
TRUE ~ hbi_status))
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
tree_inv_info$date <- as.Date(tree_inv_info$date)
tree_inv_info$inv_year <- as.numeric(format(tree_inv_info$date, "%Y"))
# this line can be removed later
tree_inv_info <- tree_inv_info %>% mutate(inv = inv_name(inv_year))
# HBI BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
trees_data <- read.delim(file = here("data/input/BZE2_HBI/beab.csv"), sep = ",", dec = ",")
# HBI trees
colnames(trees_data) <- c("plot_ID", "tree_ID", "tree_inventory_status", "multi_stem",  "SP_code", "age",
"age_meth", "D_mm", "DBH_h_cm", "H_dm", "C_h_dm", "azi_gon", "dist_cm", "Kraft",  "C_layer")
trees_data <- trees_data %>% dplyr::select(plot_ID,  tree_ID ,  tree_inventory_status ,  multi_stem , dist_cm ,  azi_gon ,
age ,  age_meth ,  SP_code ,  Kraft , C_layer , H_dm ,  C_h_dm , D_mm ,   DBH_h_cm )
# HBI forest edges
forest_edges <- read.delim(file = here("data/input/BZE2_HBI/be_waldraender.csv"), sep = ",", dec = ",")
colnames(forest_edges) <- c("plot_ID", "e_ID", "e_type", "e_form", "A_dist", "A_azi",  "B_dist", "B_azi", "T_dist", "T_azi") # t = turning point
## REGENERATION
# this dataset contains the inventory status, position and extend of the sampling circle satelites of the regeneration inventory of the HBI (BZE2)
RG_loc_info <- read.delim(file = here("data/input/BZE2_HBI/bej.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE) %>%
select(bund_nr, pk_nr, pk_richtung, pk_dist, pk_aufnahme ,pk_maxdist)
# assign column names    # bund_nr     pk_nr      pk_richtung     pk_dist     pk_aufnahme      pk_maxdist
colnames(RG_loc_info) <- c("plot_ID", "CCS_nr", "CCS_position",  "CCS_dist", "CCS_RG_inv_status", "CCS_max_dist_cm")
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
RG_data <- read.delim(file = here("data/input/BZE2_HBI/bejb.csv"), sep = ",", dec = ",")
#  "bund_nr"  "pk_nr"  "lfd_nr"   "bart"  "hoehe"    "grklasse"
colnames(RG_data) <- c("plot_ID", "CCS_nr", "tree_ID", "SP_code", "H_cm", "D_class_cm")
##DEADWOOD
# deadwood inventory info
DW_inv_info <- read.delim(file = here("data/input/BZE2_HBI/bedw.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
colnames(DW_inv_info) <- c("plot_ID", "CCS_DW_inv_status",  "dist_cm", "azi")
DW_data <- read.delim(file = here("data/input/BZE2_HBI/bedw_liste.csv"), sep = ",", dec = ",")
#  bund_nr lfd_nr t     yp      baumgruppe anzahl  durchmesser laenge zersetzung
colnames(DW_data) <- c("plot_ID", "tree_ID", "dw_type", "dw_sp", "count", "d_cm", "l_dm", "decay")
DW_data %>% filter(plot_ID == 140187)

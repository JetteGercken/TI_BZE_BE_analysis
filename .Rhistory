filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, dw_sp) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_sp"),
multiple = "all") %>%
mutate(decay = "all",
dw_type = "all") ,
# 3.4.8.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
distinct() %>%
# number of DW items per ha
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct(),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of decay types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, decay) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dec = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of deadwood types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, dw_type) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dw_TY = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%  # close rbind
# add stand component for those datasets where itÂ´s not included yet
mutate(stand_component = "DW") %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
LT_RG_DW_P <- rbind(
# plotwise summar yof tree dataset
LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# as there is no bg and total compartiment, this filter will only select ag compartiments
filter(compartiment %in% c("ag", "bg", "total")),
# take all "ag" compartiments of DW and assign them to the compartiment "total" as well, so we can create a row of total stocks for all stand components
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total"),
# total plot data over all stand components
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all")) %>%
arrange(plot_ID)
# 4. data export ----------------------------------------------------------
write.csv2(LT_summary, paste0(out.path.BZE3, paste(inv_name(LT_summary$inv_year[1]), "LT_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(RG_summary, paste0(out.path.BZE3, paste(inv_name(RG_summary$inv_year[1]), "RG_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(DW_summary, paste0(out.path.BZE3, paste(inv_name(DW_summary$inv_year[1]), "DW_stocks_ha_all_groups", sep = "_"), ".csv"))
trees_stat_2 %>% select(plot_ID)
trees_stat_2 %>% group_by(plot_ID) %>% summarise(n_CCS = n())
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID)
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n())
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3)
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
FSI_df <- plyr::rbind.fill(LT_DBH_RMS,
# select only those plots with empty sampling circuits that have all 3 circuits empty
# by counting the circuits per plot and filtering for those with n_CCS ==3
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3) %>%
select(plot_ID)) %>%
# if the Rbind caused NAs to appear because there were whole plots without a any tree CCS then we have to set the respective variable to 0
mutate(LT_RMS_DBH = ifelse(is.na(LT_RMS_DBH), 0, LT_RMS_DBH),
LT_FSI_DBH_RMS =  as.numeric(FSI(LT_RMS_DBH, min(LT_RMS_DBH), max(LT_RMS_DBH))))
}else{
FSI_df <- LT_DBH_RMS %>%
mutate(LT_FSI_DBH_RMS =  as.numeric(FSI(LT_RMS_DBH, min(LT_RMS_DBH), max(LT_RMS_DBH))))
}
plyr::rbind.fill(LT_DBH_RMS,
# select only those plots with empty sampling circuits that have all 3 circuits empty
# by counting the circuits per plot and filtering for those with n_CCS ==3
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3) %>%
select(plot_ID))
FSI_df
LT_summary %>%
filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(plot_ID, sd_DBH_cm) %>%
distinct()
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3) %>%
select(plot_ID))
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3) %>%
select(plot_ID)
LT_BCNBAn_ha
LT_BCNBAn_ha %>% filter(plot_ID == 50066)
# 1.4. stocks per hektar ------------------------------------------------------
# 1.4.1. Plot: stocks per hektar ------------------------------------------------------
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
LT_BCNBAn_ha <- plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv_year, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all"))}else{
LT_BCNBAn_ha <- trees_data %>%
group_by(plot_ID, CCS_r_m, inv_year, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")
}
LT_BCNBAn_ha <- plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv_year, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")}else{
# 1.4. stocks per hektar ------------------------------------------------------
# 1.4.1. Plot: stocks per hektar ------------------------------------------------------
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
LT_BCNBAn_ha <- plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv_year, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")}else{
LT_BCNBAn_ha <- trees_data %>%
group_by(plot_ID, CCS_r_m, inv_year, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")
}
# 1.4.2. plot, species, stand: stocks per ha, finest summary --------------
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
LT_SP_ST_P_BCNBAn_ha <- plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv_year, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT")}else{
LT_SP_ST_P_BCNBAn_ha <- trees_data %>%
group_by(plot_ID, CCS_r_m, inv_year, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha)) %>%
mutate(stand_component = "LT")
}
# 1.4.3. Plot, stand: stocks per hektar ------------------------------------------------------
LT_ST_BCNBAn_ha <- summarize_data(LT_SP_ST_P_BCNBAn_ha,
c("plot_ID", "inv_year", "compartiment", "stand"),
c("B_t_ha", "C_t_ha", "N_t_ha", "BA_m2_ha", "n_ha"),
operation = "sum_df") %>%
mutate(stand_component = "LT",
SP_code = "all")
# 1.4.4. Plot, species: stocks per hektar ------------------------------------------------------
LT_SP_BCNBA_ha <- summarize_data(LT_SP_ST_P_BCNBAn_ha,
c("plot_ID", "inv_year", "compartiment", "SP_code"),
c("B_t_ha", "C_t_ha", "N_t_ha", "BA_m2_ha"),
operation = "sum_df") %>%
mutate(stand_component = "LT",
stand = "all") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv_year, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv_year", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
# 1.5. plot: stand type ------------------------------------------------------
# 1.5.1. calcualte species composition and assing stand type ------------------------------------------------------
# requires the species plot wise summary
besttype_list <- vector("list", length = length(unique(trees_data$plot_ID)))
for (i in 1:length(unique(trees_data$plot_ID))) {
# i = 1
my.plot.id <- unique(trees_data$plot_ID)[i]
my.inv.year <- unique(trees_data$inv_year[trees_data$plot_ID == my.plot.id])
my.n.stand <- LT_n_stand_P$n_stand[LT_n_stand_P$plot_ID == my.plot.id]
my.sp.p.df <- trees_data %>%
# only determine the stand type for the main stand
filter(plot_ID == my.plot.id & stand == "A") %>%
group_by(plot_ID, CCS_r_m, inv_year, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, SP_code, compartiment) %>%
summarise(BA_m2_ha = sum(BA_CCS_m2_ha)) %>%
mutate(stand_component = "LT") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(.,
trees_data %>%
filter(plot_ID == my.plot.id & stand == "A") %>%
group_by(plot_ID, CCS_r_m, inv_year, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv_year, compartiment) %>%
summarise(BA_m2_ha_total = sum(BA_CCS_m2_ha)) %>%
mutate(stand_component = "LT") %>%
distinct(),
by = c("plot_ID", "inv_year", "stand_component", "compartiment")) %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(c("plot_ID","inv_year", "SP_code", "BA_m2_ha", "BA_percent")) %>%
distinct()
# calcaulte the composition / ration of coniferous and broadaleafed trees per plot
my.BLCF.p.df <- my.sp.p.df %>%
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)) %>%
select(char_code_ger_lowcase, LH_NH),
by = c("SP_code" = "char_code_ger_lowcase")) %>%
group_by(plot_ID, inv_year, LH_NH) %>%
summarize(BA_m2_ha = sum(BA_m2_ha),
BA_per_LHNH = sum(BA_percent))
# exptract the share of coniferous or broadleafed species at the plot
# if there are no broadleafed/ coniferous species and the search returns an empty variable, set the share to 0
my.CF.share <- ifelse(length(my.BLCF.p.df$BA_per_LHNH[my.BLCF.p.df$LH_NH == "NB"]) == 0, 0, my.BLCF.p.df$BA_per_LHNH[my.BLCF.p.df$LH_NH == "NB"])
my.BL.share <- ifelse(length(my.BLCF.p.df$BA_per_LHNH[my.BLCF.p.df$LH_NH == "LB"]) == 0, 0, my.BLCF.p.df$BA_per_LHNH[my.BLCF.p.df$LH_NH == "LB"])
# select the species with the highest basal area share:
# this only selects the one row with the highest value,
# which enables to ensure that even if there are multiple species of the category "sonstiges Laubholz"/ "sonstiges Nadelholz" only one species will be selected
# which is a requirement to assing a single species stand as it has to be dominated by ONE kind of species of the species groups (BU, EI, FI, KI, oBL, oCF)
main.sp.p.df <- (my.sp.p.df %>% arrange(desc(BA_percent)))[1,]
# assign the stand type group to the species with the highest basal area share
my.standtype.spec <- standtype(SP_names_com_ID_tapeS$bot_genus[tolower(SP_names_com_ID_tapeS$Chr_code_ger) == main.sp.p.df$SP_code],
SP_names_com_ID_tapeS$LH_NH[tolower(SP_names_com_ID_tapeS$Chr_code_ger) == main.sp.p.df$SP_code])
# assign standtype to mono-species stand, if basal area is >= 70%
# the number codes of the stand types are listed in neu_x_besttyp_bestand
besttype.mono <- case_when(my.standtype.spec == "FI" & main.sp.p.df$BA_percent >= 70 ~  1,  # "Fi-Rein"
my.standtype.spec == "KI" & main.sp.p.df$BA_percent >= 70 ~ 2,   # "Ki-Rein",
my.standtype.spec == "aNH" & main.sp.p.df$BA_percent >= 70 ~ 3,  #"sonst-Nd",
my.standtype.spec == "BU" & main.sp.p.df$BA_percent >= 70 ~ 4,   # "Bu-Rein" ,
my.standtype.spec == "EI" & main.sp.p.df$BA_percent >= 70 ~ 5,   # "Ei-Rein",
my.standtype.spec == "aLH" & main.sp.p.df$BA_percent >= 70 ~ 8,  # "sonst-Ld",
TRUE ~ NA)
# if its not a single species stand we have to reassess the stand conditions
# check if we can identify a Nadelholzmischbestand or Laubbolzmischbestand
# which means the overall share of conifers or broadleaved trees
besttype.strong.mix <- ifelse(is.na(besttype.mono) &
# if there area more CF then BL trees (CF min 50%, BL <50%)
my.CF.share > my.BL.share &
# but there is still a high amount of BL trees >30%
my.BL.share < 50 & my.BL.share > 30, 6,        # "Nd-Lb-Misch",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share > my.CF.share &
# but there is still a high amount of BL trees >30%
my.CF.share < 50 & my.CF.share > 30, 7,  # "Lb-Nd-Misch",
NA))
# assign stand types for stands wich are dominated by one catedory (CF, BL) but have a low amount
# of
besttype.mix  <- ifelse(is.na(besttype.mono) & is.na(besttype.strong.mix) &
# if there area more CF then BL trees (CF min 50%, BL <50%)
my.CF.share >= 70 &
# but there is still a high amount of BL trees >30%
my.BL.share <= 30, 9,         # "Nd-Lb<30",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share >= 70 &
# but there is still a high amount of CF trees >30%
my.CF.share <= 30, 10, # "Lb-Nd<30",
NA))
besttype.final <- ifelse(!is.na(besttype.mono) &
is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.mono,
ifelse(is.na(besttype.mono) &
!is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.strong.mix,
ifelse(is.na(besttype.mono) &
is.na(besttype.strong.mix) &
!is.na(besttype.mix), besttype.mix, NA)))
besttype_list[[i]] <- as.data.frame(cbind(
plot_ID = c(my.plot.id),
inv_year = c(my.inv.year),
dom_SP = c(main.sp.p.df$SP_code),
stand_type = c(besttype.final),
n_stands = c(my.n.stand),
stand_component = c("LT")
)) %>%
distinct()
}
# 0.SETUP --------------------------------------------------------------------------------------------------------------------
# 0.1. packages and functions -------------------------------------------------------------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
con <-dbConnect(RPostgres::Postgres())
#  1.2. PostgreSQL credentials --------------------------------------------------
# name of database
db <- 'bze3_altdaten'  #provide the name of your db
# host of database: thuenen server --> VPN proably need to be activated
host_db <- '134.110.100.88'   # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
# database port or any other port specified by the DBA
db_port <- '5432'  # this info you can find in the PGadmin properties of the server
# database username
db_user <- 'hgercken'  # 'henriette.gercken@thuenen.de'
# database password
db_password <-  'Ao1ieDahthaheoPh' # 'Jette$Thuenen_2024' #
# estabish connection
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
# 0.SETUP --------------------------------------------------------------------------------------------------------------------
# 0.1. packages and functions -------------------------------------------------------------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# 0.2. working directory ------------------------------------------------------------------------------------------------------
here::here()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# 0.3 import data --------------------------------------------------------------------------------------------------------------
# livign trees
trees_data <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_4.csv")), sep = ";", dec = ",")
LT_summary <-  read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
trees_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_LT_stat_2.csv")), sep = ";", dec = ",") %>% select(-X)
# regeneration
RG_data <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_RG_update_4.csv")), sep = ";", dec = ",")
RG_summary <-  read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_RG_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
RG_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_RG_stat_2.csv")), sep = ";", dec = ",")
# deadwood
DW_data <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_DW_update_4.csv")), sep = ";", dec = ",")
DW_summary <-  read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
DW_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_DW_stat_2.csv")), sep = ";", dec = ",")
LT_DBH_RMS <- trees_data %>%
group_by(plot_ID) %>%
reframe(LT_RMS_DBH = RMS(DBH_cm)) %>%
distinct()
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
FSI_df <- plyr::rbind.fill(LT_DBH_RMS,
# select only those plots with empty sampling circuits that have all 3 circuits empty
# by counting the circuits per plot and filtering for those with n_CCS ==3
trees_stat_2 %>%
select(plot_ID, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3) %>%
select(plot_ID)) %>%
# if the Rbind caused NAs to appear because there were whole plots without a any tree CCS then we have to set the respective variable to 0
mutate(LT_RMS_DBH = ifelse(is.na(LT_RMS_DBH), 0, LT_RMS_DBH),
LT_FSI_DBH_RMS =  as.numeric(FSI(LT_RMS_DBH, min(LT_RMS_DBH), max(LT_RMS_DBH))))
}else{
FSI_df <- LT_DBH_RMS %>%
mutate(LT_FSI_DBH_RMS =  as.numeric(FSI(LT_RMS_DBH, min(LT_RMS_DBH), max(LT_RMS_DBH))))
}
# 1.1.2. LT standard deviation of DBH ------------------------------------------------------------------
FSI_df <- FSI_df %>%
left_join(.,
LT_summary %>%
filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(plot_ID, sd_DBH_cm) %>%
distinct() %>%
mutate(LT_FSI_DBH_SD =  as.numeric(FSI(sd_DBH_cm, min(sd_DBH_cm), max(sd_DBH_cm))),
plot_ID = as.integer(plot_ID)) %>%
rename("LT_sd_DBH_cm" = "sd_DBH_cm"),
by = "plot_ID")
# 1.1.3. LT standard deviation of stand height ------------------------------------------------------------------
FSI_df <- FSI_df %>%
left_join(.,
LT_summary %>%
filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(plot_ID, sd_H_m) %>%
distinct() %>%
mutate(LT_FSI_H_SD =  as.numeric(FSI(sd_H_m, min(sd_H_m), max(sd_H_m))),
plot_ID = as.integer(plot_ID)) %>%
rename("LT_sd_H_m" = "sd_H_m"),
by = "plot_ID")
# 1.1.4. tree species richness ------------------------------------------------------------------
FSI_df <- FSI_df %>%
left_join(.,
LT_summary %>%
filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(plot_ID, n_SP) %>%
distinct() %>%
mutate(LT_FSI_n_SP = as.numeric(FSI(n_SP, min(n_SP), max(n_SP))),
plot_ID = as.integer(plot_ID)) %>%
rename("LT_n_SP" = "n_SP"),
by = "plot_ID")

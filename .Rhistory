#https://stackoverflow.com/questions/20204257/subset-data-frame-based-on-number-of-rows-per-group
filter(n() >= 3)%>%
group_by(SP_code) %>%
nls_table( H_m ~ b0 * (1 - exp( -b1 * DBH_cm))^b2,
mod_start = c(b0=23, b1=0.03, b2 =1.3),
output = "table"),
by = c("SP_code"))%>%
mutate(H_est = b0 * (1 - exp( -b1 * DBH_cm))^b2) %>%
group_by(SP_code) %>%
summarise( b0 = mean(b0),
b1 = mean(b1),
b2 = mean(b2),
#https://rdrr.io/cran/forestmangr/f/vignettes/eq_group_fit_en.Rmd
bias = bias_per(y = H_m, yhat = H_est),
rsme = rmse_per(y = H_m, yhat = H_est),
#https://stackoverflow.com/questions/14530770/calculating-r2-for-a-nonlinear-least-squares-fit
R2 = max(cor(H_m, H_est),0)^2,
#https://stats.stackexchange.com/questions/11676/pseudo-r-squared-formula-for-glms
mean_h = mean(H_m),
#N = length(H_m),
SSres = sum((H_m-H_est)^2),
SStot = sum((H_m-mean_h)^2),
pseu_R2 = 1-(SSres/SStot),
diff_h = mean(H_m - H_est)) %>%
mutate(plot_ID = as.factor('all')) %>%
select(plot_ID, SP_code, b0, b1, b2, bias, rsme, R2, mean_h, SSres, SStot, pseu_R2, diff_h)
# 2.1.3 combined coefficients of height models ---------------------
coeff_H_comb <- rbind(coeff_H_SP_P %>% mutate(plot_ID = as.factor(plot_ID)), coeff_H_SP)
#calcualte the height and diameter of a stem reprensenting the mean basal area
# this is creates a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
Hg_Dg_trees_total.df <- trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m))) %>%      # calculate mean height per sampling circuit and species and C layer and plot
group_by(inv, plot_ID, stand, C_layer, SP_code )%>%            # group by plot and species,  canopy layer and sampling circuit to calcualte dg, hg
summarize(no_trees_ha = sum(no_trees_CC_ha),                                # calculate number of trees per plot
BA_m2_ha = sum(BA_CC_m2_ha),               # calculate sum of BA across all sampling circuit to account for represnation of different trees in the sampling circuits
mean_DBH_mm = mean(mean_DBH_mm_CC),        # calculate mean of DBH across all sampling circuit to account for represnation of different trees in the sampling circuits
mean_H_m = mean(mean_H_m_CC),              # calculate mean of height across all sampling circuit to account for represnation of different trees in the sampling circuits
mean_BA_m2_tree = BA_m2_ha/no_trees_ha,
H_g = sum(mean(na.omit(mean_H_m))*BA_m2_ha)/sum(BA_m2_ha),    # Hoehe des Grundflächemittelstammes, calculation according to S. Schnell
mean_DBH_mm = mean(mean_DBH_mm),                           # mean diameter per species per canopy layer per plot
D_g = ((sqrt((mean_BA_m2_tree/pi)))*2)*100)              #  Durchmesser des Grundflächenmittelstammes; *100 to get from 1m -> 100cm
# 2.3. height calculation -------------------------------------------------
# 2.3.1. height calculation HBI -------------------------------------------------
HBI_trees_update_3 <-     # this should actually be the BZE3 Datset
trees_total %>%
filter(inv=="HBI")%>%
## joining coefficients and Hg-Dg-data in
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE) %>%            # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
left_join(.,coeff_H_SP_P %>%                                              # joining R2 from coeff_SP_P -> R2.x
select(plot_ID, SP_code, R2) %>%
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE),   # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
by = c("plot_ID", "SP_code", "SP_P_ID")) %>%
left_join(., coeff_H_SP %>% select(SP_code, R2),               # joing R2 from coeff_SP data set -> R2.y
by = "SP_code") %>%
# this is joins in a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
left_join(., Hg_Dg_trees_total.df,
by = c("inv", "plot_ID", "stand", "SP_code", "C_layer")) %>%
mutate(R2_comb = f(R2.x, R2.y, R2.y, R2.x),                               # if R2 is na, put R2 from coeff_SP_P unless R2 from coeff_SP is higher
H_method = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ "coeff_SP_P",
is.na(H_m) & is.na(R2.x) & R2.y > 0.70| is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ "coeff_sp",
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ "ehk_sloboda",
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ "h_curtis",
TRUE ~ "sampled")) %>%
# When h_m is na but there is a plot and species wise model with R2 above 0.7, use the model to predict the height
mutate(H_m = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ h_nls_SP_P(SP_P_ID, DBH_cm),
# if H_m is na and there is an R2 from coeff_SP_P thats bigger then 0.75 or of theres no R2 from
# coeff_SP_plot that´s bigger then R2 of coeff_SP_P while the given R2 from coeff_SP_P is above
# 0.75 then use the SP_P models
is.na(H_m) & is.na(R2.x) & R2.y > 0.70 | is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ h_nls_SP(SP_code, DBH_cm),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na but there is a h_g and d_G
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ ehk_sloboda(H_SP_group, DBH_cm*10, mean_DBH_mm, D_g, H_g),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na and the Slobody function cannot eb applied because there is no h_g calculatable use the curtis function
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ h_curtis(H_SP_group, DBH_cm*10),
TRUE ~ H_m)) %>%
# select columns that should enter the next step of data processing
select(plot_ID,  stand, tree_ID,  tree_inventory_status,  multi_stem, Dist_cm,  azi_gon, age, age_meth,
SP_code, Chr_code_ger, tpS_ID, H_SP_group, BWI_SP_group, Bio_SP_group, N_SP_group, N_bg_SP_group,
DBH_class,  Kraft, C_layer, H_dm, H_m,  C_h_dm, D_mm,   DBH_h_cm,  DBH_cm, BA_m2,
CCS_r_m, plot_A_ha)
# 2.3.2. height calculation BZE -------------------------------------------------
BZE3_trees_update_3 <-  trees_total %>%
filter(inv=="BZE3")%>%
## 2.3.1. joining coefficients and Hg-Dg-data in
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE) %>%            # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
left_join(.,coeff_H_SP_P %>%                                              # joining R2 from coeff_SP_P -> R2.x
select(plot_ID, SP_code, R2) %>%
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE),   # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
by = c("plot_ID", "SP_code", "SP_P_ID")) %>%
left_join(., coeff_H_SP %>% select(SP_code, R2),               # joing R2 from coeff_SP data set -> R2.y
by = "SP_code") %>%
# this is joins in a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
left_join(., Hg_Dg_trees_total.df,
by = c("plot_ID", "stand", "SP_code", "C_layer")) %>%
mutate(R2_comb = f(R2.x, R2.y, R2.y, R2.x),                               # if R2 is na, put R2 from coeff_SP_P unless R2 from coeff_SP is higher
H_method = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ "coeff_SP_P",
is.na(H_m) & is.na(R2.x) & R2.y > 0.70| is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ "coeff_sp",
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ "ehk_sloboda",
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ "h_curtis",
TRUE ~ "sampled")) %>%
# When h_m is na but there is a plot and species wise model with R2 above 0.7, use the model to predict the height
mutate(H_m = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ h_nls_SP_P(SP_P_ID, DBH_cm),
# if H_m is na and there is an R2 from coeff_SP_P thats bigger then 0.75 or of theres no R2 from
# coeff_SP_plot that´s bigger then R2 of coeff_SP_P while the given R2 from coeff_SP_P is above
# 0.75 then use the SP_P models
is.na(H_m) & is.na(R2.x) & R2.y > 0.70 | is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ h_nls_SP(SP_code, DBH_cm),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na but there is a h_g and d_G
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ ehk_sloboda(H_SP_group, DBH_cm*10, mean_DBH_mm, D_g, H_g),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na and the Slobody function cannot eb applied because there is no h_g calculatable use the curtis function
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ h_curtis(H_SP_group, DBH_cm*10),
TRUE ~ H_m))%>%
select(plot_ID,  stand, tree_ID,  tree_inventory_status,  multi_stem, Dist_cm,  azi_gon, age, age_meth,
SP_code, Chr_code_ger, tpS_ID, H_SP_group, BWI_SP_group, Bio_SP_group, N_SP_group, N_bg_SP_group,
DBH_class,  Kraft, C_layer, H_dm, H_m,  C_h_dm, D_mm,   DBH_h_cm,  DBH_cm, BA_m2,
CCS_r_m, plot_A_ha)
# ---- 1.1.2.6. exporting dataset --------------------------
# height nls coefficients
write.csv(coeff_H_comb, paste0(out.path.BZE3, paste("coef_H", unique(HBI_trees_update_3$inv)[1], unique(BZE3_trees_update_3$inv)[1], sep = "_"), ".csv"))
# HBI dataset including estimated heights
write.csv(HBI_trees_update_3, paste0(out.path.BZE3, paste(unique(HBI_trees_update_3$inv)[1], "trees_update_3", sep = "_"), ".csv"))
# BZE3 dataset including estimated heights
write.csv(BZE3_trees_update_3, paste0(out.path.BZE3, paste(unique(BZE3_trees_update_3$inv)[1], "trees_update_3", sep = "_"), ".csv"))
HBI_trees_update_3
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/functions_library.R"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_3.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
trees.comp.list <- vector("list", lenght = length(trees))
trees.comp.list <- vector("list", lenght = length(trees$tree_ID))
length(trees$tree_ID)
vector("list", lenght = length(trees$tree_ID))
vector
trees.comp.list <- vector("list", length = length(trees))
trees.comp.list
trees.comp.list <- vector("list", length = length(trees$X))
trees.comp.list
for (i in 1:lenght(trees)) {
# select every single row of the dataframe and repeat it as many times as we have compartiments
df <- trees[i,]
comp <- c("stw","stb","sw", "sb", "fwb", "ndl" )
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
df <- cbind(df[rep(seq_len(nrow(df)), each = length(comp)), ],
comp)
trees.comp.list[[i]] <- df
}
for (i in 1:length(trees)) {
# select every single row of the dataframe and repeat it as many times as we have compartiments
df <- trees[i,]
comp <- c("stw","stb","sw", "sb", "fwb", "ndl" )
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
df <- cbind(df[rep(seq_len(nrow(df)), each = length(comp)), ],
comp)
trees.comp.list[[i]] <- df
}
trees.comp.final <- rbindlist(trees.comp.list)
trees <- as.data.frame(trees.comp.final)
trees
# 1.1. biomass aboveground compartiments ----------------------------------
trees %>% mutate(B_kg_tree = tprBiomass(
tprTrees( spp = tpS_ID,
Dm = list(DBH_cm),
Hm = list(DBH_h_cm/100),
Ht = H_m,
inv = 4),
component = comp,
mono = TRUE
))
H_m
# 1.1. biomass aboveground compartiments ----------------------------------
trees %>% mutate(B_kg_tree = tprBiomass(
tprTrees( spp = tpS_ID,
Dm = list(DBH_cm),
Hm = list(DBH_h_cm/100),
Ht = as.numeric(H_m),
inv = 4),
component = comp,
mono = TRUE
))
trees %>% mutate(B_kg_tree = tprBiomass(
tprTrees( spp = tpS_ID,
Dm = list(DBH_cm),
Hm = list(DBH_h_cm/100),
Ht = as.numeric(H_m),
inv = 4),
component = "sw",
mono = TRUE
))
rlang::last_error()
rlang::last_trace()
B_kg_tapes <- function(spec, dbh, dbh_h, h, component){
spp = na.omit(spec);
Dm = na.omit(as.list(dbh));
Hm = na.omit(as.list(dbh_h));
Ht = na.omit(h);
obj<- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(component = "stw", tprBiomass(obj, component = "stw"),
ifelse(component = "stb", tprBiomass(obj, component="stb"),
ifelse(component = "sw" , tprBiomass(obj, component="sw"),
ifelse(component = "sb", tprBiomass(obj, component="sb"),
ifelse(component = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(component = "ndl" , tprBiomass(obj, component="ndl")
))))))
return(bio_kg[1])
}
B_kg_tapes
trees$DBH_cm
trees
trees.comp.list
trees.comp.list <- vector("list", length = length(trees$X))
for (i in 1:length(trees$X)) {
# select every single row of the dataframe and repeat it as many times as we have compartiments
df <- trees[i,]
comp <- c("stw","stb","sw", "sb", "fwb", "ndl" )
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
df <- cbind(df[rep(seq_len(nrow(df)), each = length(comp)), ],
comp)
trees.comp.list[[i]] <- df
}
trees.comp.final <- rbindlist(trees.comp.list)
trees <- as.data.frame(trees.comp.final)
trees
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_3.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
trees.comp.list <- vector("list", length = length(trees$X))
for (i in 1:length(trees$X)) {
# select every single row of the dataframe and repeat it as many times as we have compartiments
df <- trees[i,]
comp <- c("stw","stb","sw", "sb", "fwb", "ndl" )
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
df <- cbind(df[rep(seq_len(nrow(df)), each = length(comp)), ],
comp)
trees.comp.list[[i]] <- df
}
trees.comp.final <- rbindlist(trees.comp.list)
trees <- as.data.frame(trees.comp.final)
trees
trees[1,]
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m,  comp))
# 2.3. height calculation -------------------------------------------------
# 2.3.1. height calculation HBI -------------------------------------------------
HBI_trees_update_3 <-     # this should actually be the BZE3 Datset
trees_total %>%
filter(inv=="HBI")%>%
## joining coefficients and Hg-Dg-data in
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE) %>%            # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
left_join(.,coeff_H_SP_P %>%                                              # joining R2 from coeff_SP_P -> R2.x
select(plot_ID, SP_code, R2) %>%
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE),   # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
by = c("plot_ID", "SP_code", "SP_P_ID")) %>%
left_join(., coeff_H_SP %>% select(SP_code, R2),               # joing R2 from coeff_SP data set -> R2.y
by = "SP_code") %>%
# this is joins in a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
left_join(., Hg_Dg_trees_total.df,
by = c("inv", "plot_ID", "stand", "SP_code", "C_layer")) %>%
mutate(R2_comb = f(R2.x, R2.y, R2.y, R2.x),                               # if R2 is na, put R2 from coeff_SP_P unless R2 from coeff_SP is higher
H_method = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ "coeff_SP_P",
is.na(H_m) & is.na(R2.x) & R2.y > 0.70| is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ "coeff_sp",
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ "ehk_sloboda",
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ "h_curtis",
TRUE ~ "sampled")) %>%
# When h_m is na but there is a plot and species wise model with R2 above 0.7, use the model to predict the height
mutate(H_m = as.numeric(case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ h_nls_SP_P(SP_P_ID, DBH_cm),
# if H_m is na and there is an R2 from coeff_SP_P thats bigger then 0.75 or of theres no R2 from
# coeff_SP_plot that´s bigger then R2 of coeff_SP_P while the given R2 from coeff_SP_P is above
# 0.75 then use the SP_P models
is.na(H_m) & is.na(R2.x) & R2.y > 0.70 | is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ h_nls_SP(SP_code, DBH_cm),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na but there is a h_g and d_G
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ ehk_sloboda(H_SP_group, DBH_cm*10, mean_DBH_mm, D_g, H_g),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na and the Slobody function cannot eb applied because there is no h_g calculatable use the curtis function
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ h_curtis(H_SP_group, DBH_cm*10),
TRUE ~ H_m))) %>%
# select columns that should enter the next step of data processing
select(plot_ID,  stand, tree_ID,  tree_inventory_status,  multi_stem, Dist_cm,  azi_gon, age, age_meth,
SP_code, Chr_code_ger, tpS_ID, H_SP_group, BWI_SP_group, Bio_SP_group, N_SP_group, N_bg_SP_group,
DBH_class,  Kraft, C_layer, H_dm, H_m,  C_h_dm, D_mm,   DBH_h_cm,  DBH_cm, BA_m2,
CCS_r_m, plot_A_ha)
# 2.3.2. height calculation BZE -------------------------------------------------
BZE3_trees_update_3 <-  trees_total %>%
filter(inv=="BZE3")%>%
## 2.3.1. joining coefficients and Hg-Dg-data in
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE) %>%            # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
left_join(.,coeff_H_SP_P %>%                                              # joining R2 from coeff_SP_P -> R2.x
select(plot_ID, SP_code, R2) %>%
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE),   # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
by = c("plot_ID", "SP_code", "SP_P_ID")) %>%
left_join(., coeff_H_SP %>% select(SP_code, R2),               # joing R2 from coeff_SP data set -> R2.y
by = "SP_code") %>%
# this is joins in a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
left_join(., Hg_Dg_trees_total.df,
by = c("plot_ID", "stand", "SP_code", "C_layer")) %>%
mutate(R2_comb = f(R2.x, R2.y, R2.y, R2.x),                               # if R2 is na, put R2 from coeff_SP_P unless R2 from coeff_SP is higher
H_method = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ "coeff_SP_P",
is.na(H_m) & is.na(R2.x) & R2.y > 0.70| is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ "coeff_sp",
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ "ehk_sloboda",
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ "h_curtis",
TRUE ~ "sampled")) %>%
# When h_m is na but there is a plot and species wise model with R2 above 0.7, use the model to predict the height
mutate(H_m = case_when(is.na(H_m) & !is.na(R2.x) & R2.x > 0.70 | is.na(H_m) & R2.x > R2.y & R2.x > 0.7 ~ h_nls_SP_P(SP_P_ID, DBH_cm),
# if H_m is na and there is an R2 from coeff_SP_P thats bigger then 0.75 or of theres no R2 from
# coeff_SP_plot that´s bigger then R2 of coeff_SP_P while the given R2 from coeff_SP_P is above
# 0.75 then use the SP_P models
is.na(H_m) & is.na(R2.x) & R2.y > 0.70 | is.na(H_m) & R2.x < R2.y & R2.y > 0.70 ~ h_nls_SP(SP_code, DBH_cm),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na but there is a h_g and d_G
is.na(H_m) & is.na(R2_comb) & !is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & !is.na(H_g) ~ ehk_sloboda(H_SP_group, DBH_cm*10, mean_DBH_mm, D_g, H_g),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na and the Slobody function cannot eb applied because there is no h_g calculatable use the curtis function
is.na(H_m) & is.na(R2_comb) & is.na(H_g)| is.na(H_m) & R2_comb < 0.70 & is.na(H_g) ~ h_curtis(H_SP_group, DBH_cm*10),
TRUE ~ H_m))%>%
select(plot_ID,  stand, tree_ID,  tree_inventory_status,  multi_stem, Dist_cm,  azi_gon, age, age_meth,
SP_code, Chr_code_ger, tpS_ID, H_SP_group, BWI_SP_group, Bio_SP_group, N_SP_group, N_bg_SP_group,
DBH_class,  Kraft, C_layer, H_dm, H_m,  C_h_dm, D_mm,   DBH_h_cm,  DBH_cm, BA_m2,
CCS_r_m, plot_A_ha)
# ---- 1.1.2.6. exporting dataset --------------------------
# height nls coefficients
write.csv(coeff_H_comb, paste0(out.path.BZE3, paste("coef_H", unique(HBI_trees_update_3$inv)[1], unique(BZE3_trees_update_3$inv)[1], sep = "_"), ".csv"))
# HBI dataset including estimated heights
write.csv(HBI_trees_update_3, paste0(out.path.BZE3, paste(unique(HBI_trees_update_3$inv)[1], "trees_update_3", sep = "_"), ".csv"))
# BZE3 dataset including estimated heights
write.csv(BZE3_trees_update_3, paste0(out.path.BZE3, paste(unique(BZE3_trees_update_3$inv)[1], "trees_update_3", sep = "_"), ".csv"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_3.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
trees
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_3.csv"), sep = ",", dec = ",")
trees <- trees %>% mutate(H_m = as.numeric(H_m))
trees.comp.list <- vector("list", length = length(trees$X))
for (i in 1:length(trees$X)) {
# select every single row of the dataframe and repeat it as many times as we have compartiments
df <- trees[i,]
comp <- c("stw","stb","sw", "sb", "fwb", "ndl" )
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
df <- cbind(df[rep(seq_len(nrow(df)), each = length(comp)), ],
comp)
trees.comp.list[[i]] <- df
}
trees.comp.final <- rbindlist(trees.comp.list)
trees <- as.data.frame(trees.comp.final)
B_kg_tapes <- function(spec, dbh, dbh_h, h, component){
spp = na.omit(spec);
Dm = na.omit(as.list(dbh));
Hm = na.omit(as.list(dbh_h));
Ht = na.omit(h);
obj<- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(component = "stw", tprBiomass(obj, component = "stw"),
ifelse(component = "stb", tprBiomass(obj, component="stb"),
ifelse(component = "sw" , tprBiomass(obj, component="sw"),
ifelse(component = "sb", tprBiomass(obj, component="sb"),
ifelse(component = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(component = "ndl" , tprBiomass(obj, component="ndl")
))))))
return(bio_kg[1])
}
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m,  comp))
B_kg_tapes <- function(spec, dbh, dbh_h, h, component){
spp = na.omit(spec);
Dm = na.omit(as.list(as.numeric(dbh)));
Hm = na.omit(as.list(as.numeric(dbh_h)));
Ht = na.omit(as.numeric(h));
obj<- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(component = "stw", tprBiomass(obj, component = "stw"),
ifelse(component = "stb", tprBiomass(obj, component="stb"),
ifelse(component = "sw" , tprBiomass(obj, component="sw"),
ifelse(component = "sb", tprBiomass(obj, component="sb"),
ifelse(component = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(component = "ndl" , tprBiomass(obj, component="ndl")
))))))
return(bio_kg[1])
}
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m,  comp))
B_kg_tapes <- function(spec, dbh, dbh_h, h, comp){
spp = na.omit(spec);
Dm = na.omit(as.list(as.numeric(dbh)));
Hm = na.omit(as.list(as.numeric(dbh_h)));
Ht = na.omit(as.numeric(h));
obj<- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(comp= "stw", tprBiomass(obj, component = "stw"),
ifelse(comp = "stb", tprBiomass(obj, component="stb"),
ifelse(comp = "sw" , tprBiomass(obj, component="sw"),
ifelse(comp = "sb", tprBiomass(obj, component="sb"),
ifelse(comp = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(comp = "ndl" , tprBiomass(obj, component="ndl")
))))))
return(bio_kg[1])
}
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m,  comp))
B_kg_tapes <- function(spec, dbh, dbh_h, h, comp){
spp = na.omit(spec);
Dm = na.omit(as.list(as.numeric(dbh)));
Hm = na.omit(as.list(as.numeric(dbh_h)));
Ht = na.omit(as.numeric(h));
obj<- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(comp= "stw", tprBiomass(obj, component = "stw"),
ifelse(comp = "stb", tprBiomass(obj, component="stb"),
ifelse(comp = "sw" , tprBiomass(obj, component="sw"),
ifelse(comp = "sb", tprBiomass(obj, component="sb"),
ifelse(comp = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(comp = "ndl" , tprBiomass(obj, component="ndl"),
NA
))))))
return(bio_kg[1])
}
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m,  comp))
B_kg_tapes <- function(spec, dbh, dbh_h, h, comp){
spp = na.omit(spec);
Dm = na.omit(as.list(as.numeric(dbh)));
Hm = na.omit(as.list(as.numeric(dbh_h)));
Ht = na.omit(as.numeric(h));
obj <- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(comp = "stw", tprBiomass(obj, component = "stw"),
ifelse(comp = "stb", tprBiomass(obj, component="stb"),
ifelse(comp = "sw" , tprBiomass(obj, component="sw"),
ifelse(comp = "sb", tprBiomass(obj, component="sb"),
ifelse(comp = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(comp = "ndl" , tprBiomass(obj, component="ndl"),
NA
))))))
return(bio_kg[1])
}
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m, comp))
rlang::last_error()
rlang::last_trace()
trees[1,]
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_3.csv"), sep = ",", dec = ",")
trees <- trees %>% mutate(H_m = as.numeric(H_m))
trees.comp.list <- vector("list", length = length(trees$X))
for (i in 1:length(trees$X)) {
# select every single row of the dataframe and repeat it as many times as we have compartiments
df <- trees[i,]
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
df <- cbind(df[rep(seq_len(nrow(df)), each = length(comp)), ],
comp)
trees.comp.list[[i]] <- df
}
trees.comp.final <- rbindlist(trees.comp.list)
trees <- as.data.frame(trees.comp.final)
B_kg_tapes <- function(spec, dbh, dbh_h, h, comp){
spp = na.omit(spec);
Dm = na.omit(as.list(as.numeric(dbh)));
Hm = na.omit(as.list(as.numeric(dbh_h)));
Ht = na.omit(as.numeric(h));
obj <- tprTrees(spp, Dm, Hm, Ht, inv = 4);
bio_kg <- ifelse(comp = "stw", tprBiomass(obj, component = "stw"),
ifelse(comp = "stb", tprBiomass(obj, component="stb"),
ifelse(comp = "sw" , tprBiomass(obj, component="sw"),
ifelse(comp = "sb", tprBiomass(obj, component="sb"),
ifelse(comp = "fwb" , tprBiomass(obj, component="fwb"),
ifelse(comp = "ndl" , tprBiomass(obj, component="ndl"),
NA
))))))
return(bio_kg[1])
}
trees[1,] %>% mutate(B_kg_tree = B_kg_tapes(tpS_ID, DBH_cm, DBH_h_cm/100, H_m, comp))
B_kg_tapes(1, 2, 3, 4)

# as we collect all growth info in regard to the BZE3 by left_joining in HBI data,
# plots that have a calculated stock that are not present in BZE3 anymore , there will be no "negative growth" registered
# this is why we save perfectly fine HBI plots that do not have a counter/ Pertner plot in BZE3 in a separate dataset:
HBI_plots_not_represented_in_BZE3 <- HBI_summary %>% semi_join(., HBI_summary %>%
select(plot_ID, stand, SP_code, compartiment, dw_sp, dw_type, decay, stand_type ) %>%
distinct() %>%
anti_join(., BZE3_summary %>%
select(plot_ID, stand, SP_code, compartiment,dw_sp,dw_type,decay, stand_type) %>%
distinct(), by = c("plot_ID", "stand", "SP_code", "compartiment", "dw_sp", "dw_type","decay", "stand_type")),
by = c("plot_ID", "stand", "SP_code", "compartiment", "dw_sp", "dw_type","decay", "stand_type"))
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, stand, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
distinct() %>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, stand, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code"),
multiple = "all") %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
# 1.2. grouping growth ------------------------------------------------------------------
dbh_growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"),
# growth by plot
summarize_data(dbh_growth_tree,
c("plot_ID"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
SP_code = "all"))
# 1.3. changes in BA composition -------------------------------------------
# select all possible tree species and stands per plot create list of all possible species per plot from both invenoties, to be able to join in basal area shares later and set missing shares to 0
BA_changes_SP_ST_P <- rbind(BZE3_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all" |
# filter for plot, species and stand wise summary
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select all possible plot_iD, species and stand combinations
select(plot_ID, SP_code, stand) %>% distinct(),
HBI_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all" |
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select all possible plot_iD, species and stand combinations
select(plot_ID, SP_code, stand) %>% distinct()) %>%
distinct() %>%
mutate(plot_ID = as.integer(plot_ID)) %>%
arrange(plot_ID) %>%
## this is how I used to filter, before we decided to calculate the BA changes for the stand- wise summaries as well
# rbind(BZE3_trees %>% select(plot_ID, SP_code, stand) %>% distinct(),
#                   HBI_trees %>% select(plot_ID, SP_code, stand) %>% distinct()) %>%
# distinct() %>%
# arrange(plot_ID) %>%
# join basal area shares from species in BZE3 dataset according to species, and plot, if the species does have a basal area share in BZE3
left_join(., BZE3_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all" |
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select the BA percent
select(plot_ID, SP_code, stand, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_BZE3 = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code", "stand")) %>%
# join basal area shares from species in HBI dataset according to species, and plot, if the species does have a basal area share in BZE3
left_join(., HBI_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all"|
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select the BA percent
select(plot_ID, SP_code, stand, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_HBI = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code", "stand")) %>%
# here we have to set the BA_percent that do not appear in the respective inventory to 0
mutate(BA_percent_BZE3 = ifelse(is.na(BA_percent_BZE3), 0, BA_percent_BZE3),
BA_percent_HBI = ifelse(is.na(BA_percent_HBI), 0, BA_percent_HBI),
BA_percent_diff = BA_percent_BZE3-BA_percent_HBI, # calcualte difference in HBI and BZE3 BA share per plot and species
#stand = "all",
C_layer = "all")
# 1.4. changes in stocks per ha --------------------------------------------
trees_stock_changes_P <-
BZE3_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m) %>%
#add "_BZE3" to the names of the valriables we want to calculate the difference for:  https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP, mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m)) %>%
distinct()  %>%
# jopin in HBI dataset via left join, so that only plots, species, C layers and stands are joined in that have a partner in the current inventory.
left_join(., HBI_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m)) %>%
distinct(),
by = c("stand_component", "stand_type" ,"plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") |
contains("n_SP")  |
contains("Hg")  |
contains("Dg"), ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all", 0, .x)) ) %>%
# for the means and sds we calcualted values in the catagories : SP_code, plot and plot. Thus we have to set only NAs that occure in these groups and columns to 0
mutate(across(contains("mean") | contains("sd")  | contains("Hg")  | contains("Dg") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code != "all", 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(trees_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(trees_stock_changes_P), value=TRUE)
trees_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- trees_stock_changes_P[, post_vars] - trees_stock_changes_P[, pre_vars]
trees_stock_changes_P <- trees_stock_changes_P %>% arrange(plot_ID, stand, SP_code, compartiment) %>%
mutate(C_layer = "all")
# binding all LT growth datasets together ---------------------------------
LT_changes <- dbh_growth_summary %>%
left_join(.,
trees_stock_changes_P %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "C_layer", "SP_code"),
multiple = "all") %>%  # multiple = "all" for compartiments, which is not represented in dbh growth
left_join(BA_changes_SP_ST_P %>%
select(plot_ID, stand, SP_code, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "SP_code", "C_layer") ) %>%
mutate(stand_component = "LT") %>%
select(stand_component, plot_ID, stand, stand_type, C_layer, SP_code, compartiment, age_period, annual_growth_cm, contains("diff"))%>%
arrange(plot_ID)
# 2. REGENERATION CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
RG_stock_changes_P <-
BZE3_RG_summary %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)) %>%
# we use an inner join here because there are compartiments which are represented in RG BZE3
# are represented in HBI but we have to discuss this !!!!
left_join(., HBI_RG_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)),
by = c("stand_component", "plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") | contains("n_SP") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all" |
is.na(.x) &
plot_ID != "all"&
is.na(stand) &
SP_code == "all" , 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the  national soil inventory
# growth
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# vorräte: über alle jahre
# einzelbaumdurchmesser
# veränderung grundflächenanteil
# 0.3. data import --------------------------------------------------------
# BZE3
# living trees
BZE3_trees <- read.delim(file = here(paste0(out.path.BZE3, "BZE3_LT_update_4.csv")), sep = ",", dec = ".")
# all LT, RG, DW summmaries together and total plot stock bze3
BZE3_summary <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_LT_RG_DW_stocks_ha_all_groups.csv")), sep = ",", dec = ".")
# living trees summary
BZE3_LT_summary <- BZE3_summary %>% filter(stand_component == "LT") %>% # read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
select(-c(dw_sp, dw_type, decay, inv_year, ST_LY_type, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m, n_dec, n_dw_TY))
# regeneration
# this dataset contains single plant data of regeneration inventory of BZE3
BZE3_RG <-  read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_RG_update_4.csv")), sep = ",", dec = ".")
# this dataset contains regeneration data summarized per hectar BZE3
BZE3_RG_summary <- BZE3_summary %>% filter(stand_component == "RG") #read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_RG_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# deadwood
# this dataset contains single plant data of deadwood inventory of HBI
BZE3_DW <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_DW_update_4.csv")), sep = ",", dec = ".")
# this dataset contains deadwood data summarized per hectar HBI
BZE3_DW_summary <- BZE3_summary %>% filter(stand_component == "DW") # read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
#FSI
BZE3_FSI <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_FSI.csv")), sep = ",", dec = ".")
# HBI Data
# living trees
HBI_trees <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_4.csv")), sep = ",", dec = ".")
# all LT, RG, DW summmaries together and total plot stock HBI
HBI_summary <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_LT_RG_DW_stocks_ha_all_groups.csv")), sep = ",", dec = ".")
# living trees summary
HBI_LT_summary <-  HBI_summary %>% filter(stand_component == "LT") %>%  #read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
select(-c(dw_sp, dw_type, decay, inv_year, ST_LY_type, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m, n_dec, n_dw_TY))
# regeneration
# this dataset contains single plant data of regeneration inventory of HBI
HBI_RG <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_RG_update_4.csv")), sep = ",", dec = ".")
# this dataset contains regeneration data summarized per hectar HBI
HBI_RG_summary <- HBI_summary %>% filter(stand_component == "RG") #read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_RG_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# deadwood
# this dataset contains single plant data of deadwood inventory of HBI
HBI_DW <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_DW_update_4.csv")),sep = ",", dec = ".")
# this dataset contains deadwood data summarized per hectar HBI
HBI_DW_summary <- HBI_summary %>% filter(stand_component == "DW")  #read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# FSI
HBI_FSI <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_FSI.csv")), sep = ",", dec = ".")
# data sorting ------------------------------------------------------------
# as we collect all growth info in regard to the BZE3 by left_joining in HBI data,
# plots that have a calculated stock that are not present in BZE3 anymore , there will be no "negative growth" registered
# this is why we save perfectly fine HBI plots that do not have a counter/ Pertner plot in BZE3 in a separate dataset:
HBI_plots_not_represented_in_BZE3 <- HBI_summary %>% semi_join(., HBI_summary %>%
select(plot_ID, stand, SP_code, compartiment, dw_sp, dw_type, decay, stand_type ) %>%
distinct() %>%
anti_join(., BZE3_summary %>%
select(plot_ID, stand, SP_code, compartiment,dw_sp,dw_type,decay, stand_type) %>%
distinct(), by = c("plot_ID", "stand", "SP_code", "compartiment", "dw_sp", "dw_type","decay", "stand_type")),
by = c("plot_ID", "stand", "SP_code", "compartiment", "dw_sp", "dw_type","decay", "stand_type"))
# 1. LIVING TREES CALCULATIONS ---------------------------------------------------------
# 1.1. average single tree growth -------------------------------------------------
# this inventory status means that the tree should have been assessed in the previous
# invenotry but wasn´t
# thus we have to calculate how much the tree of that species at that plot would have grown
# between the previous and current inventory, then deduct it from the diameter of the
# respective tree in the current inventory and add the tree to the previous inventory with
# the same ID, tree status 0 and the reduced diameter
# for this inventory status
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, stand, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
distinct() %>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, stand, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code"),
multiple = "all") %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
# 1.2. grouping growth ------------------------------------------------------------------
dbh_growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"),
# growth by plot
summarize_data(dbh_growth_tree,
c("plot_ID"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
SP_code = "all"))
# 1.3. changes in BA composition -------------------------------------------
# select all possible tree species and stands per plot create list of all possible species per plot from both invenoties, to be able to join in basal area shares later and set missing shares to 0
BA_changes_SP_ST_P <- rbind(BZE3_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all" |
# filter for plot, species and stand wise summary
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select all possible plot_iD, species and stand combinations
select(plot_ID, SP_code, stand) %>% distinct(),
HBI_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all" |
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select all possible plot_iD, species and stand combinations
select(plot_ID, SP_code, stand) %>% distinct()) %>%
distinct() %>%
mutate(plot_ID = as.integer(plot_ID)) %>%
arrange(plot_ID) %>%
## this is how I used to filter, before we decided to calculate the BA changes for the stand- wise summaries as well
# rbind(BZE3_trees %>% select(plot_ID, SP_code, stand) %>% distinct(),
#                   HBI_trees %>% select(plot_ID, SP_code, stand) %>% distinct()) %>%
# distinct() %>%
# arrange(plot_ID) %>%
# join basal area shares from species in BZE3 dataset according to species, and plot, if the species does have a basal area share in BZE3
left_join(., BZE3_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all" |
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select the BA percent
select(plot_ID, SP_code, stand, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_BZE3 = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code", "stand")) %>%
# join basal area shares from species in HBI dataset according to species, and plot, if the species does have a basal area share in BZE3
left_join(., HBI_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all"|
plot_ID != "all" & SP_code != "all" & stand != "all" & !is.na(stand)) %>%
# select the BA percent
select(plot_ID, SP_code, stand, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_HBI = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code", "stand")) %>%
# here we have to set the BA_percent that do not appear in the respective inventory to 0
mutate(BA_percent_BZE3 = ifelse(is.na(BA_percent_BZE3), 0, BA_percent_BZE3),
BA_percent_HBI = ifelse(is.na(BA_percent_HBI), 0, BA_percent_HBI),
BA_percent_diff = BA_percent_BZE3-BA_percent_HBI, # calcualte difference in HBI and BZE3 BA share per plot and species
#stand = "all",
C_layer = "all")
# 1.4. changes in stocks per ha --------------------------------------------
trees_stock_changes_P <-
BZE3_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m) %>%
#add "_BZE3" to the names of the valriables we want to calculate the difference for:  https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP, mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m)) %>%
distinct()  %>%
# jopin in HBI dataset via left join, so that only plots, species, C layers and stands are joined in that have a partner in the current inventory.
left_join(., HBI_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m)) %>%
distinct(),
by = c("stand_component", "stand_type" ,"plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") |
contains("n_SP")  |
contains("Hg")  |
contains("Dg"), ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all", 0, .x)) ) %>%
# for the means and sds we calcualted values in the catagories : SP_code, plot and plot. Thus we have to set only NAs that occure in these groups and columns to 0
mutate(across(contains("mean") | contains("sd")  | contains("Hg")  | contains("Dg") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code != "all", 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(trees_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(trees_stock_changes_P), value=TRUE)
trees_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- trees_stock_changes_P[, post_vars] - trees_stock_changes_P[, pre_vars]
trees_stock_changes_P <- trees_stock_changes_P %>% arrange(plot_ID, stand, SP_code, compartiment) %>%
mutate(C_layer = "all")
# binding all LT growth datasets together ---------------------------------
LT_changes <- dbh_growth_summary %>%
left_join(.,
trees_stock_changes_P %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "C_layer", "SP_code"),
multiple = "all") %>%  # multiple = "all" for compartiments, which is not represented in dbh growth
left_join(BA_changes_SP_ST_P %>%
select(plot_ID, stand, SP_code, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "SP_code", "C_layer") ) %>%
mutate(stand_component = "LT") %>%
select(stand_component, plot_ID, stand, stand_type, C_layer, SP_code, compartiment, age_period, annual_growth_cm, contains("diff"))%>%
arrange(plot_ID)
BZE3_RG_summary %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)) %>%
# we use an inner join here because there are compartiments which are represented in RG BZE3
# are represented in HBI but we have to discuss this !!!!
left_join(., HBI_RG_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)),
by = c("stand_component", "plot_ID", "compartiment", "SP_code", "stand"))
HBI_RG_summary
BZE3_RG_summary
# tree summaries
HBI_summary <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_RG_DW_stocks_ha_all_groups.csv")), sep = ",", dec = ".") %>%
filter(stand_component == "LT" & plot_ID != "all") %>%
select(inv, plot_ID, stand, SP_code, mean_DBH_cm,Dg_cm, Hg_m) %>% distinct()
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# 0.3. data import --------------------------------------------------------
# tree data
BZE3_trees_removed <- read.delim(file = here(paste0(out.path.BZE3, "BZE3_LT_removed_2.csv")), sep = ",", dec = ".")
BZE3_trees_removed
BZE3_trees_removed[, c("plot_ID")]
BZE3_trees_removed[, c("plot_ID", tree_ID)]
BZE3_trees_removed[, c("plot_ID", "tree_ID")]
BZE3_trees_removed[, -c("plot_ID", "tree_ID")]
BZE3_trees_removed[, !c("plot_ID", "tree_ID")]
# there can be the case that the line is parallel to the y-achsis, causing the b1 to be -Inf/Inf as well as the b0 to be NaN or Inf
# in this case we have the following known variables: c.x0, c.y0, x1, x2, c.r0 and we are looking for y1 and y2
# thus we cannot aply the usual function for q but have to adjust it:
# quadratic formula resulting from x = (x - c.x0)^2 + (y - c.y0)^2 - r^2 <=> (solving quadratic function and transform towards 0)
p = 1;
q = x.a^2 - 2*x.a*c.x0 + c.x0^2 + c.y0^2 - c.r0^2;
BZE3_trees_removed
BZE3_trees_removed[,-c("plot_ID")]
BZE3_trees_removed[ ,!(colnames(BZE3_trees_removed) %in% c("plot_ID"))]
merge(HBI_trees[ ,!(colnames(HBI_trees) %in% c("SP_code"))] , BZE3_trees_removed[, c("plot_ID", "tree_ID")], by=c("plot_ID", "tree_ID"), all.x=T)
HBI_trees <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_3.csv")), sep = ",", dec = ".")
merge(HBI_trees[ ,!(colnames(HBI_trees) %in% c("SP_code"))] , BZE3_trees_removed[, c("plot_ID", "tree_ID")], by=c("plot_ID", "tree_ID"), all.x=T)

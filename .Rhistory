my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
BL.or.CF <- unique(trees_data$LH_NH[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(trees_data$tpS_ID[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
Dm = na.omit(as.list(as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))))
Hm = na.omit(as.list(as.numeric(unique(trees_data$DBH_h_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])/100)))
Ht = na.omit(as.numeric(unique(trees_data$H_m[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(trees_data$plot_ID[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(trees_data$tree_ID[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"inv" = c(trees_data$inv[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(trees_data$inv_year[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"LH_NH" = c(trees_data$LH_NH[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.list[[i]] <- bio.info.df
}
bio_ag_kg_df <- as.data.frame(rbindlist(bio.ag.kg.list))
bio_ag_kg_df
obj.trees
tprBiomass(obj = obj.trees, component = "agb")
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(B_kg_tree))
bio_ag_kg_df
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))
tprBiomass(obj = obj.trees, component = "agb")
# 1.1.2. biomass belowground compartiments ----------------------------------
bio.bg.kg.list <- vector("list", length = nrow(unique(trees_data[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_data[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees_data %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
#my.inv <-  unique(trees_data[, c("plot_ID", "tree_ID")])[,"inv"][i]
# select variales for tree object
spp = unique(trees_data$Bio_SP_group[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
dbh.cm = as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(trees_data$inv[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(trees_data$inv_year[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.list[[i]] <- bio.info.df
}
GHGI_bB
trees_data
#dbh <- ifelse(spec != "shw", d, d*10);
#b0 <- c(fi = 0.003720, ki = 0.006089, bu = 0.018256, ei= 0.028000, shw = 0.000010);#shwr =0.000010, shwrs = 0.000116);
#b1 <- c(fi = 2.792465, ki = 2.739073, bu = 2.321997, ei= 2.440000, shw = 2.529000); #shwr =2.529000, shwrs = 2.290300);
0.003720*50.1^2.792465
bio_bg_kg_df
# 1.1.2. biomass belowground compartiments ----------------------------------
bio.bg.kg.list <- vector("list", length = nrow(unique(trees_data[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_data[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees_data %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
#my.inv <-  unique(trees_data[, c("plot_ID", "tree_ID")])[,"inv"][i]
# select variales for tree object
spp = unique(trees_data$Bio_SP_group[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
dbh.cm = as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(trees_data$inv[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(trees_data$inv_year[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.list[[i]] <- bio.info.df
}
bio_bg_kg_df <- as.data.frame(rbindlist(bio.bg.kg.list))
bio_bg_kg_df
bio_ag_kg_df
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))+207.625310550714
as.numeric(bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))[1])
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))[1]
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))[1]
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))[2,3]
bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree)))[2,3]
(bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree))))[2,3]
as.numeric((bio_ag_kg_df %>% group_by(plot_ID, tree_ID) %>% summarise(B_kg_ag = sum(as.numeric(B_kg_tree))))[2,3])+207.625310550714
bio_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio_ag_kg_df, bio_bg_kg_df) %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio_ag_kg_df%>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"))
bio_total_kg_df
# 1.1.4. harmonizing biomass strings and compartiment names ---------------
#  harmonize strings of bio_total_kg_df
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
bio_total_kg_df[,c(1,2, 4, 6)] <- lapply(bio_total_kg_df[,c(1,2,4, 6)], as.numeric)
bio_ag_kg_df[,c(1,2, 4, 6)] <- lapply(bio_ag_kg_df[,c(1,2,4, 6)], as.numeric)
bio_bg_kg_df[,c(1,2, 4, 6)] <- lapply(bio_bg_kg_df[,c(1,2,4, 6)], as.numeric)
# 1.1.4. join biomass into tree dataset -----------------------------------
trees_data <- trees_data %>%
left_join(.,
rbind(bio_ag_kg_df ,
bio_bg_kg_df,
bio_total_kg_df) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
trees_data
N_all_com
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_w
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
n_con_f
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
trees_data
paste0(FI, "_", comp)
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0("FI", "_", comp);
SP_compart_Rumpf
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0("FI", "_", trees_data$compartiment);
SP_compart_Rumpf
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0("FI", "_", unique(trees_data$compartiment));
SP_compart_Rumpf
SP_compart_Rumpf[1:7]
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
comp.trees <- unique(trees_data$compartiment)
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
trees_data
n_con_bg
N_spec_bg_Jacobsen
trees_data
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(953.365102)*as.numeric(0.00414[FI]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(953.365102)*as.numeric(0.00414),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
n_con_bg
n_con_bg["FI"]
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(953.365102)*as.numeric(0.00414 ),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
comp.trees == "bg" ~ as.numeric(953.365102)*as.numeric(0.00414 )
n_con_w["FI"]
n_con_w
n_con_w[SP_compart_Rumpf]
SP_compart_Rumpf
SP_compart_Rumpf <- SP_compart_Rumpf[1:7]
comp.trees <- unique(trees_data$compartiment)
comp.trees
comp.trees <- unique(trees_data$compartiment)[1:7]
comp.trees
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(953.365102)*as.numeric(0.00414 ),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(953.365102)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
N
as.numeric(953.365102)*as.numeric(0.00414 )
cbind(N, comp.trees)
as.numeric(953.365102)*as.numeric(n_con_w[SP_compart_Rumpf])
n_con_w[SP_compart_Rumpf]
953.365102*0.000812
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0("FI", "_", unique(trees_data$compartiment));
SP_compart_Rumpf <- SP_compart_Rumpf[1:7]
comp.trees <- unique(trees_data$compartiment)[1:7]
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(953.365102)*as.numeric(0.00414 ),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(953.365102)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
n_con_bg["FI"]
N_ag_bg_kg_df
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N_ag_bg_kg_df <- trees_data %>%
filter(!(compartiment %in% c("ag", "total")))  %>%  # make sure the aboveground& belowground dataset doesnt include summed up compartiments like total and aboveground
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
N_ag_bg_kg_df
N_all_com
comp.trees = unique(trees_data$compartiment)
comp.trees
b = trees_data$B_kg_tree
B = trees_data$B_kg_tree
trees_data %>% select(compartiment, B_kg_tree)
trees_data %>% filter(tree_ID == 3) %>%  select(compartiment, B_kg_tree)
B = trees_data$B_kg_tree[trees_data$tree_ID == 3]
cbind(comp.trees, B)
SP_compart_Rumpf
case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg["FI"]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
B
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg["FI"]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
n_con_w[SP_compart_Rumpf]
B
comp.trees = unique(trees_data$compartiment)
B = trees_data$B_kg_tree[trees_data$tree_ID == 3]
B = trees_data$B_kg_tree[trees_data$tree_ID == 3 & !(trees_data$compartiment %in% c("ag", "total"))]
B
comp.trees
comp.trees = unique(trees_data$compartiment)
B = trees_data$B_kg_tree[trees_data$tree_ID == 3 & !(trees_data$compartiment %in% c("ag", "total"))]
N <- case_when(
comp.trees == "ndl" ~ 0, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we donÂ´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg["FI"]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
!(comp.trees %in% ("ag, total, ndl, bg"))
SP_compart_Rumpf
as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf])
n_con_w[SP_compart_Rumpf]
cbind(comp.trees, B)
43.7565845197594*0.000812
N_ag_bg_kg_df
3.63586958684062*0.00484
n_con_bg["FI"]
207.625310550714*0.00414
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N_ag_bg_kg_df <- trees_data %>%
filter(!(compartiment %in% c("ag", "total")))  %>%  # make sure the aboveground& belowground dataset doesnt include summed up compartiments like total and aboveground
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
N_ag_bg_kg_df
0.03553035+0.01759761+0.77413246+0.37812752+0.66170555+0+0.85956879
0.03553035+0.01759761+0.77413246+0.37812752+0.66170555+0
# 1.2.2. Nitrogen ston in all compartiments summed up - total & aboveground  ----------------------------------
N_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N_ag_bg_kg_df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N_ag_bg_kg_df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments by exxlduing bg compartiment from N.ab.bg. dataframe
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
N_total_kg_df
# 1.2.3. join Nitrogen stocks into tree dataset -----------------------------------
trees_data <- trees_data %>% left_join(.,
rbind(N_ag_bg_kg_df ,
N_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
trees_data
# 1.3. carbon stock per tree & compartiment -------------------------------------------------------
trees_data <- trees_data %>% mutate(C_kg_tree = carbon(B_kg_tree))
trees_data
trees_neg_bio <- trees_data %>% semi_join(., bio_ag_kg_df %>% filter(B_kg_tree <0) %>% select(plot_ID) %>% mutate(plot_ID = as.integer(plot_ID)), by = "plot_ID")
# data export ---------------------------------------------------------------------------------------------
trees_removed_4 <- trees_data  %>% semi_join(., trees_data %>%
filter(B_kg_tree <0 ) %>%
select(plot_ID, tree_ID, inv) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv"))
trees_update_4 <- trees_data %>% anti_join(., trees_data %>%
filter(B_kg_tree <0 ) %>%
select(plot_ID, tree_ID, inv) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv"))
# HBI dataset including estimated heights (use write.csv2 to make ";" as separator between columns)
write.csv(trees_update_4, paste0(out.path.BZE3, paste(unique(trees_update_4$inv)[1], "LT_update_4", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
# HBI dataset with excluded trees including estimated heights
write.csv(trees_removed_4, paste0(out.path.BZE3, paste(unique(trees_update_4$inv)[1], "LT_removed_4", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
write.csv(trees_neg_bio, paste0(out.path.BZE3, paste(unique(trees_update_4$inv)[1], "LT_negative_bio", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the national soil inventory
# BZE3 estimating biomass, carbon and nitrogen stock on single tree level
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_3.csv" which contains plot area and stand data additionally to
# tree data
trees_data <- read.delim(file = here(paste0(out.path.BZE3, "BZE3_LT_update_3.csv")), sep = ",", dec = ".")
# 0.4 data preparation ---------------------------------------------------------
trees_data <- trees_data %>% mutate(H_m = as.numeric(H_m)) %>% distinct()
# 1. calculations ---------------------------------------------------------
# 1.1. biomass -----------------------------------------------------------------
# 1.1.1. biomass aboveground compartiments ---------------------------------------
bio.ag.kg.list <- vector("list", length = nrow(unique(trees_data[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_data[, c("plot_ID", "tree_ID")]))) {
# i = 2977
# i = trees_data %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees_data[, c("plot_ID", "tree_ID")])
my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
BL.or.CF <- unique(trees_data$LH_NH[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(trees_data$tpS_ID[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
Dm = na.omit(as.list(as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))))
Hm = na.omit(as.list(as.numeric(unique(trees_data$DBH_h_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])/100)))
Ht = na.omit(as.numeric(unique(trees_data$H_m[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(trees_data$plot_ID[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(trees_data$tree_ID[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"inv" = c(trees_data$inv[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(trees_data$inv_year[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"LH_NH" = c(trees_data$LH_NH[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.list[[i]] <- bio.info.df
}
bio_ag_kg_df <- as.data.frame(rbindlist(bio.ag.kg.list))
# 1.1.2. biomass belowground compartiments ----------------------------------
bio.bg.kg.list <- vector("list", length = nrow(unique(trees_data[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_data[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees_data %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
#my.inv <-  unique(trees_data[, c("plot_ID", "tree_ID")])[,"inv"][i]
# select variales for tree object
spp = unique(trees_data$Bio_SP_group[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
dbh.cm = as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(trees_data$inv[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(trees_data$inv_year[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.list[[i]] <- bio.info.df
}
bio_bg_kg_df <- as.data.frame(rbindlist(bio.bg.kg.list))
# 1.1.3. biomass all compartiments - total ----------------------------------
bio_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio_ag_kg_df, bio_bg_kg_df) %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio_ag_kg_df%>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"))
# 1.1.4. harmonizing biomass strings and compartiment names ---------------
#  harmonize strings of bio_total_kg_df
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
bio_total_kg_df[,c(1,2, 4, 6)] <- lapply(bio_total_kg_df[,c(1,2,4, 6)], as.numeric)
bio_ag_kg_df[,c(1,2, 4, 6)] <- lapply(bio_ag_kg_df[,c(1,2,4, 6)], as.numeric)
bio_bg_kg_df[,c(1,2, 4, 6)] <- lapply(bio_bg_kg_df[,c(1,2,4, 6)], as.numeric)
# 1.1.4. join biomass into tree dataset -----------------------------------
trees_data <- trees_data %>% left_join(.,
rbind(bio_ag_kg_df ,
bio_bg_kg_df,
bio_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N_ag_bg_kg_df <- trees_data %>%
filter(!(compartiment %in% c("ag", "total")))  %>%  # make sure the aboveground& belowground dataset doesnt include summed up compartiments like total and aboveground
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
# 1.2.2. Nitrogen ston in all compartiments summed up - total & aboveground  ----------------------------------
N_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N_ag_bg_kg_df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N_ag_bg_kg_df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments by exxlduing bg compartiment from N.ab.bg. dataframe
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
# 1.2.3. join Nitrogen stocks into tree dataset -----------------------------------
trees_data <- trees_data %>% left_join(.,
rbind(N_ag_bg_kg_df ,
N_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.3. carbon stock per tree & compartiment -------------------------------------------------------
trees_data <- trees_data %>% mutate(C_kg_tree = carbon(B_kg_tree))
# data export ---------------------------------------------------------------------------------------------
trees_removed_4 <- trees_data %>% filter(B_kg_tree <0 ) %>% semi_join(., trees_data %>%
filter(B_kg_tree <0 ) %>%
select(plot_ID, tree_ID, inv) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv"))
trees_update_4 <- trees_data %>% anti_join(., trees_data %>%
filter(B_kg_tree <0 ) %>%
select(plot_ID, tree_ID, inv) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv"))
# HBI dataset including estimated heights (use write.csv2 to make ";" as separator between columns)
write.csv(trees_update_4, paste0(out.path.BZE3, paste(unique(trees_update_4$inv)[1], "LT_update_4", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
write.csv(trees_removed_4, paste0(out.path.BZE3, paste(unique(trees_update_4$inv)[1], "LT_removed_4", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
stop("this is where stock calculation of BTE3 ends")

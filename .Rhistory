rsme = rmse_per(y = annual_growth_cm, yhat = growth_est),
#https://stackoverflow.com/questions/14530770/calculating-r2-for-a-nonlinear-least-squares-fit
R2 = max(cor(annual_growth_cm, growth_est),0)^2,
#https://stats.stackexchange.com/questions/11676/pseudo-r-squared-formula-for-glms
mean_growth = mean(annual_growth_cm),
SSres = sum((annual_growth_cm-growth_est)^2),
SStot = sum((annual_growth_cm-mean_growth)^2),
pseu_R2 = 1-(SSres/SStot),
diff_growth = mean(annual_growth_cm - growth_est) ,
n = n())
# 1.3. DBH estimation --------------------------------------------------------------------------------------
#  the goal is to add 4 times diameter growth to the diameter of the trees removed between HBI and BZE3
# we will build a loop that selects the growth per plot, stand, DBH class, species
# if we can´t find average growth in this group, select growth by plot, DBH_class, species
# if we can´t find average growth in this group use model that describes
# 1.3.1. assinging DBH growth --------------------------------------------------------------------------------------
# prepare dataset for DBH at middle of harvesting period
dbh_incl_growth.list <- vector("list", length = length(unique(trees_harvested$tree_ID)))
for (i in 1:nrow(unique(trees_harvested[, c("plot_ID", "tree_ID")])) ) {
# i = 23
my.plot.id <- trees_harvested[, "plot_ID"][i]
my.tree.id <- trees_harvested[, "tree_ID"][i]
my.dbh.cm <- trees_harvested[, "DBH_cm"][i]
my.sp <- trees_harvested[, "SP_code"][i]
my.stand <- trees_harvested[, "stand"][i]
my.dbh.class <- trees_harvested[, "DBH_class_10"][i]
my.ld.icode <- trees_harvested[, "state"][i]#  ifelse(str_length(my.plot.id) == 5, substr(my.plot.id, 1, 1), substr(my.plot.id, 1, 2))
# look for annual diameter growth in cm in the plot, species, stand and canopy layer of my.tree
growth.cm <- growth$annual_growth_cm[growth$plot_ID == my.plot.id &
growth$stand == my.stand &
growth$DBH_class_10 == my.dbh.class &
growth$SP_code == my.sp]
growth.metod <- "growth_df P S DBHC SP"
# if we can´t find growth for the trees species, plot, stand and canopy layer
# look for annual diameter growth in cm in the plot, stand and species of my.tree
if(length(growth.cm) == 0){
growth.cm <- growth$annual_growth_cm[growth$plot_ID == my.plot.id &
growth$stand == "all" &
growth$DBH_class_10 == my.dbh.class &
growth$SP_code == my.sp]
growth.metod <- "growth_df P  DBHC SP"
}
# if we cant find growth for the tree species, plot, and DBH class,
# we use a model that describes the expectable DBH growth : mean annual growth = DBH_BZE3 grouped by state (bundesland) and species
# but only if there is a r2 and r2 is => 0.7
if(isTRUE(length(growth.cm) == 0 &
growth_coeff$pseu_R2[growth_coeff$SP_code == my.sp & growth_coeff$state == my.ld.icode] >= 0.7 &
!is.na(growth_coeff$pseu_R2[growth_coeff$SP_code == my.sp & growth_coeff$state == my.ld.icode]))== T ){
b0.dbh <- growth_coeff$b0[growth_coeff$SP_code == my.sp &
growth_coeff$state == my.ld.icode]
b1.dbh <- growth_coeff$b1[growth_coeff$SP_code == my.sp &
growth_coeff$state == my.ld.icode]
b2.dbh <- growth_coeff$b2[growth_coeff$SP_code == my.sp &
growth_coeff$state == my.ld.icode]
growth.cm <- b0.dbh * (1 - exp( -b1.dbh * my.dbh.cm))^b2.dbh
growth.metod <- "growth_model"
}
# if we cant use a model because the conditions are not fullfilled, we set the growth to 0 and just calcualte everything
# based on the HBI data
if(length(growth.cm) == 0){
growth.cm <- 0
growth.metod <- "no growth"
}
# add annual diameter growth times 4 to DBH of the tree
# (for 4 years, Mittlereumtriebszeit = represent the middle of the period between BZE3 and HBI)
my.dbh.incl.growth.cm <- my.dbh.cm + 4*growth.cm
# export diameters including
dbh_incl_growth.list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id))
,"tree_ID" = c(as.integer(my.tree.id))
,"DBH_incl_growth" = c(as.numeric(my.dbh.incl.growth.cm))
, "growth_method" = c(growth.metod)
))
}
dbh_incl_growth.df <- as.data.frame(rbindlist(dbh_incl_growth.list)) %>% distinct()
# 1.2.2. join DBH including growth to tree dataset ------------------------------------------------------------------------------
# add dbh with growth to HBI_trees dataframe to calcualte biomass
trees_harvested <- trees_harvested %>%
left_join(dbh_incl_growth.df %>%
mutate(across(c("plot_ID", "tree_ID", "DBH_incl_growth"), as.numeric)),
by = c("plot_ID", "tree_ID")) %>%
mutate(BA_m2_incl_growth = c_A((DBH_incl_growth/100)/2))
trees_harvested %>%
mutate(height_inc_growth = NA,
DBH_h_m = DBH_h_cm/100) %>%
## joining coefficients per specise and plot in
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE) %>%            # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
left_join(.,coeff_H_SP_P %>%
mutate(plot_ID = as.integer(plot_ID)) %>% # joining R2 from coeff_SP_P -> R2.x
select(plot_ID, SP_code, R2) %>%
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE),   # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
by = c("plot_ID", "SP_code", "SP_P_ID")) %>%
## joinign coefficients per species in
left_join(., coeff_H_SP %>% select(SP_code, R2),               # joing R2 from coeff_SP data set -> R2.y
by = "SP_code") %>%
## joining coefficients and Hg-Dg-data in
# this is joins in a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
left_join(., HBI_summary%>%
mutate(plot_ID = as.integer(plot_ID)),
by = c("plot_ID", "stand", "SP_code"))
HBI_summary
trees_harvested <- trees_harvested %>%
mutate(height_inc_growth = NA,
DBH_h_m = DBH_h_cm/100) %>%
## joining coefficients per specise and plot in
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE) %>%            # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
left_join(.,coeff_H_SP_P %>%
mutate(plot_ID = as.integer(plot_ID)) %>% # joining R2 from coeff_SP_P -> R2.x
select(plot_ID, SP_code, R2) %>%
unite(SP_P_ID, plot_ID, SP_code, sep = "", remove = FALSE),   # create column matching vectorised coefficients of coeff_SP_P (1.3. functions, h_nls_SP_P, dplyr::pull)
by = c("plot_ID", "SP_code", "SP_P_ID")) %>%
## joinign coefficients per species in
left_join(., coeff_H_SP %>% select(SP_code, R2),               # joing R2 from coeff_SP data set -> R2.y
by = "SP_code") %>%
## joining coefficients and Hg-Dg-data in
# this is joins in a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
left_join(., HBI_summary%>%
select(-inv) %>%
mutate(plot_ID = as.integer(plot_ID)),
by = c("plot_ID", "stand", "SP_code")) %>%
mutate(R2_comb = f(R2.x, R2.y, R2.y, R2.x),                               # if R2 is na, put R2 from coeff_SP_P unless R2 from coeff_SP is higher
H_new_method = case_when(is.na(height_inc_growth) & !is.na(R2.x) & R2.x > 0.70 | is.na(height_inc_growth) & R2.x > R2.y & R2.x > 0.70 ~ "coeff_SP_P",
is.na(height_inc_growth) & is.na(R2.x) & R2.y > 0.70| is.na(height_inc_growth) & R2.x < R2.y & R2.y > 0.70 ~ "coeff_sp",
is.na(height_inc_growth) & is.na(R2_comb) & !is.na(Hg_m)| is.na(height_inc_growth) & R2_comb < 0.70 & !is.na(Hg_m) ~ "ehk_sloboda",
is.na(height_inc_growth) & is.na(R2_comb) & is.na(Hg_m)| is.na(height_inc_growth) & R2_comb < 0.70 & is.na(Hg_m) ~ "h_curtis",
TRUE ~ "sampled")) %>%
# When h_m is na but there is a plot and species wise model with R2 above 0.7, use the model to predict the height
mutate(height_inc_growth = as.numeric(case_when(is.na(height_inc_growth) & !is.na(R2.x) & R2.x > 0.70 | is.na(height_inc_growth) & R2.x > R2.y & R2.x > 0.70 ~ h_nls_SP_P(SP_P_ID, DBH_incl_growth),
# if H_m is na and there is an R2 from coeff_SP_P thats bigger then 0.75 or of theres no R2 from
# coeff_SP_plot that´s bigger then R2 of coeff_SP_P while the given R2 from coeff_SP_P is above
# 0.75 then use the SP_P models
is.na(height_inc_growth) & is.na(R2.x) & R2.y > 0.70 | is.na(height_inc_growth) & R2.x < R2.y & R2.y > 0.70 ~ h_nls_SP(SP_code, DBH_incl_growth),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na but there is a h_g and d_G
is.na(height_inc_growth) & is.na(R2_comb) & !is.na(Hg_m)| is.na(height_inc_growth) & R2_comb < 0.70 & !is.na(Hg_m) ~ ehk_sloboda(H_SP_group, DBH_incl_growth*10, mean_DBH_cm*10, Dg_cm*10, Hg_m*10),
# when there´s still no model per species or plot, or the R2 of both self-made models is below 0.7
# and hm is na and the Slobody function cannot eb applied because there is no h_g calculatable use the curtis function
is.na(height_inc_growth) & is.na(R2_comb) & is.na(Hg_m)| is.na(height_inc_growth) & R2_comb < 0.70 & is.na(Hg_m) ~ h_curtis(H_SP_group, DBH_incl_growth*10),
TRUE ~ height_inc_growth))) %>%
# as there were some trees that had an estimated height which was lower then the DBH measuring height. this is not only implausible but also won´t work for TapeS
# thus we correct these heights afterwards by estimating their height from the relation between the dg and hg and dg and the trees DBH (dreisatz, h_proportional function)
mutate(height_inc_growth = ifelse(DBH_h_m > height_inc_growth, h_proportional(Dg_cm, Hg_m, DBH_incl_growth), height_inc_growth))
# tree summaries
HBI_summary <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_RG_DW_stocks_ha_all_groups.csv")), sep = ",", dec = ".")
# 1.4.1. biomass aboveground compartiments --------------------------------------------------------------------------------------------------
bio.ag.kg.list <- vector("list", length = nrow(unique(trees_harvested[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_harvested[, c("plot_ID", "tree_ID")]))) {
# i = 381
# i = trees_harvested %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees_harvested[, c("plot_ID", "tree_ID")])
my.plot.id <- unique(trees_harvested[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_harvested[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
BL.or.CF <- unique(trees_harvested$LH_NH[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(trees_harvested$tpS_ID[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id]))
Dm = na.omit(as.list(as.numeric(unique(trees_harvested$DBH_incl_growth[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id]))))
Hm = na.omit(as.list(as.numeric(unique(trees_harvested$DBH_h_cm[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id])/100)))
Ht = na.omit(as.numeric(unique(trees_harvested$height_inc_growth[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(trees_harvested$plot_ID[trees_harvested$plot_ID == my.plot.id & trees_harvested$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(trees_harvested$tree_ID[trees_harvested$plot_ID == my.plot.id & trees_harvested$tree_ID == my.tree.id])),
"inv" = c(trees_harvested$inv[trees_harvested$plot_ID == my.plot.id & trees_harvested$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(trees_harvested$inv_year[trees_harvested$plot_ID == my.plot.id & trees_harvested$tree_ID == my.tree.id])),
"LH_NH" = c(trees_harvested$LH_NH[trees_harvested$plot_ID == my.plot.id & trees_harvested$tree_ID == my.tree.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.list[[i]] <- bio.info.df
}
bio_ag_kg_df <- as.data.frame(rbindlist(bio.ag.kg.list))
# 1.4.2. biomass belowground compartiments ---------------------------------------------------------------------------------------
bio.bg.kg.list <- vector("list", length = nrow(unique(trees_harvested[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_harvested[, c("plot_ID", "tree_ID")]))) {
# i = 1
# i = trees_harvested %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
my.plot.id <- unique(trees_harvested[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_harvested[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
#my.inv <-  unique(trees_harvested[, c("plot_ID", "tree_ID")])[,"inv"][i]
BL.or.CF <- unique(trees_harvested$LH_NH[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id])
# select variales for tree object
spp = unique(trees_harvested$Bio_SP_group[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id])
dbh.cm = as.numeric(unique(trees_harvested$DBH_incl_growth[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(trees_harvested$inv[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(trees_harvested$inv_year[trees_harvested$plot_ID==my.plot.id & trees_harvested$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.list[[i]] <- bio.info.df
}
bio_bg_kg_df <- as.data.frame(rbindlist(bio.bg.kg.list))
# 1.4.3. biomass all compartiments - total ------------------------------------------------------------------------
bio_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio_ag_kg_df, bio_bg_kg_df) %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio_ag_kg_df%>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"))
# 1.4.4. harmonizing biomass strings and compartiment names ----------------------------------------------------------
#  harmonize strings of bio_total_kg_df
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
bio_total_kg_df[,c(1,2, 4, 6)] <- lapply(bio_total_kg_df[,c(1,2,4, 6)], as.numeric)
bio_ag_kg_df[,c(1,2, 4, 6)] <- lapply(bio_ag_kg_df[,c(1,2,4, 6)], as.numeric)
bio_bg_kg_df[,c(1,2, 4, 6)] <- lapply(bio_bg_kg_df[,c(1,2,4, 6)], as.numeric)
# 1.4.5. join biomass into tree dataset ----------------------------------------------------------------------------------
trees_harvested <- trees_harvested %>% distinct() %>%
left_join(.,
rbind(bio_ag_kg_df ,
bio_bg_kg_df,
bio_total_kg_df) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.5. Nitrogen calculation --------------------------------------------------------------------------------------
# 1.5.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N_ag_bg_kg_df <- trees_harvested %>%
filter(!(compartiment %in% c("ag", "total")))  %>%  # make sure the aboveground& belowground dataset doesnt include summed up compartiments like total and aboveground
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
# 1.5.2. Nitrogen ston in all compartiments summed up - total & aboveground  ----------------------------------
N_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N_ag_bg_kg_df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N_ag_bg_kg_df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments by exxlduing bg compartiment from N.ab.bg. dataframe
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
# 1.5.3. join Nitrogen stocks into tree dataset -----------------------------------
trees_harvested <- trees_harvested %>% left_join(.,
rbind(N_ag_bg_kg_df ,
N_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.6. carbon stock per tree & compartiment -------------------------------------------------------
trees_harvested <- trees_harvested %>% mutate(C_kg_tree = carbon(B_kg_tree))
# 1.7. summarize harvested trees per ha  ----------------------------------
# 1.2. number of speices per plot -----------------------------------------
LT_n_SP_plot <- trees_harvested %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, SP_code) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "LT")
# 1.3. number of stand per plot -------------------------------------------
LT_n_stand_P <- trees_harvested %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, stand) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_stand = n()) %>%
mutate(stand_component = "LT")
if(exists('HBI_trees_stat_2') == TRUE && nrow(HBI_trees_stat_2)!= 0){
LT_BCNBAn_ha <- plyr::rbind.fill(trees_harvested  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2_incl_growth)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
HBI_trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID)) ) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")}else{
LT_BCNBAn_ha <- trees_harvested %>%
group_by(plot_ID, CCS_r_m, inv, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2_incl_growth)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")
}
# 1.7.2. plot, species, stand: stocks per ha, finest summary --------------
if(exists('HBI_trees_stat_2') == TRUE && nrow(HBI_trees_stat_2)!= 0){
LT_SP_ST_P_BCNBAn_ha <- plyr::rbind.fill(trees_harvested  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2_incl_growth)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
HBI_trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
}else{
LT_SP_ST_P_BCNBAn_ha <- trees_harvested %>%
group_by(plot_ID, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2_incl_growth)/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha)) %>%
mutate(stand_component = "LT") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
}
# 1.7.2. Plot, stand: stocks pernrow()# 1.7.2. Plot, stand: stocks per hektar ------------------------------------------------------
LT_ST_BCNBAn_ha <- summarize_data(LT_SP_ST_P_BCNBAn_ha,
c("plot_ID", "inv", "compartiment", "stand"),
c("B_t_ha", "C_t_ha", "N_t_ha", "BA_m2_ha", "n_ha"),
operation = "sum_df") %>%
mutate(stand_component = "LT",
SP_code = "all")
# 1.7.3. Plot, species: stocks per hektar ------------------------------------------------------
LT_SP_BCNBA_ha <- summarize_data(LT_SP_ST_P_BCNBAn_ha,
c("plot_ID", "inv", "compartiment", "SP_code"),
c("B_t_ha", "C_t_ha", "N_t_ha", "BA_m2_ha"),
operation = "sum_df") %>%
mutate(stand_component = "LT",
stand = "all") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
print(LT_SP_BCNBA_ha %>% arrange(plot_ID, SP_code, compartiment), n = nrow(LT_SP_ST_P_BCNBAn_ha))
# 1.6. average values ----------------------------------------------------
# 1.6.1. create "pseudo stands" -------------------------------------------
LT_avg_SP_ST_P_list <- vector("list", length = length(unique(trees_harvested$plot_ID)))
LT_avg_SP_P_list <- vector("list", length = length(unique(trees_harvested$plot_ID)))
LT_avg_P_list <- vector("list", length = length(unique(trees_harvested$plot_ID)))
for (i in 1:length(unique(trees_harvested$plot_ID))) {
# i = 1
my.plot.id <- unique(trees_harvested$plot_ID)[i]
# select all trees by only one compartiment of each tree to make sure the tree enters the dataframe only once
my.tree.df <- trees_harvested[trees_harvested$plot_ID == my.plot.id & trees_harvested$compartiment == "ag", ]
my.n.ha.df <- trees_harvested %>% filter(compartiment == "ag" & plot_ID == my.plot.id) %>% group_by(plot_ID, CCS_r_m) %>% reframe(n_ha_CCS = n()/plot_A_ha) %>% distinct()
my.n.plot.df <- trees_harvested %>% filter(compartiment == "ag" & plot_ID == my.plot.id) %>% group_by(plot_ID, CCS_r_m) %>% reframe(n_CCS = n()) %>% distinct()
my.n.ha.df$n.rep.each.tree <- round(my.n.ha.df$n_ha_CCS/my.n.plot.df$n_CCS)
# repeat every tree per circle by the number this tree would be repeated by to reach it´s ha number
# so every tree id repeated as often as it would be represented on a hectar)
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
my.tree.rep.df <- rbind(
# 5m circle
my.tree.df[my.tree.df$CCS_r_m == 5.64, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 5.64, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 5.64]), ],
# 12m circle
my.tree.df[my.tree.df$CCS_r_m == 12.62, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 12.62, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 12.62] ), ],
# 17m circle
my.tree.df[my.tree.df$CCS_r_m == 17.84, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 17.84, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 17.84]), ])
LT_avg_SP_ST_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv, SP_code, stand) %>%
summarise(mean_DBH_cm = mean(DBH_incl_growth),
sd_DBH_cm = sd(DBH_incl_growth),
Dg_cm = ((sqrt(mean(BA_m2_incl_growth)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2_incl_growth),
mean_H_m = mean(height_inc_growth ),
sd_H_m = sd(height_inc_growth ),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2_incl_growth))/sum(sum(BA_m2_incl_growth))) %>%
mutate(stand_component = "LT")
LT_avg_SP_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv, SP_code) %>%
summarise(mean_DBH_cm = mean(DBH_incl_growth),
sd_DBH_cm = sd(DBH_incl_growth),
Dg_cm = ((sqrt(mean(BA_m2_incl_growth)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2_incl_growth),
mean_H_m = mean(height_inc_growth ),
sd_H_m = sd(height_inc_growth ),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2_incl_growth))/sum(sum(BA_m2_incl_growth))) %>%
mutate(stand_component = "LT",
stand = "all")
LT_avg_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv) %>%
summarise(mean_DBH_cm = mean(DBH_incl_growth),
sd_DBH_cm = sd(DBH_incl_growth),
Dg_cm = ((sqrt(mean(BA_m2_incl_growth)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2_incl_growth),
mean_H_m = mean(height_inc_growth ),
sd_H_m = sd(height_inc_growth ),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2_incl_growth))/sum(sum(BA_m2_incl_growth))) %>%
mutate(stand_component = "LT",
SP_code = "all",
stand = "all")
}
LT_avg_SP_ST_P <- as.data.frame(rbindlist(LT_avg_SP_ST_P_list))
LT_avg_SP_P <- as.data.frame(rbindlist(LT_avg_SP_P_list))
LT_avg_P <- as.data.frame(rbindlist(LT_avg_P_list))
LT_avg_P_list
length(unique(trees_harvested$plot_ID))
LT_avg_SP_ST_P <- as.data.frame(rbindlist(LT_avg_SP_ST_P_list))
LT_avg_SP_P <- as.data.frame(rbindlist(LT_avg_SP_P_list))
LT_avg_P <- as.data.frame(rbindlist(LT_avg_P_list))
# 1.7.1. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_ST_P <- LT_SP_ST_P_BCNBAn_ha  %>%
left_join(LT_avg_SP_ST_P,
by = c("plot_ID", "inv", "stand_component", "SP_code", "stand")) %>%
select(-(n_ha))
# 1.7.2. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_P <- LT_SP_BCNBA_ha  %>%
left_join(., LT_avg_SP_P,
by = c("plot_ID", "inv", "stand_component", "SP_code", "stand"))
# 1.7.3. LT stand data ----------------------------------------------------
LT_ST_P <- LT_ST_BCNBAn_ha
# 1.7.4. LT plot data ----------------------------------------------------------------------------------------------------------------
LT_P <- LT_BCNBAn_ha %>%
left_join(., LT_avg_P,
by = c("plot_ID", "inv", "stand_component", "SP_code", "stand")) %>%
left_join(., LT_n_SP_plot,
by = c("plot_ID", "inv", "stand_component"))
# 1.7.6. rbinding LT data together ----------------------------------------
LT_summary <- plyr::rbind.fill(LT_SP_ST_P,
LT_SP_P,
LT_ST_P,
LT_P) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# data export ---------------------------------------------------------------------------------------------
write.csv(trees_harvested, paste0(out.path.BZE3, paste(unique(trees_harvested$inv)[1], unique(BZE3_trees_removed$inv)[1], "LT_stock_removed", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
write.csv(LT_summary, paste0(out.path.BZE3, paste(unique(trees_harvested$inv)[1], unique(BZE3_trees_removed$inv)[1], "LT_stock_ha_removed", sep = "_"), ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
source("~/TI_BZE_BE_analysis/scripts/BZE_III/07_01_LT_RG_DW_growth_HBI_BZE3.R")
HBI_LT_summary
HBI_LT_summary

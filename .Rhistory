# 1.2.3. join RG biomass for trees <1.3m and >1.3m height  ----------------
RG_data <- RG_data %>% left_join(., rbind(
bio.ag.bg.kg.RG.above.1.3.df,
bio.total.kg.RG.above.1.3.df,
bio.ag.kg.RG.below.1.3.df),
by = c("plot_ID", "CCS_no", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.3 Nitrogen stock ------------------------------------------------------
# 1.3.1. Nitrogen stock for aboveground  & belowgrowground ---------------------------------
N_ag_bg_kg_comps_df <- RG_data %>%
filter(H_m <= 1.3 & compartiment %in% c("ag") |
H_m > 1.3 & !(compartiment %in% c("ag", "total"))) %>%
# calcualte nitrogen content for RG items with comppartiments "ndl", "fwb", "bg"
mutate(N_kg_tree = case_when(H_m > 1.3 & !(compartiment %in% c("ag", "total")) ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment),
# small trees are treated as "fwb" compartiment tho their only available compartiment is "ag" which is treated as "fwb"
H_m <= 1.3 & compartiment == "ag" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, "fwb"),
TRUE ~ NA)) %>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree")
# 1.3.2. total Nitrogen stock ---------------------------------------------------------------
N_total_kg_df <-
# total N_stock in kg
rbind(N_ag_bg_kg_comps_df %>%
# filter for trees with 1.3m height or more because those are the only trees that´ll have compartiments
semi_join(RG_data %>% filter(H_m > 1.3), by = c("plot_ID","CCS_no", "tree_ID", "inv", "inv_year")) %>%
# select compartiments "ndl", "fwb",  and add them together
filter(!(compartiment %in% c("ag", "bg", "total"))) %>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag") %>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# total N_stock in kg
N_ag_bg_kg_comps_df %>%
# filter for trees with 1.3m height or more because those are the only trees that´ll have compartiments
semi_join(RG_data %>% filter(H_m > 1.3), by = c("plot_ID","CCS_no", "tree_ID", "inv", "inv_year")) %>%
# select compartiments "ndl", "fwb", "bg" and add them together
filter(!(compartiment %in% c("ag", "total"))) %>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree")) %>%
arrange(plot_ID, CCS_no, tree_ID)
# 1.3.3. join RG nitrogen stock for trees <1.3m and >1.3m height  ----------------
RG_data <- RG_data %>% left_join(., rbind(
N_ag_bg_kg_comps_df,
N_total_kg_df),
by = c("plot_ID", "CCS_no", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.4. Carbon stock -------------------------------------------------------
RG_data <- RG_data %>% mutate(C_kg_tree = B_kg_tree*0.5)
# 2. data export ----------------------------------------------------------
RG_update_4 <- RG_data
# HBI dataset including estimated heights (use write.csv2 to make ";" as separator between columns)
write.csv2(RG_update_4, paste0(out.path.BZE3, paste(unique(RG_update_4$inv)[1], "RG_update_4", sep = "_"), ".csv"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_3.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_3.csv")), sep = ";", dec = ",")
# 0.4 data preparation ---------------------------------------------------------
trees <- trees %>% mutate(H_m = as.numeric(H_m))
# 1.1. biomass -----------------------------------------------------------------
# 1.1.1. biomass aboveground compartiments ---------------------------------------
bio.ag.kg.list <- vector("list", length = nrow(unique(trees[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- unique(trees[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
BL.or.CF <- unique(trees$LH_NH[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(trees$tpS_ID[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id]))
Dm = na.omit(as.list(as.numeric(unique(trees$DBH_cm[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id]))))
Hm = na.omit(as.list(as.numeric(unique(trees$DBH_h_cm[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])/100)))
Ht = na.omit(as.numeric(unique(trees$H_m[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(trees$plot_ID[trees$plot_ID == my.plot.id & trees$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(trees$tree_ID[trees$plot_ID == my.plot.id & trees$tree_ID == my.tree.id])),
"inv" = c(trees$inv[trees$plot_ID == my.plot.id & trees$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(trees$inv_year[trees$plot_ID == my.plot.id & trees$tree_ID == my.tree.id])),
"LH_NH" = c(trees$LH_NH[trees$plot_ID == my.plot.id & trees$tree_ID == my.tree.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.list[[i]] <- bio.info.df
}
bio_ag_kg_df <- as.data.frame(rbindlist(bio.ag.kg.list))
# 1.1.2. biomass belowground compartiments ----------------------------------
bio.bg.kg.list <- vector("list", length = nrow(unique(trees[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
my.plot.id <- unique(trees[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
#my.inv <-  unique(trees[, c("plot_ID", "tree_ID")])[,"inv"][i]
BL.or.CF <- unique(trees$LH_NH[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])
# select variales for tree object
spp = unique(trees$Bio_SP_group[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])
dbh.cm = as.numeric(unique(trees$DBH_cm[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(trees$inv[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(trees$inv_year[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.list[[i]] <- bio.info.df
}
bio_bg_kg_df <- as.data.frame(rbindlist(bio.bg.kg.list))
# 1.1.3. biomass all compartiments - total ----------------------------------
bio_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio_ag_kg_df, bio_bg_kg_df) %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio_ag_kg_df%>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"))
# 1.1.4. harmonizing biomass strings and compartiment names ---------------
#  harmonize strings of bio_total_kg_df
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
bio_total_kg_df[,c(1,2, 4, 6)] <- lapply(bio_total_kg_df[,c(1,2,4, 6)], as.numeric)
bio_ag_kg_df[,c(1,2, 4, 6)] <- lapply(bio_ag_kg_df[,c(1,2,4, 6)], as.numeric)
bio_bg_kg_df[,c(1,2, 4, 6)] <- lapply(bio_bg_kg_df[,c(1,2,4, 6)], as.numeric)
# 1.1.4. join biomass into tree dataset -----------------------------------
trees <- trees %>% left_join(.,
rbind(bio_ag_kg_df ,
bio_bg_kg_df,
bio_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N_ag_bg_kg_df <- trees %>%
filter(!(compartiment %in% c("ag", "total")))  %>%  # make sure the aboveground& belowground dataset doesnt include summed up compartiments like total and aboveground
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
# 1.2.2. Nitrogen ston in all compartiments summed up - total & aboveground  ----------------------------------
N_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N_ag_bg_kg_df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N_ag_bg_kg_df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments by exxlduing bg compartiment from N.ab.bg. dataframe
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
# 1.2.3. join Nitrogen stocks into tree dataset -----------------------------------
trees <- trees %>% left_join(.,
rbind(N_ag_bg_kg_df ,
N_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.3. carbon stock per tree & compartiment -------------------------------------------------------
trees <- trees %>% mutate(C_kg_tree = carbon(B_kg_tree))
# data export ---------------------------------------------------------------------------------------------
trees_update_4 <- trees
# HBI dataset including estimated heights (use write.csv2 to make ";" as separator between columns)
write.csv2(trees_update_4, paste0(out.path.BZE3, paste(unique(trees_update_4$inv)[1], "LT_update_4", sep = "_"), ".csv"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info,  species groups and B, C, N stocks per tree
RG_data <- read.delim(file = here("output/out_data/out_data_BZE/HBI_RG_update_4.csv"), sep = ";", dec = ",")
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. Packages & functions  ---------------------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# DEAD trees
DW_data <-  read.delim(file = here("output/out_data/out_data_BZE/HBI_DW_update_1.csv"), sep = ";", dec = ",")
# HBI forest type info per plot  (Bestandestyp)
# this i deed to later say "if the stocking species are mainly coniferous i need this secies group from tapeS
# and if th estocking species fall in the category broadleafes the other tapes species code"
HBI_forest_info <- read.delim(file = here("data/input/BZE2_HBI/be.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
HBI_inv_info <- read.delim(file = here(paste0(out.path.BZE3,"HBI_inv_info.csv")), sep = ";", dec = ",")
DW_data <- DW_data %>%
# join in forest type from HBI forst.csv
left_join(.,
HBI_forest_info %>%
# assign forest types into coniferus vs broadleaved categories based on x_forest code table
mutate(LH_NH_stand = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ "LB",
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ "NB",
TRUE ~ NA)) %>%
select(bund_nr, LH_NH_stand),
by = c("plot_ID" = "bund_nr")) %>%
mutate(SP_code =  case_when(dw_sp == 1 | (dw_sp == 4 & LH_NH_stand == "NB") ~ "gfi",  # Fi
dw_sp == 2 | (dw_sp == 4 & LH_NH_stand == "LB") ~ "rbu", # BU
dw_sp == 3 ~ "sei",                                   # EI
TRUE ~ NA) ) %>%
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase")) %>%
# transforming Biosoil decay types into BWI decay types by joining Biosoil decay type 1 & 2
mutate(dec_type_BWI = case_when(decay == 1 | decay == 2 ~ 1,
decay == 3 ~ 2,
decay == 4 ~ 3,
TRUE ~ 4))
# 1.3.1 biomass whole deadwood trees (ganzer Baum stehend 2/ liegend 5) ------------------------------------------------------------------------
# for whole standing or laying deadwood trees all compartiments except foliage ("ndl" ) are calculated via TapeS
HBW_DW_whole <- DW_data[DW_data$dw_type %in% c(2, 5)  & DW_data$decay  %in% c(1,2), ]
# export list for biomasse
bio.dw.whole.kg.list <- vector("list", length = nrow(HBW_DW_whole))
# export list for volume
for (i in 1:nrow(HBW_DW_whole)){
# i = 1
# select general info about the DW item
my.plot.id <- HBW_DW_whole[,"plot_ID"][i]
my.tree.id <- HBW_DW_whole[,"tree_ID"][i]
my.decay.type <- HBW_DW_whole[,"dec_type_BWI"][i]
my.dw.spec <- HBW_DW_whole[,"dw_sp"][i]
my.CF.BL <- HBW_DW_whole[,"LH_NH_stand"][i]
# select variables fot TprTrees object
# translating Species groups into TapeS codes
spp =  na.omit(as.numeric(unique(HBW_DW_whole$tpS_ID[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id])))
Dm = na.omit(as.list(as.numeric(unique(HBW_DW_whole$d_cm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id])))) # diameter in cm
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(HBW_DW_whole$l_dm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id]))/10) # lenth in meter m
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb"))
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass
bio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == TRUE], component = comp)) %>%
pivot_longer(cols = stw:fwb,
names_to = "compartiment",
values_to = "B_kg_tree") %>%
# apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(B_kg_tree = rdB_DW(B_kg_tree, my.decay.type, my.dw.spec))
# create export dataframe
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(HBW_DW_whole$plot_ID[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(HBW_DW_whole$tree_ID[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id])),
"inv" = c(HBW_DW_whole$inv[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBW_DW_whole$inv_year[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
))
bio.dw.whole.kg.list[[i]] <- bio.info.df
}
bio_dw_whole_kg_df <- as.data.frame(rbindlist(bio.dw.whole.kg.list))
# sum up deadwood ag compartiments
bio_dw_whole_ag_kg_df <- bio_dw_whole_kg_df %>%
select(-compartiment) %>%
mutate(compartiment = "ag") %>%
group_by(plot_ID, tree_ID, inv, inv_year, compartiment) %>%
summarise(B_kg_tree = sum(as.numeric(B_kg_tree)))
# 1.3.2. biomass broken deadwood trees (bruchstücke, 3) ------------------------------------------------------------------------
# for broken deadwood trees above 1.3 m all compartiments except foliage ("ndl" ) are calculated via TapeS
# export list for biomasse
DW_data_broken <- DW_data[DW_data$dw_type == 3  & DW_data$decay  %in% c(1,2), ]
bio.dw.broken.kg.list <- vector("list", length = nrow(DW_data_broken))
for (i in 1:nrow(DW_data_broken)){
# i = 1
# select general info about the DW item
my.plot.id <- DW_data_broken[,"plot_ID"][i]
my.tree.id <- DW_data_broken[,"tree_ID"][i]
my.decay.type <- DW_data_broken[,"dec_type_BWI"][i]
my.dw.spec <- DW_data_broken[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(DW_data_broken$tpS_ID[DW_data_broken$plot_ID==my.plot.id & DW_data_broken$tree_ID==my.tree.id])))
Dm = na.omit(as.list(as.numeric(unique(DW_data_broken$d_cm[DW_data_broken$plot_ID==my.plot.id & DW_data_broken$tree_ID==my.tree.id])))) # diameter in cm
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(DW_data_broken$l_dm[DW_data_broken$plot_ID==my.plot.id & DW_data_broken$tree_ID==my.tree.id]))/10) # lenth in meter m
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# create the deimitation of the stem section we want TapeS to caluculate the volume for
A <- 0 # lower limit
B <- Ht # upper limit = lenght
# calcualte volume for stem segment 0 to length
bio.df <- as.data.frame(cbind(
"vol_m3" = c((tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = TRUE, AB = list(A = A, B = B), iAB = "H") - tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = FALSE, AB = list(A = A, B = B), iAB = "H")),
(tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = FALSE, AB = list(A = A, B = B), iAB = "H")),
(tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = TRUE, AB = list(A = A, B = B), iAB = "H"))),
"compartiment" = c("sb", "sw", "ag"))) %>%
# calculate biomass
mutate(B_kg_tree = B_DW(as.numeric(vol_m3), my.decay.type, my.dw.spec))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(DW_data_broken$inv[DW_data_broken$plot_ID == my.plot.id & DW_data_broken$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(DW_data_broken$inv_year[DW_data_broken$plot_ID == my.plot.id & DW_data_broken$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.dw.broken.kg.list[[i]] <- bio.info.df
}
bio_dw_broken_kg_df <- as.data.frame(rbindlist(bio.dw.broken.kg.list))
# 1.3.3. biomass for stumps -----------------------------------------------
DW_data_stump <- DW_data[DW_data$dw_type == 4 & DW_data$decay  %in% c(1,2),]
bio.dw.stump.kg.list <- vector("list", length = nrow(DW_data_stump))
for (i in 1:nrow(DW_data_stump)){
# i = 3
# select general info about the DW item
my.plot.id <- DW_data_stump[,"plot_ID"][i]
my.tree.id <- DW_data_stump[,"tree_ID"][i]
my.decay.type <- DW_data_stump[,"dec_type_BWI"][i]
my.dw.spec <- DW_data_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(DW_data_stump$tpS_ID[DW_data_stump$plot_ID==my.plot.id & DW_data_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(DW_data_stump$BWI[DW_data_stump$plot_ID==my.plot.id & DW_data_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(DW_data_stump$d_cm[DW_data_stump$plot_ID==my.plot.id & DW_data_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(DW_data_stump$l_dm[DW_data_stump$plot_ID==my.plot.id & DW_data_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = (as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
## calcualte biomass and bark-stump ratio for the "pseudo" tree
# deal with error for small trees: # https://stackoverflow.com/questions/2158780/catching-an-error-and-then-branching-logic
t <- try(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp))
if("try-error" %in% class(t)){
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}else{
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# calcualte Biomass vie Volume cylinder function and wood density
ag.B.kg = as.data.frame(B_DW(V_DW_cylinder(as.numeric(d.cm)/100, as.numeric(l.m)), my.decay.type, my.dw.spec))[,1]
# claculate komaprtimetn biomass with ratios and ag
bio.df <- as.data.frame(cbind(
"compartiment" = c("ag", "stw", "stb"),
"B_kg_tree" = c(ag.B.kg, # ag biomass
ag.B.kg*as.numeric(ratio.df$wood_ag_ratio), # stump wood biomass
ag.B.kg*as.numeric(ratio.df$bark_ag_ratio)) # stump bark biomass
))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(DW_data_stump$inv[DW_data_stump$plot_ID == my.plot.id & DW_data_stump$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(DW_data_stump$inv_year[DW_data_stump$plot_ID == my.plot.id & DW_data_stump$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.dw.stump.kg.list[[i]] <- bio.info.df
}
bio_dw_stump_kg_df <- as.data.frame(rbindlist(bio.dw.stump.kg.list))
# 1.3.4. biomass for deadwood pieces --------------------------------------------------------
bio_dw_pieces_kg_df <- DW_data %>%
filter(dw_type %in% c(1, 6) |
dw_type %in% c(2, 5, 3, 4) & decay > 2) %>%
mutate(
compartiment =  "ag",
V_m3_tree = V_DW_cylinder(as.numeric(d_cm)/100, as.numeric(l_dm/10)),
B_kg_tree = B_DW(V_m3_tree, dec_type_BWI, dw_sp)) %>%
select("plot_ID", "tree_ID", "inv", "inv_year", "compartiment", "B_kg_tree")
# 1.3.4. add biomass to DW dataframe -----------------------------
# harmonise strings
all_dw_bio_df <- rbind(
bio_dw_whole_kg_df,
bio_dw_whole_ag_kg_df,
bio_dw_broken_kg_df,
bio_dw_stump_kg_df,
bio_dw_pieces_kg_df)
all_dw_bio_df[,c(1,2, 4, 6)] <- lapply(all_dw_bio_df[,c(1,2,4, 6)], as.numeric)
# join biomass in deadwood
DW_data <- DW_data %>%
left_join(., all_dw_bio_df,
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.4.1. Nitrogen stock in compartiments -----------------------------------------
N_dw_ag_comps_kg_df <- DW_data %>%
# compartitioned deadwood trees
filter(dw_type %in% c(2, 5, 3, 4) & decay <=2 & compartiment != "ag" | # deselect summed up compartiments for whole trees, stumps and broken trees
# deadwood trees that could have been compartitioned if htey would´t be to decayed
# --> biomass is always "ag"
dw_type %in% c(2, 5, 3, 4) & decay > 2|
# uncompartionable deadwood trees --> biomass is always "ag"
dw_type %in% c(1, 6)) %>%
mutate(N_kg_tree = case_when(dw_type %in% c(2, 5, 3, 4) & compartiment != "ag" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment),
# for all trees that are not copmartioned (meaning all trees that don´t have )
dw_type %in% c(1, 6) & compartiment == "ag" | dw_type %in% c(2, 5, 3, 4) & decay > 2 & compartiment =="ag" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group,"sb"),
TRUE ~ NA)) %>%
select(plot_ID, tree_ID, inv, inv_year, dw_type, compartiment, N_kg_tree)
# 1.4.2. total nitrogen stocks: sum up Nitrogen stock in compartiments -----------------------------------------
# summ up the aboveground compartiments
N_dw_ag_kg_df <- N_dw_ag_comps_kg_df %>%
# select only compartitionated trees
filter(dw_type %in% c(2, 5, 3, 4) & compartiment != "ag" )%>%
group_by(plot_ID, tree_ID, inv, inv_year, dw_type) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "dw_type", "compartiment", "N_kg_tree")
# 1.4.3. join Nitrogen stocks into deadwood dataset -----------------------------------
DW_data <- DW_data %>% left_join(.,
rbind(N_dw_ag_comps_kg_df ,
N_dw_ag_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year",
"dw_type", "compartiment"),
multiple = "all")
# 1.5 carbon stock per tree & compartiment -------------------------------------------------------
DW_data <- DW_data %>% mutate(C_kg_tree = carbon(B_kg_tree))
# 2. data export ----------------------------------------------------------
# create export dataset
DW_data_update_4 <- DW_data
write.csv2(DW_data_update_4, paste0(out.path.BZE3, paste(unique(DW_data_update_4$inv)[1], "DW_update_4", sep = "_"), ".csv"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info,  species groups and B, C, N stocks per tree
RG_data <- read.delim(file = here("output/out_data/out_data_BZE/HBI_RG_update_4.csv"), sep = ";", dec = ",")
# this dataset contains the data of the deadwood inventory of the HBI (BZE2), including info about species groups and B, C, N stocks per tree
DW_data <- read.delim(file = here("output/out_data/out_data_BZE/HBI_DW_update_4.csv"), sep = ";", dec = ",")
# this dataset contains the data of the tree inventory of the HBI (BZE2), including stand and area info,  species groups and B, C, N stocks per tree
tree_data <- read.delim(file = here("output/out_data/out_data_BZE/HBI_LT_update_4.csv"), sep = ";", dec = ",")
# 2. number of trees (LT/ DW/ RG) per hectar ----------------------------------------------
# summarize all trees per plot, no further grouping variables
n_ha_LT <-  tree_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, CCS_r_m, plot_A_ha, inv_year) %>%
# sum number of trees  per sampling circuit and reffer to hectare
reframe(no_trees_CCS_ha = n()/plot_A_ha) %>%
distinct() %>%
# now we summarise all the ha values of the cirlces per plot
group_by(plot_ID, inv_year) %>%
summarise(n_ha = sum(no_trees_CCS_ha))
n_ha_RG <- RG_data %>%
filter(compartiment == "ag") %>%
mutate(plot_A_ha = area_m2/1000) %>%
group_by(plot_ID, CCS_no, plot_A_ha, inv_year) %>%
# sum number of trees  per sampling circuit and reffer to hectare
reframe(no_trees_CCS_ha = n()/plot_A_ha) %>%
distinct() %>%
# now we summarise all the ha values of the cirlces per plot
group_by(plot_ID, inv_year) %>%
summarise(n_ha = sum(no_trees_CCS_ha))
n_ha_DW <- DW_data %>%
filter(compartiment == "ag") %>%
mutate(plot_A_ha = c_A(12.62)/1000) %>%
group_by(plot_ID, plot_A_ha, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct()

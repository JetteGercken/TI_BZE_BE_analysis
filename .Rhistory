)
tree.points.no.edge.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
print(paste(my.plot.id, my.tree.id))
}
trees_update_1
# 3.3.1.2. join tree stand status and plot areas into trees dataset  --------------------------------------------------------
trees_update_1 <- trees_data %>%
# join in stand of each tree
left_join(., all.trees.status.df %>%
select(plot_ID, tree_ID, inv_year, t_stat) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv_year")) %>%
rename(stand = t_stat)
# 3.3. data export ---------------------------------------------------------------------------------------------------------
# 3.3.1. data prep for export -----------------------------------------------------------------------------------------------
# 3.3.1.1. harmonzing strings for join --------------------------------------------------------
# harmonize strings of all.trees.status.df and
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
all.trees.status.df[,c(1,2,3, 4, 5)] <- lapply(all.trees.status.df[,c(1,2, 3, 4, 5)], as.numeric)
all.edges.area.df.nogeo[,c(1,2, 3,4, 6)] <- lapply(all.edges.area.df.nogeo[,c(1,2, 3, 4, 6)], as.numeric)
# 3.2.2.2. plots with 2 edges: sorting trees into edge and remaining circle polygones ---------
# bind all edges area dataframes together
inter.poly.two.edges.df.nogeo <- plyr::rbind.fill(inter.poly.two.edges.df.nogeo, outer.inter.poly.two.edges.df.nogeo)# %>% select(colnames(inter.poly.two.edges.df.nogeo)))%>% arrange(plot_ID)
rem.circle.two.edges.df.nogeo <- plyr::rbind.fill(rem.circle.two.edges.df.nogeo, outer.rem.circle.two.edges.df.nogeo)# %>% select(colnames(rem.circle.two.edges.df.nogeo)))%>% arrange(plot_ID)
# intersection of trees with 2 edges
trees.two.edges.nogeo <- trees_data %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2) %>%
#& inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
# filter for trees located in plots htat haev only one forest edge
semi_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") #%>%
tree.status.two.edges.list.nogeo <- vector("list", length = length(trees.two.edges.nogeo$tree_ID))
tree.points.two.edges.list.nogeo <- vector("list", length = length(trees.two.edges.nogeo$tree_ID))
for (i in 1:length(trees.two.edges.nogeo$tree_ID)){
# i = 3225
# i = which(grepl(50122, (trees.two.edges.nogeo$plot_ID)))[2]
#if(nrow(trees.two.edges.nogeo) == 0){break}
# select plot ID accordint to positioin in the list
my.plot.id <- trees.two.edges.nogeo[i, "plot_ID"]
my.tree.id <- trees.two.edges.nogeo[i, "tree_ID"]
my.inv.year <- trees.two.edges.nogeo[i, "inv_year"]
## select the UTM coordiantes of the center of the cirlce corresponding with the plot ID
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
# select the remaining cirlce we want to intersect the tree with
my.rem.circle <- sf::st_as_sf(rem.circle.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct())
my.edges.df <- inter.poly.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct() %>% arrange(e_ID)
my.inter.1 <- sf::st_as_sf(my.edges.df[1,])
my.inter.2 <- sf::st_as_sf(my.edges.df[2,])
# assign stand category to the polygones depending on which one is bigger/ smaller:
# bigger polygone/ polygone with greater area is assigned to category A, smaller area polygone is assigned to B
area.plot.df <- all.edges.area.df.nogeo %>% filter(plot_ID == my.plot.id & CCS_r_m == 17.84)
# assign stand category to the polygones depending on which one is bigger/ smaller
my.rem.circle$stand <- area.plot.df$stand[area.plot.df$e_ID == 0]
my.inter.1$stand <- area.plot.df$stand[area.plot.df$e_ID == 1]
my.inter.2$stand <- area.plot.df$stand[area.plot.df$e_ID == 2]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.two.edges.nogeo[i, "dist_cm"]/100
azi.tree <- trees.two.edges.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree*pi/200)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree*pi/200)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(tree.east),
"lat" = c(tree.north)
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
# print(c(plot(my.rem.circle$geometry, col = "red"),
#       plot(my.inter.2$geometry, add = T),
#       plot(my.inter.1$geometry, add = T),
#       plot(tree.sf$geometry, add = T))
#       )
inter.tree.circle <- sf::st_intersection(tree.sf, my.rem.circle)
inter.tree.edge.1 <- sf::st_intersection(tree.sf, my.inter.1)
inter.tree.edge.2 <- sf::st_intersection(tree.sf, my.inter.2)
tree_status <- ifelse(nrow(inter.tree.edge.1)!= 0 & nrow(inter.tree.edge.2)== 0 & nrow(inter.tree.circle)== 0,  my.inter.1$stand,                     # if tree is in edge 1
ifelse(nrow(inter.tree.edge.2)!= 0 & nrow(inter.tree.edge.1)== 0 & nrow(inter.tree.circle)== 0,  my.inter.2$stand,              # if tree is in edge 2
ifelse(nrow(inter.tree.circle)!= 0 & nrow(inter.tree.edge.1)== 0 & nrow(inter.tree.edge.2)== 0,  my.rem.circle$stand,    # if tree is in circle
#ifelse(nrow(inter.tree.circle)== 0 & nrow(inter.tree.edge.1)!= 0 & nrow(inter.tree.edge.2)!= 0,  "warning",       # if tree is in two edges
"warning")))                                                                                             # if tree is nowhere
tree.status.two.edges.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status)))
tree.points.two.edges.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
print(paste(my.plot.id, my.tree.id))
}
# save tree corodiantes and status into dataframe
tree.status.two.edges.df.nogeo <- as.data.frame(rbindlist(tree.status.two.edges.list.nogeo))
# save tree sf into dataframe
tree.points.two.edges.df.nogeo <- as.data.frame( rbindlist(tree.points.two.edges.list.nogeo))
# 3.2.2.3. binding datasets together --------------------------------------
# bind the tree point datafarmes of one and two edges plots together
two.and.one.edge.trees.points.df.nogeo <- plyr::rbind.fill(tree.points.one.edge.df.nogeo,tree.points.two.edges.df.nogeo)
# this step i separated in case both of the rbinded dfs are empty and the mutate wouldnÂ´t grip
two.and.one.edge.trees.points.df.nogeo <- two.and.one.edge.trees.points.df.nogeo %>% mutate(plot_ID = as.integer(plot_ID))
# 3.2.2.4 plots with no edge edge: sorting trees into circle ---------
trees.no.edge.nogeo <- anti_join(trees_data, forest_edges.man %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges.man %>%
filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
select(plot_ID) %>%
distinct(), by = "plot_ID")#%>%
tree.status.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
tree.points.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
for (i in 1:length(trees.no.edge.nogeo$tree_ID)){
#i = 2173
#i = which(grepl(50124, unique(trees.no.edge.nogeo$plot_ID)))
#if(nrow(trees.no.edge.nogeo) == 0){break}
# select plot ID accordint to positioin in the list
my.plot.id <- trees.no.edge.nogeo[i, "plot_ID"]
my.tree.id <- trees.no.edge.nogeo[i, "tree_ID"]
my.inv.year <- trees.no.edge.nogeo[i, "inv_year"]
## georeference
## select UTM corrdinates of the plot center
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.no.edge.nogeo[i, "dist_cm"]/100
azi.tree <- trees.no.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree*pi/200)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree*pi/200)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.east)),
"lat" = c(as.numeric(tree.north))
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
#### build circle
# circle data
c.x0 = 0  # + my.center.easting
c.y0 = 0  # + my.center.northing
c.r3 = 17.84
c.r2 = 12.62
c.r1 = 5.64
# build polygon (circlular buffer) around center point
center.df<- as.data.frame(cbind("lon" = c.x0, "lat" = c.y0))
circle.pt <- sf::st_as_sf(center.df, coords = c("lon", "lat"))
## assing crs to cirlce corodiantes
# sf::st_crs(circle.pt) <- my.utm.epsg
circle.17 <- sf::st_buffer(circle.pt, c.r3)
circle.12 <- sf::st_buffer(circle.pt, c.r2)
circle.5 <- sf::st_buffer(circle.pt, c.r1)
inter.tree.circle.17 <- sf::st_intersection(tree.sf, circle.17)
# if a tree is not intersecting with the circle or its exactly at the edge of the cirlce the inter.tree.circle.17 will be empty,
# however, trees that are exactly 17.84 meters apart from the circle center would still be part of the plot, tho the polygones wonÂ´t detect and intersection
# which is why trees only receive the status "warning" if they are acturally situated outside of the circle
tree_status <- ifelse(nrow(inter.tree.circle.17) == 0 & dist.tree > 17.84,  "warning", "A")                                                                                            # if tree is nowhere
tree.status.no.edge.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status))
)
tree.points.no.edge.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
print(paste(my.plot.id, my.tree.id))
}
# save tree corodiantes and status into dataframe
tree.status.two.edges.df.nogeo <- as.data.frame(rbindlist(tree.status.two.edges.list.nogeo))
# save tree sf into dataframe
tree.points.two.edges.df.nogeo <- as.data.frame( rbindlist(tree.points.two.edges.list.nogeo))
# 3.2.2.3. binding datasets together --------------------------------------
# bind the tree point datafarmes of one and two edges plots together
two.and.one.edge.trees.points.df.nogeo <- plyr::rbind.fill(tree.points.one.edge.df.nogeo,tree.points.two.edges.df.nogeo)
# this step i separated in case both of the rbinded dfs are empty and the mutate wouldnÂ´t grip
two.and.one.edge.trees.points.df.nogeo <- two.and.one.edge.trees.points.df.nogeo %>% mutate(plot_ID = as.integer(plot_ID))
# 3.2.2.4 plots with no edge edge: sorting trees into circle ---------
trees.no.edge.nogeo <- anti_join(trees_data, forest_edges.man %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges.man %>%
filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
select(plot_ID) %>%
distinct(), by = "plot_ID")#%>%
tree.status.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
tree.points.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
for (i in 1:length(trees.no.edge.nogeo$tree_ID)){
#i = 2173
#i = which(grepl(50124, unique(trees.no.edge.nogeo$plot_ID)))
#if(nrow(trees.no.edge.nogeo) == 0){break}
# select plot ID accordint to positioin in the list
my.plot.id <- trees.no.edge.nogeo[i, "plot_ID"]
my.tree.id <- trees.no.edge.nogeo[i, "tree_ID"]
my.inv.year <- trees.no.edge.nogeo[i, "inv_year"]
## georeference
## select UTM corrdinates of the plot center
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.no.edge.nogeo[i, "dist_cm"]/100
azi.tree <- trees.no.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree*pi/200)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree*pi/200)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.east)),
"lat" = c(as.numeric(tree.north))
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
#### build circle
# circle data
c.x0 = 0  # + my.center.easting
c.y0 = 0  # + my.center.northing
c.r3 = 17.84
c.r2 = 12.62
c.r1 = 5.64
# build polygon (circlular buffer) around center point
center.df<- as.data.frame(cbind("lon" = c.x0, "lat" = c.y0))
circle.pt <- sf::st_as_sf(center.df, coords = c("lon", "lat"))
## assing crs to cirlce corodiantes
# sf::st_crs(circle.pt) <- my.utm.epsg
circle.17 <- sf::st_buffer(circle.pt, c.r3)
circle.12 <- sf::st_buffer(circle.pt, c.r2)
circle.5 <- sf::st_buffer(circle.pt, c.r1)
inter.tree.circle.17 <- sf::st_intersection(tree.sf, circle.17)
# if a tree is not intersecting with the circle or its exactly at the edge of the cirlce the inter.tree.circle.17 will be empty,
# however, trees that are exactly 17.84 meters apart from the circle center would still be part of the plot, tho the polygones wonÂ´t detect and intersection
# which is why trees only receive the status "warning" if they are acturally situated outside of the circle
tree_status <- ifelse(nrow(inter.tree.circle.17) == 0 & dist.tree > 17.84,  "warning", "A")                                                                                            # if tree is nowhere
tree.status.no.edge.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status))
)
tree.points.no.edge.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
print(paste(my.plot.id, my.tree.id))
}
# save tree corodiantes and status into dataframe
tree.status.no.edges.df.nogeo <- as.data.frame(rbindlist(tree.status.no.edge.list.nogeo))
# save tree sf into dataframe
tree.points.no.edges.df.nogeo <- as.data.frame(rbindlist(tree.points.no.edge.list.nogeo))
# bind all tree point.sf dataframes (with & without edges together)
all.trees.points.df.nogeo <-
plyr::rbind.fill(tree.points.one.edge.df.nogeo ,
tree.points.two.edges.df.nogeo,
tree.points.no.edges.df.nogeo) %>%
mutate(across(plot_ID:tree_ID, ~ as.integer(.x))) %>%
distinct() %>%
left_join(., trees_data %>%
select(plot_ID, tree_ID, inv_year, DBH_cm),
by = c("plot_ID", "tree_ID", "inv_year"),
multiple = "all")
# bind all tree status dataframes together (one edge, two edges, no edge plots)
all.trees.status.df <-
plyr::rbind.fill(tree.status.no.edges.df.nogeo,
tree.status.one.edge.df.nogeo,
tree.status.two.edges.df.nogeo)
# 3.3. data export ---------------------------------------------------------------------------------------------------------
# 3.3.1. data prep for export -----------------------------------------------------------------------------------------------
# 3.3.1.1. harmonzing strings for join --------------------------------------------------------
# harmonize strings of all.trees.status.df and
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
all.trees.status.df[,c(1,2,3, 4, 5)] <- lapply(all.trees.status.df[,c(1,2, 3, 4, 5)], as.numeric)
all.edges.area.df.nogeo[,c(1,2, 3,4, 6)] <- lapply(all.edges.area.df.nogeo[,c(1,2, 3, 4, 6)], as.numeric)
# 3.3.1.2. join tree stand status and plot areas into trees dataset  --------------------------------------------------------
trees_update_1 <- trees_data %>%
# join in stand of each tree
left_join(., all.trees.status.df %>%
select(plot_ID, tree_ID, inv_year, t_stat) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv_year")) %>%
rename(stand = t_stat)
trees_update_1 %>%
# remove and rejoin edge info
select(-c(e_ID, e_form, e_type)) %>%
distinct() %>%
left_join(., all.edges.area.df.nogeo %>%
select(plot_ID, inter_stat, CCS_r_m, stand, area_m2, e_ID),
by = c("plot_ID", "CCS_r_m", "stand"))%>%
left_join(., forest_edges %>% select(plot_ID, e_ID, e_form, e_type), by = c("plot_ID", "e_ID")) %>%
# if there was no plot area claualted due to the fact that there is no edger at the plot,
# we calcualte the area from the sampling circuit diameter assign under CCD_r_m
mutate(area_m2 = ifelse(is.na(e_ID) & is.na(area_m2) |
# for trees alloceted to a in a cirlce without intersections wil not run throuhg the loops
# thus they do  have an edge ID but no calcualted areas or assigned intersection status
# therefore we have to calculate their area manually subsequently
# trees with the status "warning" will not have any stand and area from the dataset "all.edges.area.df.nogeo" assigned
# as this stand category doesnÂ´t exist
# trees with the status "warning" will be excluded from the analysis
stand == "A" & inter_stat != "partly intersecting" & is.na(area_m2) |
stand == "A" & is.na(inter_stat) & is.na(area_m2), c_A(CCS_r_m), area_m2),
# this column is for stand-wise analysis and contains the plot area per tree according to the stand and the sampling circuit it is located in according to its diameter
stand_plot_A_ha = as.numeric(area_m2)/10000,# dividedd by 10 000 to transform m2 into hectar
# this column is for not stand wise analysis and contains the plot area per ptree according to the sampling circiont it is located in according to its diameter
plot_A_ha = c_A(CCS_r_m)/10000) #%>%   # dividedd by 10 000 to transform m2 into hectar
# left_join(geo_loc %>% select(plot_ID, RW_MED, HW_MED), by = "plot_ID") %>%
# mutate(east_tree =  X_tree + RW_MED,
#        north_tree = Y_tree + HW_MED)
# this if statement is in case there are no forest edges for that dataset... which is unlikely
if(exists("all.edges.area.df.nogeo")){
# join in the area that belongs to the tree according to the CCS the tree was measured in/ belongs to
trees_update_1 <- trees_update_1 %>%
# remove and rejoin edge info
select(-c(e_ID, e_form, e_type)) %>%
distinct() %>%
left_join(., all.edges.area.df.nogeo %>%
select(plot_ID, inter_stat, CCS_r_m, stand, area_m2, e_ID),
by = c("plot_ID", "CCS_r_m", "stand"))%>%
left_join(., forest_edges %>% select(plot_ID, e_ID, e_form, e_type), by = c("plot_ID", "e_ID")) %>%
# if there was no plot area claualted due to the fact that there is no edger at the plot,
# we calcualte the area from the sampling circuit diameter assign under CCD_r_m
mutate(area_m2 = ifelse(is.na(e_ID) & is.na(area_m2) |
# for trees alloceted to a in a cirlce without intersections wil not run throuhg the loops
# thus they do  have an edge ID but no calcualted areas or assigned intersection status
# therefore we have to calculate their area manually subsequently
# trees with the status "warning" will not have any stand and area from the dataset "all.edges.area.df.nogeo" assigned
# as this stand category doesnÂ´t exist
# trees with the status "warning" will be excluded from the analysis
stand == "A" & inter_stat != "partly intersecting" & is.na(area_m2) |
stand == "A" & is.na(inter_stat) & is.na(area_m2), c_A(CCS_r_m), area_m2),
# this column is for stand-wise analysis and contains the plot area per tree according to the stand and the sampling circuit it is located in according to its diameter
stand_plot_A_ha = as.numeric(area_m2)/10000,# dividedd by 10 000 to transform m2 into hectar
# this column is for not stand wise analysis and contains the plot area per ptree according to the sampling circiont it is located in according to its diameter
plot_A_ha = c_A(CCS_r_m)/10000) #%>%   # dividedd by 10 000 to transform m2 into hectar
# left_join(geo_loc %>% select(plot_ID, RW_MED, HW_MED), by = "plot_ID") %>%
# mutate(east_tree =  X_tree + RW_MED,
#        north_tree = Y_tree + HW_MED)
}else{
trees_update_1 <- trees_update_1 %>%
mutate(# this column is for not stand wise analysis and contains the plot area per ptree according to the sampling circiont it is located in according to its diameter
plot_A_ha = c_A(CCS_r_m)/10000,
# if there are no edges the area is equal to the plot area in m2
area_m2 = c_A(CCS_r_m),
# if there are no edges this column contains the same area s the plot and the area column this column is for stand-wise analysis and contains the plot area per tree according to the stand and the sampling circuit it is located in according to its diameter
stand_plot_A_ha = as.numeric(area_m2)/10000,# dividedd by 10 000 to transform m2 into hectar
inter_stat = NA)
}
trees_update_1 %>% filter(plot_ID == 30506 & tree_ID == 1) %>% distinct()
# 3.3.1.3. sort trees into remove and process on datasets by status "warning" --------------------------------------------------------
trees_removed <- plyr::rbind.fill(trees_removed,
trees_update_1 %>%
anti_join(., trees_removed, by = c("plot_ID", "tree_ID")) %>%
filter(stringr::str_detect(stand, "warning")) %>%
mutate(rem_reason = "LT excluded during forest edges allocation"))
trees_update_1 <- trees_update_1 %>% filter(!(stringr::str_detect(stand, "warning")))
# 3.3.1.4.  binding datasets together ----------------------------------------------------------
all.triangle.polys.df.nogeo <- plyr::rbind.fill(triangle.e1.poly.df.nogeo, triangle.e2.poly.df.nogeo)
all.edge.intersections.poly  <- plyr::rbind.fill(inter.poly.one.edge.df.nogeo , inter.poly.two.edges.df.nogeo)#%>% nest("geometry" = geometry)
all.remaning.circles.poly <- plyr::rbind.fill(rem.circle.one.edge.df.nogeo, rem.circle.two.edges.df.nogeo) #%>% nest("geometry" = geometry)
all.triangle.coords.df.nogeo <- plyr::rbind.fill(triangle.e1.coords.df.nogeo, triangle.e2.coords.df.nogeo) %>%
# the exportet polygones only include the widest cirlce intersection at 17.84m radius
mutate(CCS_r_m = 17.84) %>%
# join in the stand info by plot_ID, e_ID, CCS_r_M
left_join(., all.edges.area.df.nogeo %>% select(plot_ID, e_ID, CCS_r_m, stand),
by = c("plot_ID", "e_ID", "CCS_r_m"))
# 3.3.2. exporting data ---------------------------------------------------
# exporting tree and edge/ plot area data
write.csv(trees_update_1, paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "LT_update_1", sep = "_"), ".csv"), row.names = FALSE)
if(nrow(trees_removed)!=0){write.csv(trees_removed, paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "LT_removed", sep = "_"), ".csv"), row.names = FALSE)}
# export tree stand status of all trees nomatter if they have one, two or no forest edges at their plot
write.csv(all.trees.status.df, paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_LT_stand", sep = "_"), ".csv"), row.names = FALSE)
# export areas and stand info of all sampling circuits, edges and remaining circles
write.csv(all.edges.area.df.nogeo,  paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_rem_circles", sep = "_"), ".csv"), row.names = FALSE)
# export list of plots where the both edge polygones intersect within the 17.84 radius
write.csv(intersection.two.edges.warning.df.nogeo,  paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "edges_intersecting_warning", sep = "_"), ".csv"), row.names = FALSE)
# exporting edge triangle polygones
write.csv(all.triangle.polys.df.nogeo, paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_triangle_poly", sep = "_"), ".csv"), row.names = FALSE)
# exporting edge triangle coordiantes
write.csv(all.triangle.coords.df.nogeo, paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_triangle_coords", sep = "_"), ".csv"), row.names = FALSE)
# exporting edge intersection polygones
#write.csv2(all.edge.intersections.poly, paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_intersection_poly", sep = "_"), ".csv"))
# to export the dataframes with long geometries and keep the geometries in list format for better processing later
# thus we export them with the following function, that enables to save the whole geometry list in 1 Table
# https://stackoverflow.com/questions/48024266/save-a-data-frame-with-list-columns-as-csv-file
tibble_with_lists_to_csv(all.edge.intersections.poly %>% nest("geometry" = geometry), paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_intersection_poly", sep = "_"), ".csv"))
# exporting all remaining circles polygones
tibble_with_lists_to_csv(all.remaning.circles.poly %>% nest("geometry" = geometry), paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_rem_circles_poly", sep = "_"), ".csv"))
## export coordiantes of all edge-triangle-circle-intersections polygones  to  dataframes
all.edge.intersections.coords.list <- vector("list", length = nrow(unique(all.edge.intersections.poly[, c("plot_ID", "e_ID")])))
for (i in 1:nrow(unique(all.edge.intersections.poly[, c("plot_ID", "e_ID")]))) {
# i = 1
all.edge.intersections.coords.list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(all.edge.intersections.poly$plot_ID[i]),
"e_ID" = c(all.edge.intersections.poly$e_ID[i]),
"e_form" = c(all.edge.intersections.poly$e_form[i]),
"lon" = (as_tibble(st_coordinates(all.edge.intersections.poly$geometry[i])) %>% select("X", -c( "L1", "L2"))),
"lat" = (as_tibble(st_coordinates(all.edge.intersections.poly$geometry[i])) %>% select("Y", -c( "L1", "L2")))
))
}
all.edge.intersections.coords.list.final <- rbindlist(all.edge.intersections.coords.list)
all.edge.intersections.coords.df <- as.data.frame(all.edge.intersections.coords.list.final) %>%
# the exportet polygones only include the widest cirlce intersection at 17.84m radius
mutate(CCS_r_m = 17.84) %>%
# join in the stand info by plot_ID, e_ID, CCS_r_M
left_join(., all.edges.area.df.nogeo %>% select(plot_ID, e_ID, CCS_r_m, stand),
by = c("plot_ID", "e_ID", "CCS_r_m"))
write.csv(all.edge.intersections.coords.df,  paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_edges_intersection_coords", sep = "_"), ".csv"), row.names = FALSE)
## export coordiantes of all remaining polygones  to  dataframes
all.rem.circle.coords.list <- vector("list", length = nrow(unique(all.remaning.circles.poly[, c("plot_ID", "e_ID")])))
for (i in 1:nrow(unique(all.remaning.circles.poly[, c("plot_ID", "e_ID")]))) {
# i = 1
all.rem.circle.coords.list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(all.remaning.circles.poly$plot_ID[i]),
"e_ID" = c(all.remaning.circles.poly$e_ID[i]),
"e_form" = c(all.remaning.circles.poly$e_form[i]),
"lon" = (as_tibble(st_coordinates(all.remaning.circles.poly$geometry[i])) %>% select("X", -c( "L1", "L2"))),
"lat" = (as_tibble(st_coordinates(all.remaning.circles.poly$geometry[i])) %>% select("Y", -c( "L1", "L2")))
))
}
all.rem.circle.coords.list.final <- rbindlist(all.rem.circle.coords.list)
all.rem.circle.coords.df <- as.data.frame(all.rem.circle.coords.list.final) %>%
# the exportet polygones only include the widest cirlce intersection at 17.84m radius
mutate(CCS_r_m = 17.84) %>%
# join in the stand info by plot_ID, e_ID, CCS_r_M
left_join(., all.edges.area.df.nogeo %>% select(plot_ID, e_ID, CCS_r_m, stand),
by = c("plot_ID", "e_ID", "CCS_r_m"))
write.csv(all.rem.circle.coords.df,  paste0(out.path.BZE3, paste(unique(trees_update_1$inv)[1], "all_rem_circles_coords", sep = "_"), ".csv"), row.names = FALSE)
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the  national soil inventory
# BZE3 forest edges
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# BZE3 BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here one should immport the the dataset called HBI_trees_update_01.csv which includes only trees that are already sortet according to their inventory status (Baumkennzahl)
trees_data <- read.delim(file = here(paste0(out.path.BZE3, "BZE3_LT_update_0.csv")), sep = ",", dec = ".")
# RG
georef_on_off(source(paste0(here(), "/scripts/BZE_III/01_02_01_RG_forest_edges_HBI.R")),
source(paste0(here(), "/scripts/BZE_III/01_02_02_RG_forest_edges_georef_HBI.R"))
## !!!! here one can select to work with the georefferenced or not georeffrenced plots and forest edges, default is not georefferenced
, georefference = "not_georefferenced")
## BZE forest edges
# LT
georef_on_off(source(paste0(here(), "/scripts/BZE_III/01_01_01_LT_forest_edges_BZE3.R")),
source(paste0(here(), "/scripts/BZE_III/01_01_02_LT_forest_edges_georef_BZE3.R"))
## !!!! here one can select to work with the georefferenced or not georeffrenced plots and forest edges, default is not georefferenced
, georefference = "not_georefferenced")
# RG
georef_on_off(source(paste0(here(), "/scripts/BZE_III/01_02_01_RG_forest_edges_BZE3.R")),
source(paste0(here(), "/scripts/BZE_III/01_02_02_RG_forest_edges_georef_BZE3.R"))
## !!!! here one can select to work with the georefferenced or not georeffrenced plots and forest edges, default is not georefferenced
, georefference = "not_georefferenced")
##### tree inventory status -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
source(paste0(here(), "/scripts/BZE_III/02_01_LT_invetory_status_HBI_BZE3.R"))
##### tree heights -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## HBI & BZE3 together: LT tree height
source(paste0(here(), "/scripts/BZE_III/03_01_LT_heights_HBI_BZE3.R"))
##### stocks ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## HBI stocks
# LT
source(paste0(here(), "/scripts/BZE_III/04_01_LT_stocks_HBI.R"))
# RG
source(paste0(here(), "/scripts/BZE_III/04_02_RG_stocks_HBI.R"))
# DW
source(paste0(here(), "/scripts/BZE_III/04_03_DW_stocks_HBI.R"))
##### summarising hectar values ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## HBI summarising hectar values
source(paste0(here(), "/scripts/BZE_III/05_00_LT_RG_DW_summarising_hectar_values_HBI.R"))
##### biodiversity: forest structural diversity index (FSI) ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## HBI structural diversity
source(paste0(here(), "/scripts/BZE_III/06_00_biodiversity_index_HBI.R"))
gitcreds::gitcreds_set(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)
gitcreds::gitcreds_set()
gc()
gc()
free -h

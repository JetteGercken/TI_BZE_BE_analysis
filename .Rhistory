# which is a requirement to assing a single species stand as it has to be dominated by ONE kind of species of the species groups (BU, EI, FI, KI, oBL, oCF)
main.sp.p.df <- (my.sp.p.df %>% arrange(desc(BA_percent)))[1,]
# assign the stand type group to the species with the highest basal area share
my.standtype.spec <- standtype(SP_names_com_ID_tapeS$bot_genus[tolower(SP_names_com_ID_tapeS$Chr_code_ger) == main.sp.p.df$SP_code],
SP_names_com_ID_tapeS$LH_NH[tolower(SP_names_com_ID_tapeS$Chr_code_ger) == main.sp.p.df$SP_code])
# assign standtype to mono-species stand, if basal area is >= 70%
# the number codes of the stand types are listed in neu_x_besttyp_bestand
besttype.mono <- case_when(my.standtype.spec == "FI" & main.sp.p.df$BA_percent >= 70 ~  1,  # "Fi-Rein"
my.standtype.spec == "KI" & main.sp.p.df$BA_percent >= 70 ~ 2,   # "Ki-Rein",
my.standtype.spec == "aNH" & main.sp.p.df$BA_percent >= 70 ~ 3,  #"sonst-Nd",
my.standtype.spec == "BU" & main.sp.p.df$BA_percent >= 70 ~ 4,   # "Bu-Rein" ,
my.standtype.spec == "EI" & main.sp.p.df$BA_percent >= 70 ~ 5,   # "Ei-Rein",
my.standtype.spec == "aLH" & main.sp.p.df$BA_percent >= 70 ~ 8,  # "sonst-Ld",
TRUE ~ NA)
# if its not a single species stand we have to reassess the stand conditions
# check if we can identify a Nadelholzmischbestand or Laubbolzmischbestand
# which means the overall share of conifers or broadleaved trees
besttype.strong.mix <- ifelse(is.na(besttype.mono) &
# if there area more CF then BL trees (CF min 50%, BL <50%)
my.CF.share > my.BL.share &
# but there is still a high amount of BL trees >30%
my.BL.share < 50 & my.BL.share > 30, 6,        # "Nd-Lb-Misch",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share > my.CF.share &
# but there is still a high amount of BL trees >30%
my.CF.share < 50 & my.CF.share > 30, 7,  # "Lb-Nd-Misch",
NA))
# assign stand types for stands wich are dominated by one catedory (CF, BL) but have a low amount
# of
besttype.mix  <- ifelse(is.na(besttype.mono) & is.na(besttype.strong.mix) &
# if there area more CF then BL trees (CF min 50%, BL <50%)
my.CF.share >= 70 &
# but there is still a high amount of BL trees >30%
my.BL.share <= 30, 9,         # "Nd-Lb<30",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share >= 70 &
# but there is still a high amount of CF trees >30%
my.CF.share <= 30, 10, # "Lb-Nd<30",
NA))
besttype.final <- ifelse(!is.na(besttype.mono) &
is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.mono,
ifelse(is.na(besttype.mono) &
!is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.strong.mix,
ifelse(is.na(besttype.mono) &
is.na(besttype.strong.mix) &
!is.na(besttype.mix), besttype.mix, NA)))
besttype_list[[i]] <- as.data.frame(cbind(
plot_ID = c(my.plot.id),
inv = c(my.inv),
dom_SP = c(main.sp.p.df$SP_code),
stand_type = c(besttype.final),
n_stands = c(my.n.stand),
stand_component = c("LT")
)) %>%
distinct()
}
trees_stat_2
trees_data %>% filter(plot_ID == 140013)
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.4 importing data -----------------------------------------------------
## BZE 2
# this dataset contains the BZE file tit_1 which displays info about the BZE inventory in general
# so info that´s base of all sub inventories like trees, deadwood, regeneration
inv_info <- read.delim(file = here("data/input/BZE2_HBI/tit_1.csv"), sep = ",", dec = ".", stringsAsFactors=FALSE) %>% select(-c("re_form", "re_lage", "neigung", "exposition", "anmerkung"))
colnames(inv_info) <- c("plot_ID", "team", "date", "plot_inv_status")
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
inv_info$date <- as.Date(inv_info$date)
inv_info$inv_year <- as.numeric(format(inv_info$date, "%Y"))
# this line can be removed later
inv_info <- inv_info %>% mutate(inv = inv_name(inv_year))
## LIVING TREES
# this dataset contains information about the inventory of the respective individual sampling circuits as well as stand realted info like stand type & - structure
tree_inv_info <-  read.delim(file = here("data/input/BZE2_HBI/be.csv"), sep = ",", dec = ".", stringsAsFactors=FALSE) %>% # be
select(bund_nr, team,  datum,  beart, besttyp, struktur,  pk1_aufnahme,   pk2_aufnahme, pk3_aufnahme, hbi_status)
colnames(tree_inv_info) <- c("plot_ID", "team", "date", "stand_spec", "stand_type", "structure",
"CCS_5_inv_status",  "CCS_12_inv_status",  "CCS_17_inv_status" , "hbi_status")
tree_inv_info <- tree_inv_info %>% mutate(hbi_status = case_when(str_detect(plot_ID, '^9') ~ 3,
str_detect(plot_ID, '^11') ~ 3,
str_detect(plot_ID, '^12') ~ 3,
hbi_status == -9 ~ 1,
TRUE ~ hbi_status))
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
tree_inv_info$date <- as.Date(tree_inv_info$date)
tree_inv_info$inv_year <- as.numeric(format(tree_inv_info$date, "%Y"))
# this line can be removed later
tree_inv_info <- tree_inv_info %>% mutate(inv = inv_name(inv_year))
# HBI BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
trees_data <- read.delim(file = here("data/input/BZE2_HBI/beab.csv"), sep = ",", dec = ".")
# HBI trees
colnames(trees_data) <- c("plot_ID", "tree_ID", "tree_inventory_status", "multi_stem",  "SP_code", "age",
"age_meth", "D_mm", "DBH_h_cm", "H_dm", "C_h_dm", "azi_gon", "dist_cm", "Kraft",  "C_layer")
trees_data <- trees_data %>% dplyr::select(plot_ID,  tree_ID ,  tree_inventory_status ,  multi_stem , dist_cm ,  azi_gon ,
age ,  age_meth ,  SP_code ,  Kraft , C_layer , H_dm ,  C_h_dm , D_mm ,   DBH_h_cm )
# HBI forest edges
forest_edges <- read.delim(file = here("data/input/BZE2_HBI/be_waldraender.csv"), sep = ",", dec = ".")
colnames(forest_edges) <- c("plot_ID", "e_ID", "e_type", "e_form", "A_dist", "A_azi",  "B_dist", "B_azi", "T_dist", "T_azi") # t = turning point
## REGENERATION
# this dataset contains the inventory status, position and extend of the sampling circle satelites of the regeneration inventory of the HBI (BZE2)
RG_loc_info <- read.delim(file = here("data/input/BZE2_HBI/bej.csv"), sep = ",", dec = ".", stringsAsFactors=FALSE) %>%
select(bund_nr, pk_nr, pk_richtung, pk_dist, pk_aufnahme ,pk_maxdist)
# assign column names    # bund_nr     pk_nr      pk_richtung     pk_dist     pk_aufnahme      pk_maxdist
colnames(RG_loc_info) <- c("plot_ID", "CCS_nr", "CCS_position",  "CCS_dist", "CCS_RG_inv_status", "CCS_max_dist_cm")
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
RG_data <- read.delim(file = here("data/input/BZE2_HBI/bejb.csv"), sep = ",", dec = ",")
#  "bund_nr"  "pk_nr"  "lfd_nr"   "bart"  "hoehe"    "grklasse"
colnames(RG_data) <- c("plot_ID", "CCS_nr", "tree_ID", "SP_code", "H_cm", "D_class_cm")
##DEADWOOD
# deadwood inventory info
DW_inv_info <- read.delim(file = here("data/input/BZE2_HBI/be_totholz_punkt.csv"), sep = ",", dec = ".", stringsAsFactors=FALSE)
colnames(DW_inv_info) <- c("plot_ID", "CCS_DW_inv_status",  "dist_cm", "azi")
# deadwood single item data
DW_data <- read.delim(file = here("data/input/BZE2_HBI/be_totholz_liste.csv"), sep = ",", dec = ".") %>%
select( bund_nr, lfd_nr, typ, baumgruppe, anzahl,  durchmesser, laenge, zersetzung)
#  bund_nr lfd_nr typ      baumgruppe anzahl  durchmesser laenge zersetzung
colnames(DW_data) <- c("plot_ID", "tree_ID", "dw_type", "dw_sp", "count", "d_cm", "l_dm", "decay")
# 1. data prep  --------------------------------------
# 1.1. ALL - all plots & stand components ------------------------------------------------------------------------------------------------------------------------
# create a list with the BZE plots that should be excluded -----------------
# select plots that have a "Punktstatus (x_plotstatus_bze)"
plots_to_exclude <- inv_info %>%
filter(plot_inv_status >= 21 | plot_inv_status <0) %>%
select(plot_ID)
plots_to_exclude
# 1.2.1. prepare tree data: add old data to removed trees for stock calculations later ----------------------------------------------------------------
#### this is only for post inventory data, so BZE3 it´s only here in the code to keep the scripts equal
# there may be trees that are labelled as "lost" (removed or died of but for further processing we) by their tree inventory status and by that do not have
# we still need their data from the previous inventory to calcualte their sampling circuit and assing ther species groups etc.
#  dist_cm azi_gon age age_meth SP_code Kraft C_layer H_dm C_h_dm D_mm
if(exists('trees_HBI')== TRUE){
BZE3_trees_old_data <- trees_data %>%
# selectonly trees with inventory status indicating the tree was lost or the status is unknown (eversthing other then 0 or 1)
filter(!(tree_inventory_status %in% c(0,1)))%>%
# then filter for those rows that do not contain the old data of the respective tree that was passed on from the previous inventory
# https://stackoverflow.com/questions/33520854/filtering-data-frame-based-on-na-on-multiple-columns
filter_at(vars(multi_stem:DBH_h_cm),any_vars(is.na(.))) %>%
#replace cells with NA by values from HBI for the respective plot_ID und tree_ID: https://stackoverflow.com/questions/32899580/update-rows-of-data-frame-in-r
rows_patch(trees_HBI %>%
# filter for HBI trees that have the same plot and tree ID as those trees in BZE3 with
# status != c(0, 1) and no old data passed on from HBI by semi_join
semi_join(.,
trees_data %>%
filter(!(tree_inventory_status %in% c(0,1)))%>%
filter_at(vars(multi_stem:DBH_h_cm),any_vars(is.na(.))),
by = c("plot_ID", "tree_ID")) %>%
select(-tree_inventory_status),
by = c("plot_ID", "tree_ID"))
# add trees with "removed" status for which old data was found in HBI to BZE3 trees_data
trees_data <-
trees_data %>%
# 1. remove trees that have a tree_inv_stat indicates they were lost from the trees dataset but have replacement data in
anti_join(., BZE3_trees_old_data, by = c("plot_ID", "tree_ID")) %>%
# 2. add trees that have a "tree was lost" inventory status in BZE3 but have data in: https://dplyr.tidyverse.org/reference/rows.html
rows_insert(., BZE3_trees_old_data, by = c("plot_ID", "tree_ID")) %>%
arrange(plot_ID, tree_ID)
}
exists('trees_HBI')
# 1.2.2. prepare tree data:species & inventory names -------------------------------------------------------------------------------------------------------------------------------------
trees_data <- trees_data %>%
# join in inventory info
left_join(., tree_inv_info %>% dplyr::select("plot_ID", "inv_year", "inv"), by = "plot_ID")  %>%
# join in the species names from x_bart to ensure the Dahm DBH correction function
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase")) %>%
mutate(DBH_h_cm = ifelse(is.na(DBH_h_cm), 130, DBH_h_cm),        # assign DBH measuring height of 130cm when missing
# calculate corrected BDH if measuringheight != 1.3m
DBH_cm = ifelse(DBH_h_cm == 130, as.numeric(D_mm)/10, DBH_Dahm(plot_ID, D_mm, DBH_h_cm, BWI))) %>%
# asssing corect samling circle diameter according to DBH of the tree to be able to join in the right plot area
mutate(CCS_r_m = case_when(DBH_cm >= 7  & DBH_cm < 10 ~ 5.64,
DBH_cm >= 10 & DBH_cm < 30 ~ 12.62,
DBH_cm >= 30 ~ 17.84,
TRUE ~ NA)) %>%
arrange(plot_ID, tree_ID)
# check if there are no trees left that don´t have a SP_code in xBart/ SP_names_com_ID_tapeS
SP_NAs <- trees_data %>%
anti_join(SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
if(nrow(SP_NAs) != 0){print("There are species names or codes in the trees dataset that do not match
the species names and codes listed in x_bart")}else{"all fine"}
# save trees to be removed in other dataset
trees_removed <- trees_data %>%
# trees that don´t have a species code or are outside the widest CCS
filter(is.na(SP_code) | is.na(plot_ID) | dist_cm > 1784)
trees_removed
# save trees to be removed in other dataset
trees_removed <- trees_data %>%
# trees that don´t have a species code or are outside the widest CCS
filter(is.na(SP_code) | is.na(plot_ID) | dist_cm > 1784) %>%
mutate(removal_reason = "inv_plot_status")
# remove trees without species code or plot ID from the dataset
trees_data <- trees_data %>%
# exclude those trees that don´t have a species code
filter(!(is.na(SP_code)) & !(is.na(plot_ID) ))%>%
# exclude trees outside the widest CCS
filter(dist_cm <= 1784)
# 1.2.3. forest edges dataset ---------------------------------------------
forest_edges <- forest_edges %>%
# join in inventory info
left_join(., tree_inv_info %>% dplyr::select("plot_ID", "inv_year", "inv"), by = "plot_ID") %>%
# remove plots with inv_name "waring" as they are not suitable for further processing
filter(inv != "warning")
# 1.3. REGENRATION --------------------------------------------------------
RG_data <- RG_data %>%
# join  in inventory info
left_join(., tree_inv_info %>% select(plot_ID, inv_year, inv), by = "plot_ID") %>%
arrange(plot_ID, CCS_nr, tree_ID)
RG_loc_info <- RG_loc_info %>%
# join  in inventory info
left_join(., tree_inv_info %>% select(plot_ID, inv_year, inv), by = "plot_ID") %>%
arrange(plot_ID, CCS_nr)
# 1.4. DEADWOOD -----------------------------------------------------------
DW_data <- DW_data %>%
# join in inventory info
left_join(., tree_inv_info %>% dplyr::select("plot_ID", "inv_year", "inv"),
by = "plot_ID")
# 2. data processing ------------------------------------------------------------------------------------------------------------------------------------------------------
# 2.2. LIVING TREES -------------------------------------------------------------------------------------------------------------------------------------------------------
# 2.2.1. remove not preocessable plots and sampling circuits form tree_inventory_info dataset ------------------------------------------------------------
tree_inv_info <- tree_inv_info %>%
# remove plots from dataset where non of the inventories was carried out at the NSI (BZE) inventory ("Ausfall")
anti_join(., plots_to_exclude, by = "plot_ID") %>%
# pivoting B, C: https://stackoverflow.com/questions/70700654/pivot-longer-with-names-pattern-and-pairs-of-columns
pivot_longer(., "CCS_5_inv_status":"CCS_17_inv_status", names_to = "CCS_r_m", values_to = "CCS_LT_inv_status") %>%
mutate(CCS_r_m = as.numeric(case_when(CCS_r_m == "CCS_5_inv_status" ~ 5.64,
CCS_r_m == "CCS_12_inv_status" ~ 12.62,
CCS_r_m == "CCS_17_inv_status" ~ 17.84,
TRUE~ NA))) %>%
distinct() %>%
arrange(plot_ID)
# 2.2.2. create dataset with LT CCS to remove from trees data df ------------------------------------------------------------------------------------------------------------------------------------------------------------
# remove CCS that were not inventorable from the trees df and filter NFI (BWI) plots as well
LT_CCS_to_exclude <- tree_inv_info %>% filter(!(CCS_LT_inv_status %in% c(1, 2)) | !(hbi_status %in% c(1,2)) )
LT_CCS_to_exclude
#  2.2.3. correct CCS_inv_status == 2 if necesarry -------------------------------------------------------------------------------------------------------------------------
# check if CCS_LT_inv_status is actually accurate:
# this means if there is a CCS with status 2 there shouldn´t be any tree in that circuit
tree_inv_info <- tree_inv_info %>%
# remove plots from dataset where non of the inventories was carried out at the NSI (BZE) inventory ("Ausfall")
anti_join(., plots_to_exclude, by = "plot_ID") %>%
# remove plots where one of the three sampling circuits was not inventorable (status == 3)
anti_join(., LT_CCS_to_exclude, by = c("plot_ID", "CCS_r_m", "inv_year", "inv"))
#  2.2.4. creating "empty" LT CCS for status 2 circuits -------------------------------------------------------------------------------------------------------------
#  plot_ID inv_year compartiment  B_t_ha C_t_ha  N_t_ha
# here i create a dataset with DW plots that have status 2
# which only contains info we can catually give so the plot area , the plot ID and the stocks which are set to 0
trees_stat_2 <- as.data.frame(tree_inv_info[tree_inv_info$CCS_LT_inv_status == 2, ])
trees_stat_2
#  2.2.4. creating "empty" LT CCS for status 2 circuits -------------------------------------------------------------------------------------------------------------
#  plot_ID inv_year compartiment  B_t_ha C_t_ha  N_t_ha
# here i create a dataset with DW plots that have status 2
# which only contains info we can catually give so the plot area , the plot ID and the stocks which are set to 0
trees_stat_2 <- as.data.frame(tree_inv_info[tree_inv_info$CCS_LT_inv_status == 2, ])
LT.data.stat.2.list <- vector("list", length = nrow(trees_stat_2))
for (i in 1:nrow(trees_stat_2)) {
# i = 2
my.plot.id <- trees_stat_2[, "plot_ID"][i]
my.ccs.r <- trees_stat_2[, "CCS_r_m"][i]
my.plot.area <- c_A(my.ccs.r)/10000
my.inv.year <- trees_stat_2[, "inv_year"][i]
if(nrow(trees_stat_2) != 0){
LT.staus.2.df <- as.data.frame(cbind(
plot_ID = c(my.plot.id),
CCS_r_m = c(my.ccs.r),
plot_A_ha = c(my.plot.area),
inv_year = c(my.inv.year),
compartiment = c("ag", "bg", "total"),
B_CCS_t_ha = c(0, 0, 0),
C_CCS_t_ha = c(0, 0, 0),
N_CCS_t_ha = c(0, 0, 0),
BA_CCS_m2_ha = c(0, 0, 0),
n_trees_CCS_ha = c(0, 0, 0)))}else{
LT.staus.2.df =  as.data.frame(cbind(
plot_ID = NA,
CCS_r_m = NA,
plot_A_ha = NA,
inv_year = NA,
compartiment = NA,
B_CCS_t_ha = NA,
C_CCS_t_ha = NA,
N_CCS_t_ha = NA,
BA_CCS_m2_ha = NA,
n_trees_CCS_ha = NA))
}
LT.data.stat.2.list[[i]] <- LT.staus.2.df
}
LT_data_stat_2 <- as.data.frame(rbindlist(LT.data.stat.2.list))
LT_data_stat_2
trees_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_LT_stat_2.csv")), sep = ",", dec = ".") %>%
mutate(inv = inv_name(inv_year))
trees_stat_2
# 1.2. number of speices per plot -----------------------------------------
LT_n_SP_plot <- trees_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, SP_code) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "LT")
# 1.3. number of stand per plot -------------------------------------------
LT_n_stand_P <- trees_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, stand) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_stand = n()) %>%
mutate(stand_component = "LT")
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the  national soil inventory
# HBI
# stock per hectar summarising for regeneration (RG), living trees (LT) and
# deadwood (DW)
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# livgn trees
# this dataset contains the data of the tree inventory of the HBI (BZE2), including stand and area info,  species groups and B, C, N stocks per tree
trees_data <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_4.csv")), sep = ",", dec = ".")
trees_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_LT_stat_2.csv")), sep = ",", dec = ".") %>%
mutate(inv = inv_name(inv_year))
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info,  species groups and B, C, N stocks per tree
RG_data <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_RG_update_4.csv")),sep = ",", dec = ".")
RG_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_RG_stat_2.csv")), sep = ",", dec = ".") %>%
mutate(inv = inv_name(inv_year))
# deadwood
# this dataset contains the data of the deadwood inventory of the HBI (BZE2), including info about species groups and B, C, N stocks per tree
DW_data <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_DW_update_4.csv")), sep = ",", dec = ".")
DW_stat_2 <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_DW_stat_2.csv")), sep = ",", dec = ".") %>%
mutate(inv = inv_name(inv_year))
# 1.2. number of speices per plot -----------------------------------------
LT_n_SP_plot <- trees_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, SP_code) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "LT")
# 1.3. number of stand per plot -------------------------------------------
LT_n_stand_P <- trees_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, stand) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_stand = n()) %>%
mutate(stand_component = "LT")
# 1.4. stocks per hektar ------------------------------------------------------
# 1.4.1. Plot: stocks per hektar ------------------------------------------------------
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
LT_BCNBAn_ha <- plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID)) ) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")}else{
LT_BCNBAn_ha <- trees_data %>%
group_by(plot_ID, CCS_r_m, inv, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT",
stand = "all",
SP_code = "all")
}
# 1.4.2. plot, species, stand: stocks per ha, finest summary --------------
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
LT_SP_ST_P_BCNBAn_ha <- plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
}else{
LT_SP_ST_P_BCNBAn_ha <- trees_data %>%
group_by(plot_ID, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha) %>%
distinct()%>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha)) %>%
mutate(stand_component = "LT") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
}
exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0
plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT")
view(plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))) %>%
# now we summarise all the t/ha values of the cirlces per plot
group_by(plot_ID, inv, stand, SP_code, compartiment) %>%
summarise(B_t_ha = sum(B_CCS_t_ha),
C_t_ha = sum(C_CCS_t_ha),
N_t_ha = sum(N_CCS_t_ha),
BA_m2_ha = sum(BA_CCS_m2_ha),
n_ha = sum(n_trees_CCS_ha)) %>%
mutate(stand_component = "LT"))
view(plyr::rbind.fill(trees_data  %>%
group_by(plot_ID, plot_A_ha, CCS_r_m, inv, stand, SP_code, compartiment) %>%
# convert Biomass into tons per hectar and sum it up per sampling circuit
reframe(B_CCS_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_CCS_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_CCS_t_ha = sum(ton(N_kg_tree))/plot_A_ha,
BA_CCS_m2_ha = sum(BA_m2)/plot_A_ha,
n_trees_CCS_ha = n()/plot_A_ha) %>%
distinct(),
trees_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))) )

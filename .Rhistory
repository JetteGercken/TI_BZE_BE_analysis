# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_3.csv" which contains plot area and stand data additionally to
# tree data
trees_data <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_3.csv")), sep = ";", dec = ",")
# 0.4 data preparation ---------------------------------------------------------
trees_data <- trees_data %>% mutate(H_m = as.numeric(H_m))
# 1. calculations ---------------------------------------------------------
# 1.1. biomass -----------------------------------------------------------------
# 1.1.1. biomass aboveground compartiments ---------------------------------------
bio.ag.kg.list <- vector("list", length = nrow(unique(trees_data[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_data[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees_data %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees_data[, c("plot_ID", "tree_ID")])
my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
BL.or.CF <- unique(trees_data$LH_NH[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(trees_data$tpS_ID[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
Dm = na.omit(as.list(as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))))
Hm = na.omit(as.list(as.numeric(unique(trees_data$DBH_h_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])/100)))
Ht = na.omit(as.numeric(unique(trees_data$H_m[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(trees_data$plot_ID[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(trees_data$tree_ID[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"inv" = c(trees_data$inv[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(trees_data$inv_year[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id])),
"LH_NH" = c(trees_data$LH_NH[trees_data$plot_ID == my.plot.id & trees_data$tree_ID == my.tree.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.list[[i]] <- bio.info.df
}
bio_ag_kg_df <- as.data.frame(rbindlist(bio.ag.kg.list))
# 1.1.2. biomass belowground compartiments ----------------------------------
bio.bg.kg.list <- vector("list", length = nrow(unique(trees_data[, c("plot_ID", "tree_ID")])))
for (i in 1:nrow(unique(trees_data[, c("plot_ID", "tree_ID")]))) {
# i = 60
# i = trees_data %>%  select(plot_ID, tree_ID, LH_NH) %>% distinct() %>% mutate(r_no = row_number()) %>% filter(LH_NH == "LB") %>%slice(1)%>% pull(r_no)
# basic tree info
my.plot.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"plot_ID"][i]
my.tree.id <- unique(trees_data[, c("plot_ID", "tree_ID")])[,"tree_ID"][i]
#my.inv <-  unique(trees_data[, c("plot_ID", "tree_ID")])[,"inv"][i]
BL.or.CF <- unique(trees_data$LH_NH[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
# select variales for tree object
spp = unique(trees_data$Bio_SP_group[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id])
dbh.cm = as.numeric(unique(trees_data$DBH_cm[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(trees_data$inv[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(trees_data$inv_year[trees_data$plot_ID==my.plot.id & trees_data$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.list[[i]] <- bio.info.df
}
bio_bg_kg_df <- as.data.frame(rbindlist(bio.bg.kg.list))
# 1.1.3. biomass all compartiments - total ----------------------------------
bio_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio_ag_kg_df, bio_bg_kg_df) %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio_ag_kg_df%>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"))
# 1.1.4. harmonizing biomass strings and compartiment names ---------------
#  harmonize strings of bio_total_kg_df
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
bio_total_kg_df[,c(1,2, 4, 6)] <- lapply(bio_total_kg_df[,c(1,2,4, 6)], as.numeric)
bio_ag_kg_df[,c(1,2, 4, 6)] <- lapply(bio_ag_kg_df[,c(1,2,4, 6)], as.numeric)
bio_bg_kg_df[,c(1,2, 4, 6)] <- lapply(bio_bg_kg_df[,c(1,2,4, 6)], as.numeric)
# 1.1.4. join biomass into tree dataset -----------------------------------
trees_data <- trees_data %>% left_join(.,
rbind(bio_ag_kg_df ,
bio_bg_kg_df,
bio_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N_ag_bg_kg_df <- trees_data %>%
filter(!(compartiment %in% c("ag", "total")))  %>%  # make sure the aboveground& belowground dataset doesnt include summed up compartiments like total and aboveground
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
# 1.2.2. Nitrogen ston in all compartiments summed up - total & aboveground  ----------------------------------
N_total_kg_df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N_ag_bg_kg_df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N_ag_bg_kg_df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments by exxlduing bg compartiment from N.ab.bg. dataframe
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
# 1.2.3. join Nitrogen stocks into tree dataset -----------------------------------
trees_data <- trees_data %>% left_join(.,
rbind(N_ag_bg_kg_df ,
N_total_kg_df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.3. carbon stock per tree & compartiment -------------------------------------------------------
trees_data <- trees_data %>% mutate(C_kg_tree = carbon(B_kg_tree))
# data export ---------------------------------------------------------------------------------------------
trees_update_4 <- trees_data
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
RG_data <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_update_2.csv")), sep = ";", dec = ",")
SP_names_com_ID_tapeS <- read.delim(file = here("output/out_data/x_bart_tapeS.csv"), sep = ",", dec = ",")
RG_data
# 1.1. size class to diameter ---------------------------------------------
# translate size class into diameter
RG_data <- RG_data %>%
mutate(
D_cm = sizeclass_to_d(D_class_cm),
H_m = H_cm/100) %>%
# join in species names and codes from x_bart
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
RG_above_1.3 <- RG_data[RG_data$H_m > 1.3, ]
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# create output list
bio.ag.bg.kg.RG.above.1.3 <- vector("list", length = nrow(RG_above_1.3))
for (i in 1:nrow(RG_above_1.3)) {
# i = 13
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- RG_above_1.3[,"plot_ID"][i]
my.ccs.id <- RG_above_1.3[,"CCS_no"][i]
my.tree.id <- RG_above_1.3[,"tree_ID"][i]
# select varibales for aboveground functions & calcualte aboveground biomass as input for Poorter
# nationla greenhousegas inventory function for trees below 1.3m
spp = unique(RG_above_1.3$Bio_SP_group[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_no==my.ccs.id])
h.m = as.numeric(unique(RG_above_1.3$H_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_no==my.ccs.id]))/100
d.cm = as.numeric(unique(RG_above_1.3$D_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_no==my.ccs.id]))
ag_GHGI = as.data.frame(GHGI_aB_H1.3_DBHb10( spp, d.cm))[1,]
# poorter et al. function for aboveground biomass for trees
spp_LHNH = unique(RG_above_1.3$LH_NH[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_no==my.ccs.id])
# calculate biomass per compartiment
bio.df <- as.data.frame(cbind(
"compartiment" = c("fwb", "ndl", "ag", "bg"),
# sw+ fwb compartiment:
# for conifers we have to deduct the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for broadleafed trees we don´t have to
"B_kg_tree" = c(ifelse(spp_LHNH == "NB", ag_GHGI - as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,], ag_GHGI),
# foliage "ndl"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],
# abovegorund "ag":
# for broadleafed we have to add the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for conifers trees we don´t have to
ifelse(spp_LHNH == "LB", ag_GHGI + as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],ag_GHGI),
# belowground "bg"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "bg"))[1,]
)))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"CCS_no" = c(my.ccs.id),
"tree_ID" = c(my.tree.id),
"inv" = c(RG_above_1.3[,"inv"][i]),
"inv_year" = c(RG_above_1.3[,"inv_year"][i]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.ag.bg.kg.RG.above.1.3[[i]] <- bio.info.df
}
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# create output list
bio.ag.bg.kg.RG.above.1.3 <- vector("list", length = nrow(RG_above_1.3))
for (i in 1:nrow(RG_above_1.3)) {
# i = 13
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- RG_above_1.3[,"plot_ID"][i]
my.ccs.id <- RG_above_1.3[,"CCS_nr"][i]
my.tree.id <- RG_above_1.3[,"tree_ID"][i]
# select varibales for aboveground functions & calcualte aboveground biomass as input for Poorter
# nationla greenhousegas inventory function for trees below 1.3m
spp = unique(RG_above_1.3$Bio_SP_group[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id])
h.m = as.numeric(unique(RG_above_1.3$H_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id]))/100
d.cm = as.numeric(unique(RG_above_1.3$D_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id]))
ag_GHGI = as.data.frame(GHGI_aB_H1.3_DBHb10( spp, d.cm))[1,]
# poorter et al. function for aboveground biomass for trees
spp_LHNH = unique(RG_above_1.3$LH_NH[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id])
# calculate biomass per compartiment
bio.df <- as.data.frame(cbind(
"compartiment" = c("fwb", "ndl", "ag", "bg"),
# sw+ fwb compartiment:
# for conifers we have to deduct the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for broadleafed trees we don´t have to
"B_kg_tree" = c(ifelse(spp_LHNH == "NB", ag_GHGI - as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,], ag_GHGI),
# foliage "ndl"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],
# abovegorund "ag":
# for broadleafed we have to add the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for conifers trees we don´t have to
ifelse(spp_LHNH == "LB", ag_GHGI + as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],ag_GHGI),
# belowground "bg"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "bg"))[1,]
)))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"CCS_nr" = c(my.ccs.id),
"tree_ID" = c(my.tree.id),
"inv" = c(RG_above_1.3[,"inv"][i]),
"inv_year" = c(RG_above_1.3[,"inv_year"][i]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.ag.bg.kg.RG.above.1.3[[i]] <- bio.info.df
}
bio.ag.bg.kg.RG.above.1.3.df <- as.data.frame(rbindlist(bio.ag.bg.kg.RG.above.1.3))
bio.ag.bg.kg.RG.above.1.3.df[,c(1,2, 3, 5,7)] <- lapply(bio.ag.bg.kg.RG.above.1.3.df[,c(1,2, 3, 5,7)], as.numeric)
# 1.2.1.3. total and total aboveground biomass for RG trees height > 1.3m -------------------------------
bio.total.kg.RG.above.1.3.df <-
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
bio.ag.bg.kg.RG.above.1.3.df%>%
filter(compartiment %in% c("ag", "bg")) %>%
group_by(plot_ID, CCS_nr, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID","CCS_nr", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree")
# 1.2.2. biomass for RG trees height < 1.3m -------------------------------
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# 1.2.1.1.1. GHGI aboveground biomass for RG trees height > 1.3m -------------------------------
bio.ag.kg.RG.below.1.3.df <- RG_data %>%
filter(H_m <= 1.3) %>%
mutate(compartiment = "ag") %>%
mutate(B_kg_tree = (GHGI_aB_Hb1.3(LH_NH, H_m))) %>%
select("plot_ID","CCS_nr", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree")
# 1.2.3. join RG biomass for trees <1.3m and >1.3m height  ----------------
RG_data <- RG_data %>% left_join(., rbind(
bio.ag.bg.kg.RG.above.1.3.df,
bio.total.kg.RG.above.1.3.df,
bio.ag.kg.RG.below.1.3.df),
by = c("plot_ID", "CCS_nr", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.3 Nitrogen stock ------------------------------------------------------
# 1.3.1. Nitrogen stock for aboveground  & belowgrowground ---------------------------------
N_ag_bg_kg_comps_df <- RG_data %>%
filter(H_m <= 1.3 & compartiment %in% c("ag") |
H_m > 1.3 & !(compartiment %in% c("ag", "total"))) %>%
# calcualte nitrogen content for RG items with comppartiments "ndl", "fwb", "bg"
mutate(N_kg_tree = case_when(H_m > 1.3 & !(compartiment %in% c("ag", "total")) ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment),
# small trees are treated as "fwb" compartiment tho their only available compartiment is "ag" which is treated as "fwb"
H_m <= 1.3 & compartiment == "ag" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, "fwb"),
TRUE ~ NA)) %>%
select("plot_ID","CCS_nr", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree")
# 1.3.2. total Nitrogen stock ---------------------------------------------------------------
N_total_kg_df <-
# total N_stock in kg
rbind(N_ag_bg_kg_comps_df %>%
# filter for trees with 1.3m height or more because those are the only trees that´ll have compartiments
semi_join(RG_data %>% filter(H_m > 1.3), by = c("plot_ID","CCS_nr", "tree_ID", "inv", "inv_year")) %>%
# select compartiments "ndl", "fwb",  and add them together
filter(!(compartiment %in% c("ag", "bg", "total"))) %>%
group_by(plot_ID, CCS_nr, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag") %>%
select("plot_ID","CCS_nr", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# total N_stock in kg
N_ag_bg_kg_comps_df %>%
# filter for trees with 1.3m height or more because those are the only trees that´ll have compartiments
semi_join(RG_data %>% filter(H_m > 1.3), by = c("plot_ID","CCS_nr", "tree_ID", "inv", "inv_year")) %>%
# select compartiments "ndl", "fwb", "bg" and add them together
filter(!(compartiment %in% c("ag", "total"))) %>%
group_by(plot_ID, CCS_nr, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID","CCS_nr", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree")) %>%
arrange(plot_ID, CCS_nr, tree_ID)
# 1.3.3. join RG nitrogen stock for trees <1.3m and >1.3m height  ----------------
RG_data <- RG_data %>% left_join(., rbind(
N_ag_bg_kg_comps_df,
N_total_kg_df),
by = c("plot_ID", "CCS_nr", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.4. Carbon stock -------------------------------------------------------
RG_data <- RG_data %>% mutate(C_kg_tree = B_kg_tree*0.5)
# 2. data export ----------------------------------------------------------
RG_update_4 <- RG_data
# HBI dataset including estimated heights (use write.csv2 to make ";" as separator between columns)
write.csv2(RG_update_4, paste0(out.path.BZE3, paste(unique(RG_update_4$inv)[1], "RG_update_4", sep = "_"), ".csv"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# HBI BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here one should immport the the dataset called HBI_trees_update_01.csv which includes only trees that are already sortet according to their inventory status (Baumkennzahl)
trees_data <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_0.csv")), sep = ";", dec = ",")
# HBI BE locations dataset: this dataset contains the coordinates of the center point of the tree inventory accompanying the second national soil inventory
HBI_loc <- read.delim(file = here("data/input/BZE2_HBI/location_HBI.csv"), sep = ";", dec = ",")
# HBI point info
HBI_inv_info <- read.delim(file =  here(paste0(out.path.BZE3, "HBI_inv_info.csv")), sep = ",", dec = ",")
# HBI forest edges (Waldränder) info
HBI_forest_edges <- read.delim(file = here("data/input/BZE2_HBI/be_waldraender.csv"), sep = ";", dec = ",")
# ----- 0.6 harmonising column names & structure  -------------------------
# HBI locations
HBI_loc <- HBI_loc %>% dplyr::select(c("ï..ToTraktId", "ToEckId", "K2_RW",
"K2_HW", "K3_RW", "K3_HW", "RW_MED",
"HW_MED",  "LAT_MED",  "LON_MED",
"LAT_MEAN", "LON_MEAN"))
colnames(HBI_loc) <- c("plot_ID", "ToEckId", "K2_RW",
"K2_HW", "K3_RW", "K3_HW", "RW_MED",
"HW_MED",  "LAT_MED",  "LON_MED",
"LAT_MEAN", "LON_MEAN")
# Forest edges
colnames(HBI_forest_edges) <- c("plot_ID", "e_ID", "e_type", "e_form",
"A_dist", "A_azi",  "B_dist", "B_azi",
"T_dist", "T_azi") # t = turning point
# ----- 1.1.2.1. join in edge info to tree dataset ------------------------
# ----- 1.1.2.1.1. HBI join in forest edge info per plot -----------------------------------------------
trees_data <- trees_data %>%
# calculate the coordinates of every tree
mutate(dist_m = dist_cm/100,
X_tree = coord(data_circle$x0[1], data_circle$y0[1], dist_m, azi_gon, coordinate = "x"),
Y_tree = coord(data_circle$x0[1], data_circle$y0[1], dist_m, azi_gon, coordinate = "y")) %>%
# join in the forest edge information per plot
left_join(., HBI_forest_edges %>%
select(plot_ID, e_ID, e_type, e_form),
by = "plot_ID",
multiple = "all") # this is necesarry since there are, apperently, multiple edges per plot
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
RG_data <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_update_2.csv")), sep = ";", dec = ",")
SP_names_com_ID_tapeS <- read.delim(file = here("output/out_data/x_bart_tapeS.csv"), sep = ",", dec = ",")
# 1.1. size class to diameter ---------------------------------------------
# translate size class into diameter
RG_data <- RG_data %>%
mutate(
D_cm = sizeclass_to_d(D_class_cm),
H_m = H_cm/100) %>%
# join in species names and codes from x_bart
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
RG_above_1.3 <- RG_data[RG_data$H_m > 1.3, ]
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# create output list
bio.ag.bg.kg.RG.above.1.3 <- vector("list", length = nrow(RG_above_1.3))
for (i in 1:nrow(RG_above_1.3)) {
# i = 13
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- RG_above_1.3[,"plot_ID"][i]
my.ccs.id <- RG_above_1.3[,"CCS_nr"][i]
my.tree.id <- RG_above_1.3[,"tree_ID"][i]
# select varibales for aboveground functions & calcualte aboveground biomass as input for Poorter
# nationla greenhousegas inventory function for trees below 1.3m
spp = unique(RG_above_1.3$Bio_SP_group[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id])
h.m = as.numeric(unique(RG_above_1.3$H_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id]))/100
d.cm = as.numeric(unique(RG_above_1.3$D_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id]))
ag_GHGI = as.data.frame(GHGI_aB_H1.3_DBHb10( spp, d.cm))[1,]
# poorter et al. function for aboveground biomass for trees
spp_LHNH = unique(RG_above_1.3$LH_NH[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id])
# calculate biomass per compartiment
bio.df <- as.data.frame(cbind(
"compartiment" = c("fwb", "ndl", "ag", "bg"),
# sw+ fwb compartiment:
# for conifers we have to deduct the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for broadleafed trees we don´t have to
"B_kg_tree" = c(ifelse(spp_LHNH == "NB", ag_GHGI - as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,], ag_GHGI),
# foliage "ndl"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],
# abovegorund "ag":
# for broadleafed we have to add the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for conifers trees we don´t have to
ifelse(spp_LHNH == "LB", ag_GHGI + as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],ag_GHGI),
# belowground "bg"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "bg"))[1,]
)))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"CCS_nr" = c(my.ccs.id),
"tree_ID" = c(my.tree.id),
"inv" = c(RG_above_1.3[,"inv"][i]),
"inv_year" = c(RG_above_1.3[,"inv_year"][i]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.ag.bg.kg.RG.above.1.3[[i]] <- bio.info.df
}
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
RG_above_1.3 <- RG_data[RG_data$H_m > 1.3, ]
RG_above_1.3
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# create output list
bio.ag.bg.kg.RG.above.1.3 <- vector("list", length = nrow(RG_above_1.3))
i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- RG_above_1.3[,"plot_ID"][i]
my.ccs.id <- RG_above_1.3[,"CCS_nr"][i]
my.tree.id <- RG_above_1.3[,"tree_ID"][i]
# select varibales for aboveground functions & calcualte aboveground biomass as input for Poorter
# nationla greenhousegas inventory function for trees below 1.3m
spp = unique(RG_above_1.3$Bio_SP_group[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id])
h.m = as.numeric(unique(RG_above_1.3$H_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id]))/100
d.cm = as.numeric(unique(RG_above_1.3$D_cm[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id]))
ag_GHGI = as.data.frame(GHGI_aB_H1.3_DBHb10( spp, d.cm))[1,]
# poorter et al. function for aboveground biomass for trees
spp_LHNH = unique(RG_above_1.3$LH_NH[RG_above_1.3$plot_ID==my.plot.id & RG_above_1.3$tree_ID==my.tree.id & RG_above_1.3$CCS_nr==my.ccs.id])
# calculate biomass per compartiment
bio.df <- as.data.frame(cbind(
"compartiment" = c("fwb", "ndl", "ag", "bg"),
# sw+ fwb compartiment:
# for conifers we have to deduct the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for broadleafed trees we don´t have to
"B_kg_tree" = c(ifelse(spp_LHNH == "NB", ag_GHGI - as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,], ag_GHGI),
# foliage "ndl"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],
# abovegorund "ag":
# for broadleafed we have to add the leaf biomass estimated by poorter because it is included in the aboveground biomass
# for conifers trees we don´t have to
ifelse(spp_LHNH == "LB", ag_GHGI + as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "foliage"))[1,],ag_GHGI),
# belowground "bg"
as.data.frame(Poorter_rg_RSR_RLR(ag_GHGI, spp_LHNH, compartiment = "bg"))[1,]
)))
bio.df
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"CCS_nr" = c(my.ccs.id),
"tree_ID" = c(my.tree.id),
"inv" = c(RG_above_1.3[,"inv"][i]),
"inv_year" = c(RG_above_1.3[,"inv_year"][i]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.info.df
print(my.plot.id, my.tree.id)
print(paste(my.plot.id, my.tree.id))
print(paste(my.plot.id, ",", my.tree.id))
nrow(RG_above_1.3)
RG_data
RG_data %>% left_join(.,HBI_RG_loc_update_2 %>%
select(plot_ID, CCS_nr, stand, area_m2),
by = c("plot_ID", "CCS_nr"),
multiple = "all")

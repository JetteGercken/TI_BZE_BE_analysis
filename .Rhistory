"ES", "BI", "ES", "ES", "BI", "BI", "BI", "BI", "BI", "VB", "BI",
"ES", "ES", "ES", "BI", "ES", "BI", "VB", "KI", "EI", "BI", "BI",
"BI", "ES", "BI", "BI", "BI", "EI", "BI", "BI", "EI", "BI", "BI",
"BI", "BI", "BI", "BI", "FI", "FI", "FI", "FI", "FI", "KI", "FI",
"KI", "KI", "FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI",
"FI", "FI", "FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI",
"FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI", "BAH",
"BAH", "BI", "BI", "BI", "BI", "BI", "BU", "BI", "BI", "BI",
"FI", "FI", "FI", "FI", "FI", "BI", "BI", "ES", "ES", "BI", "BU",
"ES", "ES", "BI", "BI", "BI", "ES", "ES", "EI", "EI", "EI", "EI",
"EI", "EI", "EI", "EI", "EI", "EI", "EI", "BI", "BI", "BI", "BI",
"BI", "BI", "BI", "BI", "BI", "BI", "BI", "FKD", "FKD", "BI",
"BI", "BI", "BI", "EI", "FI", "FI", "FI", "FI", "FI", "FI", "FI",
"KI", "KI", "KI", "KI", "KI", "KI", "KI", "KI", "FI", "EI", "EI",
"EI", "EI", "EI", "EI", "EI", "EI", "EI", "BAH", "BAH", "BAH",
"BAH", "BI", "BI", "BI", "ES", "BI", "BI", "BI", "BI", "BI",
"BI", "KI", "KI", "ES", "BI", "BI", "BI", "BI", "EI", "BI", "BI",
"BI", "VB", "BI", "BI", "ES", "FI", "ES", "ES")),
class = "data.frame",
row.names = c(NA, -232L)))}else{
print("SP_names_com_ID_tapeS already exists")
}
# 2.2. Nitrogen content --------------------------------------------------------------------------------------------------------
# 2.2.1. Nitrogen content wood ------------------------------------------------------------------------------------------
# this is the result of a dput of N_con_w( nitrogen content in woody compartiments Rumpf et al. 2018), state now: 11.12.2023, 11:54
# dput(N_con_w)
if(!exists('N_con_w')){
N_con_w <- as.data.frame(
structure(list(X = 1:48, SP_com = c("BU_stw", "BU_stwb", "BU_sw",
"BU_swb", "BU_fw", "EI_stw", "EI_stwb", "EI_sw", "EI_swb", "EI_fw",
"ES_stw", "ES_stwb", "ES_sw", "ES_swb", "ES_fw", "AH_stw", "AH_stwb",
"AH_sw", "AH_swb", "AH_fw", "BI_stw", "BI_stwb", "BI_sw", "BI_swb",
"BI_fw", "ERL_stw", "ERL_stwb", "ERL_sw", "ERL_swb", "ERL_fw",
"FI_stw", "FI_stwb", "FI_sw", "FI_swb", "FI_fw", "FI_f", "KI_stw",
"KI_stwb", "KI_sw", "KI_swb", "KI_fw", "KI_f", "DGL_stw", "DGL_stwb",
"DGL_sw", "DGL_swb", "DGL_fw", "DGL_f"),
SP_BWI = c("BU", "BU","BU", "BU", "BU", "EI", "EI", "EI", "EI", "EI", "ES", "ES", "ES",
"ES", "ES", "AH", "AH", "AH", "AH", "AH", "BI", "BI", "BI", "BI",
"BI", "ERL", "ERL", "ERL", "ERL", "ERL", "FI", "FI", "FI", "FI",
"FI", "FI", "KI", "KI", "KI", "KI", "KI", "KI", "DGL", "DGL",
"DGL", "DGL", "DGL", "DGL"),
compartiment = c("stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw",
"sb", "fwb", "stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw",
"sb", "fwb", "stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw",
"sb", "fwb", "ndl", "stw", "stb", "sw", "sb", "fwb", "ndl", "stw",
"stb", "sw", "sb", "fwb", "ndl"),
N_mean_gkg = c("1.335", "7.227", "1.335", "7.227", "4.601", "1.752", "6.507", "1.752", "6.507",
"6.209", "1.438", "5.348", "1.438", "5.348", "3.721", "1.465",
"7.729", "1.465", "7.729", "4.278", "1.828", "6.131", "1.828",
"6.131", "6.057", "2.475", "11.028", "2.475", "11.028", "7.214",
"0.812", "4.84", "0.812", "4.84", "4.343", "12.978", "0.794",
"4.339", "0.794", "4.339", "4.058", "15.201", "0.701", "3.91",
"0.701", "3.91", "4.203", "15.166"),
reference = c("Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018"),
N_con = c("0.001335", "0.007227", "0.001335", "0.007227", "0.004601", "0.001752", "0.006507",
"0.001752", "0.006507", "0.006209", "0.001438", "0.005348", "0.001438",
"0.005348", "0.003721", "0.001465", "0.007729", "0.001465", "0.007729",
"0.004278", "0.001828", "0.006131", "0.001828", "0.006131", "0.006057",
"0.002475", "0.011028", "0.002475", "0.011028", "0.007214", "0.000812",
"0.00484", "0.000812", "0.00484", "0.004343", "0.012978", "0.000794",
"0.004339", "0.000794", "0.004339", "0.004058", "0.015201", "0.000701",
"0.00391", "0.000701", "0.00391", "0.004203", "0.015166")),
class = "data.frame",
row.names = c(NA, -48L)))}else{
print("N_con_w already exists")
}
# 2.2.2. Nitrogen content foliage -----------------------------------------
# this is the result of a dput of N_con_f (nitrogen content in foliage), state now: 11.12.2023, 11:54
#dput(N_con_f)
if(!exists('N_con_f')){N_con_f <- as.data.frame(
structure(list(X = 1:6, name = c("Birke", "Erle", "Gewoehnliche Fichte","Gewoehnliche Kiefer", "LB", "NB"),
N_f_SP_group_MoMoK = c("BI", "ERL", "FI", "KI", "aLB", "aNB"),
compartiment = c("ndl", "ndl", "ndl", "ndl", "ndl", "ndl"),
SP_com = c("BI_f", "ERL_f", "FI_f", "KI_f", "aLB_f", "aNB_f"),
LH_NH = c("LB", "LB", "NB", "NB",  "LB", "NB"),
N_mean_gkg = c("27.9538461538462", "27.2095238095238", "14.1362851664451", "17.0535167934124", "27.581684981685", "15.5949009799288"),
N_con = c("0.0279538461538462", "0.0272095238095238", "0.0141362851664451", "0.0170535167934124", "0.027581684981685", "0.0155949009799288")),
class = "data.frame",
row.names = c(NA, -6L)))}else{
print("N_con_f already exists")
}
# 2.3. DBH transformation -------------------------------------------------
# 2.3.1. DBH region -------------------------------------------------------
# this is the output of a dput of DBH_region which is called neu_x_ld.csv in the BZE database, state now: 11.12.2023, 11:54
# dput(DBH_region)
if(!exists('DBH_region')){
DBH_region <- as.data.frame(
structure(list(icode_reg = c(-9L, -2L, -1L, 1L, 2L, 3L, 4L, 5L,6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 20L),
reg_shortG = c("fehlt",  "nicht ausgepr채gt", "nicht erhoben", "SH", "HH", "NI", "HB",
"NW", "HE", "RP", "BW", "BY", "SL", "BE", "BB", "MV", "SN", "ST",  "TH", "TD"),
reg_longG = c("Merkmal vergessen, nicht rekonstruierbar oder unbekannt", "Merkmal nicht ausgepr채gt/nicht vorhanden",
"Merkmal nicht erhoben", "Schleswig-Holstein", "Hansestadt Hamburg", "Niedersachsen",
"Hansestadt Bremen", "Nordrhein-Westfalen", "Hessen", "Rheinland-Pfalz",
"Baden-W체rttemberg", "Bayern", "Saarland", "Berlin", "Brandenburg",
"Mecklenburg-Vorpommern", "Sachsen", "Sachsen-Anhalt", "Th체ringen",  "Testdaten"),
country = c(-9L, -2L, -1L, 1L, 1L, 3L, 3L, 5L,6L, 7L, 8L, 9L, 10L, 12L, 12L, 13L, 14L, 15L, 16L, 20L),
region = c(-2L, -2L, -2L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, -2L)),
class = "data.frame",
row.names = c(NA, -20L)))}else{
print("DBH_region already exists")
}
# 2.3.2. DBH_tangenz ------------------------------------------------------
# this is the output of a dput of DBH_region which is called neu_x_ld.csv in the BZE database, state now: 11.12.2023, 11:54
#dput(DBH_tan)
if(!exists('DBH_tan')){
DBH_tan <- as.data.frame(
structure(list(SP_BWI1 = c("AH", "AH", "AH", "BAH", "BAH", "BAH",
"BI", "BI", "BI", "BLB", "BLB", "BLB", "BPA", "BPA", "BPA", "BU",
"BU", "BU", "DGL", "DGL", "DGL", "EI", "EI", "EI", "EIB", "EIB",
"EIB", "EL", "EL", "EL", "ELA", "ELA", "ELA", "ERL", "ERL", "ERL",
"ES", "ES", "ES", "FAH", "FAH", "FAH", "FI", "FI", "FI", "HBU",
"HBU", "HBU", "JLA", "JLA", "JLA", "KA", "KA", "KA", "KI", "KI",
"KI", "KIR", "KIR", "KIR", "KTA", "KTA", "KTA", "LAE", "LAE",
"LAE", "LB", "LB", "LB", "LI", "LI", "LI", "NB", "NB", "NB",
"PA", "PA", "PA", "REI", "REI", "REI", "ROB", "ROB", "ROB", "SAH",
"SAH", "SAH", "SFI", "SFI", "SFI", "SKI", "SKI", "SKI", "SLB",
"SLB", "SLB", "SNB", "SNB", "SNB", "TA", "TA", "TA", "THU", "THU",
"THU", "TSU", "TSU", "TSU", "UL", "UL", "UL", "VB", "VB", "VB",
"WEI", "WEI", "WEI", "WEY", "WEY", "WEY"),
region = c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L,
1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L,
2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L,
1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L,
2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L,
1L, 2L, 3L, 1L, 2L, 3L),
tangenz = c(40, 45.6, 44.5, 40, 45.6, 44.5, 41.1, 42, 45.5, 37, 42.2, 40, 38.8, 40, 43.7, 43.8, 44.3,
48.3, 52.5, 45.9, 52.4, 35.6, 42.9, 43.9, 38.8, 63.5, 46.7, 26.5,
26.5, 30.4, 60.8, 55.6, 67, 45, 44.8, 46.3, 40.1, 37.9, 46.7,
24.3, 24.3, 32.5, 54, 54, 63.8, 35.6, 37.3, 35.4, 60.8, 55.6,
67, 26, 36.4, 36.2, 52.8, 54, 60, 45.2, 29.8, 38.9, 48, 43.3,
49.3, 60.8, 55.6, 67, 37, 33.2, 33.5, 26.7, 43, 37.9, 38.8, 63.5,
46.7, 38.8, 40, 43.7, 35.6, 42.9, 43.9, 30, 36.3, 36.5, 40, 45.6,
44.5, 50.3, 45.2, 70.7, 40, 46.9, 52.8, 37, 33.2, 33.5, 38.8,
63.5, 46.7, 49.5, 61.8, 62, 31.7, 31.7, 48, 43.2, 43.2, 43.2,
26, 21.9, 26.5, 42, 34.2, 36.6, 30, 30, 31.7, 50.7, 65.5, 59.6),
icode = c(901L, 901L, 901L, 902L, 902L, 902L, 903L, 903L,
903L, 904L, 904L, 904L, 905L, 905L, 905L, 906L, 906L, 906L, 907L,
907L, 907L, 908L, 908L, 908L, 94L, 94L, 94L, 909L, 909L, 909L,
910L, 910L, 910L, 911L, 911L, 911L, 912L, 912L, 912L, 913L, 913L,
913L, 914L, 914L, 914L, 915L, 915L, 915L, 916L, 916L, 916L, 917L,
917L, 917L, 918L, 918L, 918L, 919L, 919L, 919L, 920L, 920L, 920L,
921L, 921L, 921L, 929L, 929L, 929L, 922L, 922L, 922L, 930L, 930L,
930L, 923L, 923L, 923L, 924L, 924L, 924L, 925L, 925L, 925L, 926L,
926L, 926L, 927L, 927L, 927L, 928L, 928L, 928L, 929L, 929L, 929L,
930L, 930L, 930L, 931L, 931L, 931L, 932L, 932L, 932L, 933L, 933L,
933L, 934L, 934L, 934L, 935L, 935L, 935L, 936L, 936L, 936L, 937L,
937L, 937L)),
class = "data.frame",
row.names = c(NA, -120L)))}else{
print("DBH_tan already exists")
}
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# 0.3. data import --------------------------------------------------------
# BZE3
# living trees
BZE3_trees <- read.delim(file = here(paste0(out.path.BZE3, "BZE3_LT_update_4.csv")), sep = ";", dec = ",")
BZE3_LT_summary <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# regeneration
# this dataset contains single plant data of regeneration inventory of BZE3
BZE3_RG <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_RG_update_4.csv")), sep = ";", dec = ",")
# this dataset contains regeneration data summarized per hectar BZE3
BZE3_RG_summary <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_RG_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# deadwood
# this dataset contains single plant data of deadwood inventory of HBI
BZE3_DW <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_DW_update_4.csv")), sep = ";", dec = ",")
# this dataset contains deadwood data summarized per hectar HBI
BZE3_DW_summary <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# all LT, RG, DW summmaries together and total plot stock bze3
BZE3_summary <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_LT_RG_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
#FSI
BZE3_FSI <- read.delim(file = here(paste0(out.path.BZE3, BZE3_trees$inv[1], "_FSI.csv")), sep = ";", dec = ",")
# HBI Data
# living trees
HBI_trees <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_update_4.csv")), sep = ";", dec = ",")
HBI_LT_summary <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# regeneration
# this dataset contains single plant data of regeneration inventory of HBI
HBI_RG <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_RG_update_4.csv")), sep = ";", dec = ",")
# this dataset contains regeneration data summarized per hectar HBI
HBI_RG_summary <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_RG_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# deadwood
# this dataset contains single plant data of deadwood inventory of HBI
HBI_DW <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_DW_update_4.csv")), sep = ";", dec = ",")
# this dataset contains deadwood data summarized per hectar HBI
HBI_DW_summary <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# all LT, RG, DW summmaries together and total plot stock HBI
HBI_summary <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_LT_RG_DW_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
# FSI
HBI_FSI <- read.delim(file = here(paste0(out.path.BZE3, HBI_trees$inv[1], "_FSI.csv")), sep = ";", dec = ",")
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, stand, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
distinct() %>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, stand, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code"),
multiple = "all") %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
BZE3_trees[,261]
BZE3_trees[261,]
HBI_trees %>% filter(plot_ID == 140038, stand == "A", tree_ID == 13)
HBI_trees %>% filter(plot_ID == 140038 & stand == "A" & tree_ID == 13 & compartiment == "ag")
left_join(BZE3_trees[261,],
HBI_trees %>% filter(plot_ID == 140038 & stand == "A" & tree_ID == 13 & compartiment == "ag"),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code"))
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, stand, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
distinct() %>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, stand, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code"),
multiple = "all") %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
# 1.2. grouping growth ------------------------------------------------------------------
dbh_growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"))
# 1.3. changes in BA composition -------------------------------------------
# select all possible tree species per plot
BA_changes_SP_P <- rbind(BZE3_trees %>% select(plot_ID, SP_code) %>% distinct(),
HBI_trees %>% select(plot_ID, SP_code) %>% distinct()) %>%
distinct() %>%
arrange(plot_ID) %>%
left_join(., BZE3_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all") %>%
# select the BA percent
select(plot_ID, SP_code, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_BZE3 = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code")) %>%
left_join(., HBI_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all") %>%
# select the BA percent
select(plot_ID, SP_code, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_HBI = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code")) %>%
# here we have to set the BA_percent that do not appear in the respective inventory to 0
mutate(BA_percent_BZE3 = ifelse(is.na(BA_percent_BZE3), 0, BA_percent_BZE3),
BA_percent_HBI = ifelse(is.na(BA_percent_HBI), 0, BA_percent_HBI),
BA_percent_diff = BA_percent_BZE3-BA_percent_HBI,
stand = "all")
# 1.4. changes in stocks per ha --------------------------------------------
trees_stock_changes_P <-
BZE3_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)) %>%
left_join(., HBI_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)),
by = c("stand_component", "stand_type" ,"plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") | contains("n_SP") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all", 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(trees_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(trees_stock_changes_P), value=TRUE)
trees_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- trees_stock_changes_P[, post_vars] - trees_stock_changes_P[, pre_vars]
trees_stock_changes_P <- trees_stock_changes_P %>% arrange(plot_ID, stand, SP_code, compartiment)
LT_changes <- dbh_growth_summary %>%
left_join(.,
trees_stock_changes_P %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "SP_code"),
multiple = "all") %>%  # multiple = "all" for compartiments, which is not represented in dbh growth
left_join(BA_changes_SP_P %>%
select(plot_ID, stand, SP_code, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "SP_code") ) %>%
mutate(stand_component = "LT")
# 2. REGENERATION CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
RG_stock_changes_P <-
BZE3_RG_summary %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)) %>%
left_join(., HBI_RG_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)),
by = c("stand_component", "plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") | contains("n_SP") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all" |
is.na(.x) &
plot_ID != "all"&
is.na(stand) &
SP_code == "all" , 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(RG_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(RG_stock_changes_P), value=TRUE)
RG_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- RG_stock_changes_P[, post_vars] - RG_stock_changes_P[, pre_vars]
RG_stock_changes_P <- RG_stock_changes_P %>% arrange(plot_ID, stand, SP_code, compartiment)
RG_changes <- RG_stock_changes_P
# 2. DEADWOOD CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "inv", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID","inv", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ . %in% "all"),
0, .x)) ) %>%
arrange(plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(DW_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(DW_stock_changes_P), value=TRUE)
DW_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- DW_stock_changes_P[, post_vars] - DW_stock_changes_P[, pre_vars]
DW_stock_changes_P <- DW_stock_changes_P %>% arrange(plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay, compartiment)
DW_changes <- DW_stock_changes_P
# ----- 0.2. require   ---------------------------------------------------------
# datamanagement
require(usethis)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
require(here)
require(readr)
require(tidyverse)
require(tibble)
require(dplyr)
require(data.table)
require(broom)
require(purrr)
require(remotes)
require(devtools)
library(RODBC)
library(rstudioapi)
library(gsubfn)
#require(plyr)
# laTex
require(stargazer)  #for compatability with Latex
require(tikzDevice) #for compatability with Latex
# visualisation
require(ggthemes)
require(ggplot2)
require(reshape2) #for multiple y values
require(ggforce) #for zooming in parts of the plot
require(ggrepel)
require(gridExtra)
options(tz="CA")
# analysis
require(corrplot)
require(AICcmodavg)
require(ggcorrplot)
# forest related
require(forestmangr)
require(rBDAT)
require(TapeR)
if (! require("remotes"))
install.packages("remotes")
require(remotes)
#devtools::install_gitlab("vochr/TapeS", build_vignettes = TRUE)
#remotes::install_gitlab("vochr/TapeS", build_vignettes = TRUE)
require(TapeS)
require(magrittr)
require(sjmisc)
require(ggforce)                      # Load ggforce package
# spatial
require(sf)
require(rgdal)
# require(rgdal)
require(terra)
require(sfheaders)
# ----- 0.3. working directory -------------------------------------------------
here::here()
# ----- 0.4.1. diameter correction Dahm parameters ------------------------
# change region sheet to x_ld_neu aus code tables
DBH_region <- read.delim(file = here("data/input/general/neu_x_ld.csv"), sep = ";", dec = ",")
DBH_region <- DBH_region %>% dplyr::select(ICode, KurzD,  LangD, bl, region)
colnames(DBH_region) <- c("icode_reg", "reg_shortG", "reg_longG","country",  "region")
# change tangenz csv to neu_k_tangens from code tabellen in
DBH_tan <- read.delim(file = here("data/input/general/neu_k_tangenz.csv"), sep = ";", dec = ",")
DBH_tan <- DBH_tan %>% dplyr::select( ba_bwi, region, tangenz, Icode)
colnames(DBH_tan) <- c("SP_BWI1",  "region", "tangenz", "icode")

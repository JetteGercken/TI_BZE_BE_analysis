Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(HBW_DW_whole$l_dm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id]))/10) # lenth in meter m
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb"))
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass
bio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == TRUE], component = comp)) %>%
pivot_longer(cols = stw:fwb,
names_to = "compartiment",
values_to = "B_kg_tree") %>%
# apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(B_kg_tree = rdB_DW(B_kg_tree, my.decay.type, my.dw.spec))
# create export dataframe
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(HBW_DW_whole$plot_ID[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id])),
"tree_ID" = c(as.integer(HBW_DW_whole$tree_ID[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id])),
"inv" = c(HBW_DW_whole$inv[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBW_DW_whole$inv_year[HBW_DW_whole$plot_ID == my.plot.id & HBW_DW_whole$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
))
bio.dw.whole.kg.list[[i]] <- bio.info.df
}
bio_dw_whole_kg.df <- as.data.frame(rbindlist(bio.dw.whole.kg.list))
# sum up deadwood ag compartiments
bio_dw_whole_ag_kg.df <- bio_dw_whole_kg.df %>%
select(-compartiment) %>%
mutate(compartiment = "ag") %>%
group_by(plot_ID, tree_ID, inv, inv_year, compartiment) %>%
summarise(B_kg_tree = sum(as.numeric(B_kg_tree)))
# 1.3.2. biomass broken deadwood trees (bruchst√ºcke, 3) ------------------------------------------------------------------------
# for broken deadwood trees above 1.3 m all compartiments except foliage ("ndl" ) are calculated via TapeS
# export list for biomasse
HBI_DW_broken <- HBI_DW[HBI_DW$dw_type == 3, ]
bio.dw.broken.kg.list <- vector("list", length = nrow(HBI_DW_broken))
for (i in 1:nrow(HBI_DW_broken)){
# i = 1
# select general info about the DW item
my.plot.id <- HBI_DW_broken[,"plot_ID"][i]
my.tree.id <- HBW_DW_broken[,"tree_ID"][i]
my.decay.type <- HBI_DW_broken[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_broken[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_broken$tpS_ID[HBI_DW_broken$plot_ID==my.plot.id & HBI_DW_broken$tree_ID==my.tree.id])))
Dm = na.omit(as.list(as.numeric(unique(HBI_DW_broken$d_cm[HBI_DW_broken$plot_ID==my.plot.id & HBI_DW_broken$tree_ID==my.tree.id])))) # diameter in cm
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(HBI_DW_broken$l_dm[HBI_DW_broken$plot_ID==my.plot.id & HBI_DW_broken$tree_ID==my.tree.id]))/10) # lenth in meter m
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# create the deimitation of the stem section we want TapeS to caluculate the volume for
A <- 0 # lower limit
B <- Ht # upper limit = lenght
# calcualte volume for stem segment 0 to length
bio.df <- as.data.frame(cbind(
"vol_m3" = c((tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = TRUE, AB = list(A = A, B = B), iAB = "H") - tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = FALSE, AB = list(A = A, B = B), iAB = "H")),
(tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = FALSE, AB = list(A = A, B = B), iAB = "H")),
(tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = TRUE, AB = list(A = A, B = B), iAB = "H"))),
"compartiment" = c("sb", "sw", "ag"))) %>%
# calculate biomass
mutate(B_kg_tree = B_DW(as.numeric(vol_m3), my.decay.type, my.dw.spec))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(HBI_DW_broken$inv[HBI_DW_broken$plot_ID == my.plot.id & HBI_DW_broken$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBI_DW_broken$inv_year[HBI_DW_broken$plot_ID == my.plot.id & HBI_DW_broken$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.dw.broken.kg.list[[i]] <- bio.info.df
}
for (i in 1:nrow(HBI_DW_broken)){
# i = 1
# select general info about the DW item
my.plot.id <- HBI_DW_broken[,"plot_ID"][i]
my.tree.id <- HBI_DW_broken[,"tree_ID"][i]
my.decay.type <- HBI_DW_broken[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_broken[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_broken$tpS_ID[HBI_DW_broken$plot_ID==my.plot.id & HBI_DW_broken$tree_ID==my.tree.id])))
Dm = na.omit(as.list(as.numeric(unique(HBI_DW_broken$d_cm[HBI_DW_broken$plot_ID==my.plot.id & HBI_DW_broken$tree_ID==my.tree.id])))) # diameter in cm
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(HBI_DW_broken$l_dm[HBI_DW_broken$plot_ID==my.plot.id & HBI_DW_broken$tree_ID==my.tree.id]))/10) # lenth in meter m
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# create the deimitation of the stem section we want TapeS to caluculate the volume for
A <- 0 # lower limit
B <- Ht # upper limit = lenght
# calcualte volume for stem segment 0 to length
bio.df <- as.data.frame(cbind(
"vol_m3" = c((tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = TRUE, AB = list(A = A, B = B), iAB = "H") - tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = FALSE, AB = list(A = A, B = B), iAB = "H")),
(tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = FALSE, AB = list(A = A, B = B), iAB = "H")),
(tprVolume(obj.dw[obj.dw@monotone == TRUE], bark = TRUE, AB = list(A = A, B = B), iAB = "H"))),
"compartiment" = c("sb", "sw", "ag"))) %>%
# calculate biomass
mutate(B_kg_tree = B_DW(as.numeric(vol_m3), my.decay.type, my.dw.spec))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(HBI_DW_broken$inv[HBI_DW_broken$plot_ID == my.plot.id & HBI_DW_broken$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBI_DW_broken$inv_year[HBI_DW_broken$plot_ID == my.plot.id & HBI_DW_broken$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
bio.dw.broken.kg.list[[i]] <- bio.info.df
}
bio_dw_broken_kg.df <- as.data.frame(rbindlist(bio.dw.broken.kg.list))
# 1.3.3. biomass for stumps -----------------------------------------------
HBI_DW_stump <- HBI_DW[HBI_DW$dw_type == 4,]
bio.dw.stump.kg.list <- vector("list", length = nrow(HBI_DW_stump))
# select general info about the DW item
my.plot.id <- 50012 # HBI_DW_stump[,"plot_ID"][i]
my.tree.id <- 25 # HBI_DW_stump[,"tree_ID"][i]
my.decay.type <- HBI_DW_stump[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_stump$tpS_ID[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(HBI_DW_stump$BWI[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(HBI_DW_stump$d_cm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(HBI_DW_stump$l_dm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calcualte biomass and bark-stump ratio for the "pseudo" tree
ratio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
ratio.df
isTRUE(ratio.df)
exists('ratio.df')
# select general info about the DW item
my.plot.id <- 50012 # HBI_DW_stump[,"plot_ID"][i]
my.tree.id <- 25 # HBI_DW_stump[,"tree_ID"][i]
my.decay.type <- HBI_DW_stump[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_stump$tpS_ID[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(HBI_DW_stump$BWI[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(HBI_DW_stump$d_cm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(HBI_DW_stump$l_dm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calcualte biomass and bark-stump ratio for the "pseudo" tree
ratio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
# for larger trees the tpr function monotone has to be changed to "True"
if(exists('ratio.df') = FALSE){
ratio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# for larger trees the tpr function monotone has to be changed to "True"
if(exists('ratio.df') == FALSE){
ratio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# calcualte Biomass vie Volume cylinder function and wood density
ag.B.kg = as.data.frame(B_DW(V_DW_cylinder(as.numeric(d.cm)/100, as.numeric(l.m)), my.decay.type, my.dw.spec))[,1]
# claculate komaprtimetn biomass with ratios and ag
bio.df <- as.data.frame(cbind(
"compartiment" = c("ag", "stw", "stb"),
"B_kg_tree" = c(ag.B.kg, # ag biomass
ag.B.kg*as.numeric(ratio.df$wood_ag_ratio), # stump wood biomass
ag.B.kg*as.numeric(ratio.df$bark_ag_ratio)) # stump bark biomass
))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(HBI_DW_stump$inv[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBI_DW_stump$inv_year[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
print(paste(my.plot.id, my.tree.id))
# 1.3.3. biomass for stumps -----------------------------------------------
HBI_DW_stump <- HBI_DW[HBI_DW$dw_type == 4,]
bio.dw.stump.kg.list <- vector("list", length = nrow(HBI_DW_stump))
for (i in 1:nrow(HBI_DW_stump)){
# i = 3
# select general info about the DW item
my.plot.id <- 50012 # HBI_DW_stump[,"plot_ID"][i]
my.tree.id <- 25 # HBI_DW_stump[,"tree_ID"][i]
my.decay.type <- HBI_DW_stump[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_stump$tpS_ID[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(HBI_DW_stump$BWI[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(HBI_DW_stump$d_cm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(HBI_DW_stump$l_dm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calcualte biomass and bark-stump ratio for the "pseudo" tree
ratio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
# for larger trees the tpr function monotone has to be changed to "True"
if(exists('ratio.df') == FALSE){
ratio.df <- as.data.frame(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# calcualte Biomass vie Volume cylinder function and wood density
ag.B.kg = as.data.frame(B_DW(V_DW_cylinder(as.numeric(d.cm)/100, as.numeric(l.m)), my.decay.type, my.dw.spec))[,1]
# claculate komaprtimetn biomass with ratios and ag
bio.df <- as.data.frame(cbind(
"compartiment" = c("ag", "stw", "stb"),
"B_kg_tree" = c(ag.B.kg, # ag biomass
ag.B.kg*as.numeric(ratio.df$wood_ag_ratio), # stump wood biomass
ag.B.kg*as.numeric(ratio.df$bark_ag_ratio)) # stump bark biomass
))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(HBI_DW_stump$inv[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBI_DW_stump$inv_year[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
print(paste(my.plot.id, my.tree.id))
bio.dw.stump.kg.list[[i]] <- bio.info.df
}
tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)
t <- try(tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp))
try
t <- try(tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp))
if("try-error" %in% class(t)){tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)}
# select general info about the DW item
my.plot.id <- 50012 # HBI_DW_stump[,"plot_ID"][i]
my.tree.id <- 25 # HBI_DW_stump[,"tree_ID"][i]
my.decay.type <- HBI_DW_stump[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_stump$tpS_ID[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(HBI_DW_stump$BWI[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(HBI_DW_stump$d_cm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(HBI_DW_stump$l_dm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
t <- try(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp))
if("try-error" %in% class(t)){
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}else{
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# calcualte Biomass vie Volume cylinder function and wood density
ag.B.kg = as.data.frame(B_DW(V_DW_cylinder(as.numeric(d.cm)/100, as.numeric(l.m)), my.decay.type, my.dw.spec))[,1]
# claculate komaprtimetn biomass with ratios and ag
bio.df <- as.data.frame(cbind(
"compartiment" = c("ag", "stw", "stb"),
"B_kg_tree" = c(ag.B.kg, # ag biomass
ag.B.kg*as.numeric(ratio.df$wood_ag_ratio), # stump wood biomass
ag.B.kg*as.numeric(ratio.df$bark_ag_ratio)) # stump bark biomass
))
# 1.3.3. biomass for stumps -----------------------------------------------
HBI_DW_stump <- HBI_DW[HBI_DW$dw_type == 4,]
bio.dw.stump.kg.list <- vector("list", length = nrow(HBI_DW_stump))
for (i in 1:nrow(HBI_DW_stump)){
# i = 3
# select general info about the DW item
my.plot.id <- 50012 # HBI_DW_stump[,"plot_ID"][i]
my.tree.id <- 25 # HBI_DW_stump[,"tree_ID"][i]
my.decay.type <- HBI_DW_stump[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_stump$tpS_ID[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(HBI_DW_stump$BWI[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(HBI_DW_stump$d_cm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(HBI_DW_stump$l_dm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
## calcualte biomass and bark-stump ratio for the "pseudo" tree
# deal with error for small trees: # https://stackoverflow.com/questions/2158780/catching-an-error-and-then-branching-logic
t <- try(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp))
if("try-error" %in% class(t)){
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}else{
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# calcualte Biomass vie Volume cylinder function and wood density
ag.B.kg = as.data.frame(B_DW(V_DW_cylinder(as.numeric(d.cm)/100, as.numeric(l.m)), my.decay.type, my.dw.spec))[,1]
# claculate komaprtimetn biomass with ratios and ag
bio.df <- as.data.frame(cbind(
"compartiment" = c("ag", "stw", "stb"),
"B_kg_tree" = c(ag.B.kg, # ag biomass
ag.B.kg*as.numeric(ratio.df$wood_ag_ratio), # stump wood biomass
ag.B.kg*as.numeric(ratio.df$bark_ag_ratio)) # stump bark biomass
))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(HBI_DW_stump$inv[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBI_DW_stump$inv_year[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
print(paste(my.plot.id, my.tree.id))
bio.dw.stump.kg.list[[i]] <- bio.info.df
}
# 1.3.3. biomass for stumps -----------------------------------------------
HBI_DW_stump <- HBI_DW[HBI_DW$dw_type == 4,]
bio.dw.stump.kg.list <- vector("list", length = nrow(HBI_DW_stump))
for (i in 1:nrow(HBI_DW_stump)){
# i = 3
# select general info about the DW item
my.plot.id <- HBI_DW_stump[,"plot_ID"][i]
my.tree.id <- HBI_DW_stump[,"tree_ID"][i]
my.decay.type <- HBI_DW_stump[,"dec_type_BWI"][i]
my.dw.spec <- HBI_DW_stump[,"dw_sp"][i]
# select variables fot TprTrees object
spp =  na.omit(as.numeric(unique(HBI_DW_stump$tpS_ID[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
# calculate the DBH: diameter a tree with the measured stump diameter would have at 1.3m height
bwi.spp = na.omit((unique(HBI_DW_stump$BWI[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])))
d.cm = as.numeric(unique(HBI_DW_stump$d_cm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id])) # diameter in cm
l.m = as.numeric(unique(HBI_DW_stump$l_dm[HBI_DW_stump$plot_ID==my.plot.id & HBI_DW_stump$tree_ID==my.tree.id]))/10
Dm = as.list(DBH_Dahm(my.plot.id, as.numeric(d.cm)*10, l.m, bwi.spp))
# estimate height a tree with the estimated DBH diameter would have
Hm = as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(estHeight(d13 = as.numeric(Dm), sp = spp))) # lenth in meter m
# compartiments
comp <- c("stw", "stb")
# create object with estimated DBH and height
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
## calcualte biomass and bark-stump ratio for the "pseudo" tree
# deal with error for small trees: # https://stackoverflow.com/questions/2158780/catching-an-error-and-then-branching-logic
t <- try(tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp))
if("try-error" %in% class(t)){
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == F], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}else{
ratio.df <- as.data.frame(
tprBiomass(obj = obj.dw[obj.dw@monotone == T], component = comp)
) %>% # momo = F if heigh low, mono = T if height normal
mutate(ag = stw + stb) %>%
#apply the biomass reduction factor to the biomass of deadwoodto account for decay state
mutate(across(stw:ag, ~rdB_DW( .x, my.decay.type, my.dw.spec) )) %>%
# calcualte bark:total stump biomass
mutate(bark_ag_ratio = stb/ag,
wood_ag_ratio = stw/ag)
}
# calcualte Biomass vie Volume cylinder function and wood density
ag.B.kg = as.data.frame(B_DW(V_DW_cylinder(as.numeric(d.cm)/100, as.numeric(l.m)), my.decay.type, my.dw.spec))[,1]
# claculate komaprtimetn biomass with ratios and ag
bio.df <- as.data.frame(cbind(
"compartiment" = c("ag", "stw", "stb"),
"B_kg_tree" = c(ag.B.kg, # ag biomass
ag.B.kg*as.numeric(ratio.df$wood_ag_ratio), # stump wood biomass
ag.B.kg*as.numeric(ratio.df$bark_ag_ratio)) # stump bark biomass
))
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(HBI_DW_stump$inv[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id]),
"inv_year" = c(as.integer(HBI_DW_stump$inv_year[HBI_DW_stump$plot_ID == my.plot.id & HBI_DW_stump$tree_ID == my.tree.id])),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) )
print(paste(my.plot.id, my.tree.id))
bio.dw.stump.kg.list[[i]] <- bio.info.df
}
bio_dw_stump_kg.df <- as.data.frame(rbindlist(bio.dw.stump.kg.list))
(bio_dw_stump_kg.df %>% filter((any_vars(is.na))))
bio_dw_stump_kg.df %>% filter((any_vars(is.na(.))
bio_dw_stump_kg.df %>% filter((any_vars(is.na(.))))
bio_dw_stump_kg.df %>% any_vars(is.na(.))
bio_dw_stump_kg.df %>% any_vars(is.na())
bio_dw_stump_kg.df %>% any_vars(is.na)
bio_dw_stump_kg.df %>% filter_all(any_vars(!is.na(.)))
bio_dw_stump_kg.df %>% filter_all(any_vars(is.na(.)))
bio_dw_stump_kg.df %>% filter_all(any_vars(<0))
bio_dw_stump_kg.df %>% filter_all(any_vars(. <0))
# 1.3.4. biomass for deadwood pieces --------------------------------------------------------
bio_dw_pieces_kg.df <- HBI_DW %>%
filter(dw_type %in% c(1, 6)) %>%
mutate(
compartiment =  "ag",
B_kg_tree = B_DW(V_DW_cylinder(d_cm/100, l_dm/10), decay, dw_sp)) %>%
select("plot_ID", "tree_ID", "inv", "inv_year", "compartiment", "B_kg_tree")
# 1.3.4. add biomass to DW dataframe -----------------------------
# harmonise strings
all_dw_bio_df <- rbind(
bio_dw_whole_kg.df,
bio_dw_whole_ag_kg.df,
bio_dw_broken_kg.df,
bio_dw_pieces_kg.df)
all_dw_bio_df[,c(1,2, 4, 6)] <- lapply(all_dw_bio_df[,c(1,2,4, 6)], as.numeric)
# join biomass in
HBI_DW <- HBI_DW %>%
left_join(., all_dw_bio_df,
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
# 1.3.4. add biomass to DW dataframe -----------------------------
# harmonise strings
all_dw_bio_df <- rbind(
bio_dw_whole_kg.df,
bio_dw_whole_ag_kg.df,
bio_dw_broken_kg.df,
bio_dw_stump_kg.df
bio_dw_pieces_kg.df)
# 1.3.4. add biomass to DW dataframe -----------------------------
# harmonise strings
all_dw_bio_df <- rbind(
bio_dw_whole_kg.df,
bio_dw_whole_ag_kg.df,
bio_dw_broken_kg.df,
bio_dw_stump_kg.df,
bio_dw_pieces_kg.df)
all_dw_bio_df[,c(1,2, 4, 6)] <- lapply(all_dw_bio_df[,c(1,2,4, 6)], as.numeric)
# join biomass in
HBI_DW <- HBI_DW %>%
left_join(., all_dw_bio_df,
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
HBI_DW

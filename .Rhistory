summarise(LT_n_bark_TY = as.numeric(n()))
bark_type_df <- as.data.frame(rbindlist(bark_TY_list)) %>%
mutate(across(c("plot_ID", "tree_ID"), as.integer))
trees_data %>%
left_join(., bark_type_df, by = c("plot_ID", "tree_ID", "inv")) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
trees_data %>%
left_join(., bark_type_df, by = c("plot_ID", "tree_ID", "inv")) %>%
select(plot_ID, inv, bark_TY)
bark_type <- function(my.dbh.cm, chr.code.ger, output){
bot.name <- SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger ==  chr.code.ger]
#my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == chr.code.ger]]);
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name ==  bot.name]);
my.bark.type <- unique(bark_div$bark_type[bark_div$species ==  my.bark.spp]);
u_border_cm_TY1 <- as.numeric(bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp]);
l_border_cm_TY2 <- as.numeric(bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp]);
u_border_cm_TY2 <- as.numeric(bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp]);
l_border_cm_TY3 <- as.numeric(bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp]);
my.bark.sub.type <-
ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1, "TY1",
# if there is an upper and lower border for type 2 and the diamter is within it
ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2,  "TY2",
# i# if there is only a lower border for type 2 and the diameter is bejond it
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, "TY2",
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3, "TY2",
# if there is a lower border for type 3 and the diameter is above it
ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,"TY3",
# if there are no diameter specific bark types --> for most of the spp. species groups
ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), my.bark.type,
"no Type"
))))));
# my.bark.sub.type <-
#   ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1, "TY1",
#          # if there is an upper and lower border for type 2 and the diamter is within it
#          ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2,  "TY2",
#                 # i# if there is only a lower border for type 2 and the diameter is bejond it
#                 ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, "TY2",
#                        # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#                        ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3, "TY2",
#                               # if there is a lower border for type 3 and the diameter is above it
#                               ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,"TY3",
#                                      # if there are no diameter specific bark types --> for most of the spp. species groups
#                                      ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), my.bark.spp,
#                                             "no Type"
#                                      ))))));
# ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1, paste0(my.bark.spp, " ", "TY1"),
#        # if there is an upper and lower border for type 2 and the diamter is within it
#        ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2, paste0(my.bark.spp," ", "TY2"),
#               # i# if there is only a lower border for type 2 and the diameter is bejond it
#               ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, paste0(my.bark.spp," ", "TY2"),
#                      # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#                      ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3, paste0(my.bark.spp, " ", "TY2"),
#                             # if there is a lower border for type 3 and the diameter is above it
#                             ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3, paste0(my.bark.spp," ", "TY3"),
#                                    # if there are no diameter specific bark types --> for most of the spp. species groups
#                                    ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), my.bark.spp, NA
#                                    ))))));
#
switch(output,
"bark_ty" = my.bark.type,
"bark_sub_ty" = my.bark.sub.type,
"bark_type_species" = my.bark.spp)
}
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty"))
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
trees_data %>%
left_join(., bark_type_df, by = c("plot_ID", "tree_ID", "inv")) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
bark_type <- function(my.dbh.cm, chr.code.ger, output){
bot.name <- SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger ==  chr.code.ger]
#my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == chr.code.ger]]);
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name ==  bot.name]);
my.bark.type <- unique(bark_div$bark_type[bark_div$species ==  my.bark.spp]);
u_border_cm_TY1 <- as.numeric(bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp]);
l_border_cm_TY2 <- as.numeric(bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp]);
u_border_cm_TY2 <- as.numeric(bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp]);
l_border_cm_TY3 <- as.numeric(bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp]);
my.bark.sub.type <-
ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1, "TY1",
# if there is an upper and lower border for type 2 and the diamter is within it
ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2,  "TY2",
# i# if there is only a lower border for type 2 and the diameter is bejond it
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, "TY2",
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3, "TY2",
# if there is a lower border for type 3 and the diameter is above it
ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,"TY3",
# if there are no diameter specific bark types --> for most of the spp. species groups
ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), my.bark.type,
"no Type"
))))));
# my.bark.sub.type <-
#   ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1, "TY1",
#          # if there is an upper and lower border for type 2 and the diamter is within it
#          ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2,  "TY2",
#                 # i# if there is only a lower border for type 2 and the diameter is bejond it
#                 ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, "TY2",
#                        # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#                        ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3, "TY2",
#                               # if there is a lower border for type 3 and the diameter is above it
#                               ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,"TY3",
#                                      # if there are no diameter specific bark types --> for most of the spp. species groups
#                                      ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), my.bark.spp,
#                                             "no Type"
#                                      ))))));
# ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1, paste0(my.bark.spp, " ", "TY1"),
#        # if there is an upper and lower border for type 2 and the diamter is within it
#        ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2, paste0(my.bark.spp," ", "TY2"),
#               # i# if there is only a lower border for type 2 and the diameter is bejond it
#               ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, paste0(my.bark.spp," ", "TY2"),
#                      # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#                      ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3, paste0(my.bark.spp, " ", "TY2"),
#                             # if there is a lower border for type 3 and the diameter is above it
#                             ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3, paste0(my.bark.spp," ", "TY3"),
#                                    # if there are no diameter specific bark types --> for most of the spp. species groups
#                                    ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), my.bark.spp, NA
#                                    ))))));
#
switch(output,
"bark_ty" = my.bark.type,
"bark_sub_ty" = my.bark.sub.type,
"bark_type_species" = my.bark.spp)
}
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
trees_data %>%
left_join(., bark_type_df, by = c("plot_ID", "tree_ID", "inv")) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE)
bark_type_df
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, tree_ID, bark_TY, bark_sub_TY, bark_gen_TY)
trees_sub
bark_TY_list <- vector("list", length = length(trees_sub$tree_ID))
for (i in 1:length(unique(trees_sub$tree_ID))) {
# i = 861
my.tree.id <- trees_sub[i, "tree_ID"]
my.plot.id <- trees_sub[i, "plot_ID"]
my.inv <- trees_sub[i, "inv"]
my.dbh.cm <-  trees_sub[i, "DBH_cm"]
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == trees_sub[i, "Chr_code_ger"]]])
u_border_cm_TY1 <- (bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp])
l_border_cm_TY2 <- (bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp])
u_border_cm_TY2 <- (bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp])
l_border_cm_TY3 <- (bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp])
my.bark.ty <-
case_when(# if there is an upper border for type 1 and the diameter is within it
!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
# if there is an upper and lower border for type 2 and the diamter is within it
!is.na(u_border_cm_TY1) & !is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) &
between(my.dbh.cm, l_border_cm_TY2, u_border_cm_TY2) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is only a lower border for type 2 and the diameter is bejond it
!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) &
my.dbh.cm >= l_border_cm_TY2 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) &
between(my.dbh.cm, l_border_cm_TY2, l_border_cm_TY3) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
# if there are no diameter specific bark types --> for most of the spp. species groups
is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3)~ bark_div$bark_type[bark_div$species == my.bark.spp],
TRUE ~ NA)
bark_TY_list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(my.inv),
"bark_SP" = c(my.bark.spp),
"bark_TY" = c(my.bark.ty))
)
}
bark_type_df <- as.data.frame(rbindlist(bark_TY_list)) %>%
mutate(across(c("plot_ID", "tree_ID"), as.integer))
bark_type_df
trees_sub
nrow(trees_sub)
bark_TY_list <- vector("list", length = length(trees_sub$tree_ID))
for (i in 1:nrow(trees_sub)) {
# i = 861
my.tree.id <- trees_sub[i, "tree_ID"]
my.plot.id <- trees_sub[i, "plot_ID"]
my.inv <- trees_sub[i, "inv"]
my.dbh.cm <-  trees_sub[i, "DBH_cm"]
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == trees_sub[i, "Chr_code_ger"]]])
u_border_cm_TY1 <- (bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp])
l_border_cm_TY2 <- (bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp])
u_border_cm_TY2 <- (bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp])
l_border_cm_TY3 <- (bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp])
my.bark.ty <-
case_when(# if there is an upper border for type 1 and the diameter is within it
!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
# if there is an upper and lower border for type 2 and the diamter is within it
!is.na(u_border_cm_TY1) & !is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) &
between(my.dbh.cm, l_border_cm_TY2, u_border_cm_TY2) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is only a lower border for type 2 and the diameter is bejond it
!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) &
my.dbh.cm >= l_border_cm_TY2 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) &
between(my.dbh.cm, l_border_cm_TY2, l_border_cm_TY3) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
# if there are no diameter specific bark types --> for most of the spp. species groups
is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3)~ bark_div$bark_type[bark_div$species == my.bark.spp],
TRUE ~ NA)
bark_TY_list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(my.inv),
"bark_SP" = c(my.bark.spp),
"bark_TY" = c(my.bark.ty))
)
}
i = 861
# i = 861
my.tree.id <- trees_sub[i, "tree_ID"]
my.plot.id <- trees_sub[i, "plot_ID"]
my.inv <- trees_sub[i, "inv"]
my.dbh.cm <-  trees_sub[i, "DBH_cm"]
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == trees_sub[i, "Chr_code_ger"]]])
u_border_cm_TY1 <- (bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp])
l_border_cm_TY2 <- (bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp])
u_border_cm_TY2 <- (bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp])
l_border_cm_TY3 <- (bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp])
my.bark.ty <-
# case_when(# if there is an upper border for type 1 and the diameter is within it
#           !is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
#           # if there is an upper and lower border for type 2 and the diamter is within it
#           !is.na(u_border_cm_TY1) & !is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) &
#             between(my.dbh.cm, l_border_cm_TY2, u_border_cm_TY2) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          # if there is only a lower border for type 2 and the diameter is bejond it
#          !is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) &
#            my.dbh.cm >= l_border_cm_TY2 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#          !is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) &
#            between(my.dbh.cm, l_border_cm_TY2, l_border_cm_TY3) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
#           # if there are no diameter specific bark types --> for most of the spp. species groups
#          is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3)~ bark_div$bark_type[bark_div$species == my.bark.spp],
#          TRUE ~ NA)
ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1,  paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
# if there is an upper and lower border for type 2 and the diamter is within it
ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2, paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# i# if there is only a lower border for type 2 and the diameter is bejond it
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3,paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 3 and the diameter is above it
ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,  paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
# if there are no diameter specific bark types --> for most of the spp. species groups
ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), bark_div$bark_type[bark_div$species == my.bark.spp], NA
))))));
my.bark.ty
i = 1
my.tree.id <- trees_sub[i, "tree_ID"]
my.plot.id <- trees_sub[i, "plot_ID"]
my.inv <- trees_sub[i, "inv"]
my.dbh.cm <-  trees_sub[i, "DBH_cm"]
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == trees_sub[i, "Chr_code_ger"]]])
u_border_cm_TY1 <- (bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp])
l_border_cm_TY2 <- (bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp])
u_border_cm_TY2 <- (bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp])
l_border_cm_TY3 <- (bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp])
my.bark.ty <-
# case_when(# if there is an upper border for type 1 and the diameter is within it
#           !is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
#           # if there is an upper and lower border for type 2 and the diamter is within it
#           !is.na(u_border_cm_TY1) & !is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) &
#             between(my.dbh.cm, l_border_cm_TY2, u_border_cm_TY2) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          # if there is only a lower border for type 2 and the diameter is bejond it
#          !is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) &
#            my.dbh.cm >= l_border_cm_TY2 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#          !is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) &
#            between(my.dbh.cm, l_border_cm_TY2, l_border_cm_TY3) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
#           # if there are no diameter specific bark types --> for most of the spp. species groups
#          is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3)~ bark_div$bark_type[bark_div$species == my.bark.spp],
#          TRUE ~ NA)
ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1,  paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
# if there is an upper and lower border for type 2 and the diamter is within it
ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2, paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# i# if there is only a lower border for type 2 and the diameter is bejond it
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3,paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 3 and the diameter is above it
ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,  paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
# if there are no diameter specific bark types --> for most of the spp. species groups
ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), bark_div$bark_type[bark_div$species == my.bark.spp], NA
))))));
bark_TY_list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(my.inv),
"bark_SP" = c(my.bark.spp),
"bark_TY" = c(my.bark.ty))
)
bark_TY_list[[i]]
bark_TY_list <- vector("list", length = length(trees_sub$tree_ID))
for (i in 1:nrow(trees_sub)) {
# i = 1
my.tree.id <- trees_sub[i, "tree_ID"]
my.plot.id <- trees_sub[i, "plot_ID"]
my.inv <- trees_sub[i, "inv"]
my.dbh.cm <-  trees_sub[i, "DBH_cm"]
my.bark.spp <- unique(SP_names_com_ID_tapeS$bark_type_SP_group[SP_names_com_ID_tapeS$bot_name == SP_names_com_ID_tapeS$bot_name[SP_names_com_ID_tapeS$Chr_code_ger == trees_sub[i, "Chr_code_ger"]]])
u_border_cm_TY1 <- (bark_div$u_border_cm_TY1[bark_div$species == my.bark.spp])
l_border_cm_TY2 <- (bark_div$l_border_cm_TY2[bark_div$species == my.bark.spp])
u_border_cm_TY2 <- (bark_div$u_border_cm_TY2[bark_div$species == my.bark.spp])
l_border_cm_TY3 <- (bark_div$l_border_cm_TY3[bark_div$species == my.bark.spp])
my.bark.ty <-
# case_when(# if there is an upper border for type 1 and the diameter is within it
#           !is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
#           # if there is an upper and lower border for type 2 and the diamter is within it
#           !is.na(u_border_cm_TY1) & !is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) &
#             between(my.dbh.cm, l_border_cm_TY2, u_border_cm_TY2) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          # if there is only a lower border for type 2 and the diameter is bejond it
#          !is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) &
#            my.dbh.cm >= l_border_cm_TY2 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          # if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
#          !is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) &
#            between(my.dbh.cm, l_border_cm_TY2, l_border_cm_TY3) ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
#          !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3 ~ paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
#           # if there are no diameter specific bark types --> for most of the spp. species groups
#          is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3)~ bark_div$bark_type[bark_div$species == my.bark.spp],
#          TRUE ~ NA)
ifelse(!is.na(u_border_cm_TY1) & my.dbh.cm < u_border_cm_TY1,  paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_1"),
# if there is an upper and lower border for type 2 and the diamter is within it
ifelse(!is.na(l_border_cm_TY2) & !is.na(u_border_cm_TY2) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < u_border_cm_TY2, paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# i# if there is only a lower border for type 2 and the diameter is bejond it
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2, paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 2 and for type 3 but no upper for type 2 and the diameter is between type 2 and 3
ifelse(!is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & !is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY2 & my.dbh.cm < l_border_cm_TY3,paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_2"),
# if there is a lower border for type 3 and the diameter is above it
ifelse(!is.na(l_border_cm_TY3) & my.dbh.cm >= l_border_cm_TY3,  paste0(bark_div$bark_type[bark_div$species == my.bark.spp],"_TY_3"),
# if there are no diameter specific bark types --> for most of the spp. species groups
ifelse(is.na(u_border_cm_TY1) & is.na(l_border_cm_TY2) & is.na(u_border_cm_TY2) & is.na(l_border_cm_TY3), bark_div$bark_type[bark_div$species == my.bark.spp], NA
))))));
bark_TY_list[[i]] <- as.data.frame(cbind(
"plot_ID" = c(my.plot.id),
"tree_ID" = c(my.tree.id),
"inv" = c(my.inv),
"bark_SP" = c(my.bark.spp),
"bark_TY" = c(my.bark.ty))
)
}
bark_type_df <- as.data.frame(rbindlist(bark_TY_list)) %>%
mutate(across(c("plot_ID", "tree_ID"), as.integer))
bark_type_df
trees_data %>%
left_join(., bark_type_df, by = c("plot_ID", "tree_ID", "inv")) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, tree_ID, bark_TY, bark_sub_TY, bark_gen_TY)
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n()))
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n())))$LT_n_bark_TY
(trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n())))$LT_n_bark_TY)
(trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n())))$LT_n_bark_TY
# 1.1.5.2. calculate bark type FSI and add it to the total FSI dat ---------------------------------------------------------------------------------------------------------------------------
# dataset with calcualted number of bark types per plot ID
if(exists('trees_stat_2') == TRUE && nrow(trees_stat_2)!= 0){
FSI_df <- FSI_df %>%
# join the number of tree bark types per plot dataset and the respective FSI in
left_join(.,
# bind tree dataset summarized by plot
# together with those plots that don´t have trees and thus an FSI and bark TY count of 0
plyr::rbind.fill(
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n())),
## old calcualtion way with loop when function wasn´t working yet
# trees_data %>%
# left_join(., bark_type_df, by = c("plot_ID", "tree_ID", "inv"), multiple = "all") %>% # multiple all is necesarry to link all compartiments with the type per tree
#   # it is however amortised by the distinct
# select(plot_ID, inv, bark_TY) %>%
# distinct() %>%
# group_by(plot_ID, inv) %>%
# summarise(LT_n_bark_TY = as.numeric(n())),
# select only those plots with empty sampling circuits that have all 3 circuits empty
# by counting the circuits per plot and filtering for those with n_CCS ==3
trees_stat_2 %>%
mutate(inv = inv_name(inv_year)) %>%
select(plot_ID, inv, CCS_r_m) %>%
distinct()%>%
group_by(plot_ID, inv) %>%
summarise(n_CCS = n()) %>%
filter(n_CCS == 3) %>%
select(plot_ID, inv)
) %>%
# correct LT_n_bark_TY if there are non because the plot doesn´t have trees in any of the CCS
mutate(LT_n_bark_TY = ifelse(is.na(LT_n_bark_TY), 0, LT_n_bark_TY)) %>%
# calculate FSI
mutate(LT_FSI_bark_TY = FSI(LT_n_bark_TY)),
by = c("plot_ID"))
}else{
FSI_df <- FSI_df %>% left_join(., cbind(
# dataset with calcualted number of bark types per plot ID
trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n())),
# calculate FSI of bark diversity
"LT_FSI_bark_TY" = c(FSI(as.numeric(((trees_data %>% filter(compartiment == "ag") %>%
rowwise() %>%
mutate(bark_TY_spec = bark_type(DBH_cm, Chr_code_ger, output = "bark_type_species"),
bark_sub_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_sub_ty"),
bark_gen_TY = bark_type(DBH_cm, Chr_code_ger, output = "bark_ty")) %>%
unite("bark_TY", c(bark_gen_TY,bark_sub_TY), remove = FALSE) %>%
select(plot_ID, inv, bark_TY) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(LT_n_bark_TY = as.numeric(n())))$LT_n_bark_TY))))), # select number of barktypes per plot from summary
by = c("plot_ID")) %>%
distinct()
}
FSI_df

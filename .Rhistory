my.standtype.spec == "aNH" & main.sp.p.df$BA_percent >= 70 ~ 3,  #"sonst-Nd",
my.standtype.spec == "BU" & main.sp.p.df$BA_percent >= 70 ~ 4,   # "Bu-Rein" ,
my.standtype.spec == "EI" & main.sp.p.df$BA_percent >= 70 ~ 5,   # "Ei-Rein",
my.standtype.spec == "aLH" & main.sp.p.df$BA_percent >= 70 ~ 8,  # "sonst-Ld",
TRUE ~ NA)
# if its not a single species stand we have to reassess the stand conditions
# check if we can identify a Nadelholzmischbestand or Laubbolzmischbestand
# which means the overall share of conifers or broadleaved trees
besttype.strong.mix <- ifelse(is.na(besttype.mono) &
# if there area more CF then BL trees (CF min 50%, BL <50%)
my.CF.share > my.BL.share &
# but there is still a high amount of BL trees >30%
my.BL.share < 50 & my.BL.share > 30, 6,        # "Nd-Lb-Misch",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share > my.CF.share &
# but there is still a high amount of BL trees >30%
my.CF.share < 50 & my.CF.share > 30, 7,  # "Lb-Nd-Misch",
NA))
# assign stand types for stands wich are dominated by one catedory (CF, BL) but have a low amount
# of
besttype.mix  <- ifelse(is.na(besttype.mono) & is.na(besttype.strong.mix) &
# if there area more CF then BL trees (CF min 50%, BL <50%)
my.CF.share >= 70 &
# but there is still a high amount of BL trees >30%
my.BL.share <= 30, 9,         # "Nd-Lb<30",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share >= 70 &
# but there is still a high amount of CF trees >30%
my.CF.share <= 30, 10, # "Lb-Nd<30",
NA))
besttype.final <- ifelse(!is.na(besttype.mono) &
is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.mono,
ifelse(is.na(besttype.mono) &
!is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.strong.mix,
ifelse(is.na(besttype.mono) &
is.na(besttype.strong.mix) &
!is.na(besttype.mix), besttype.mix, NA)))
besttype_list[[i]] <- as.data.frame(cbind(
plot_ID = c(my.plot.id),
inv = c(my.inv),
dom_SP = c(main.sp.p.df$SP_code),
stand_type = c(besttype.final),
n_stands = c(my.n.stand),
stand_component = c("LT")
)) %>%
distinct()
}
LT_stand_TY_P <- as.data.frame(rbindlist(besttype_list))
# 1.6. average values ----------------------------------------------------
# 1.6.1. create "pseudo stands" -------------------------------------------
LT_avg_SP_ST_P_list <- vector("list", length = length(unique(trees_data$plot_ID)))
LT_avg_SP_P_list <- vector("list", length = length(unique(trees_data$plot_ID)))
LT_avg_P_list <- vector("list", length = length(unique(trees_data$plot_ID)))
for (i in 1:length(unique(trees_data$plot_ID))) {
# i = 1
my.plot.id <- unique(trees_data$plot_ID)[i]
# select all trees by only one compartiment of each tree to make sure the tree enters the dataframe only once
my.tree.df <- trees_data[trees_data$plot_ID == my.plot.id & trees_data$compartiment == "ag", ]
my.n.ha.df <- trees_data %>% filter(compartiment == "ag" & plot_ID == my.plot.id) %>% group_by(plot_ID, CCS_r_m) %>% reframe(n_ha_CCS = n()/plot_A_ha) %>% distinct()
my.n.plot.df <- trees_data %>% filter(compartiment == "ag" & plot_ID == my.plot.id) %>% group_by(plot_ID, CCS_r_m) %>% reframe(n_CCS = n()) %>% distinct()
my.n.ha.df$n.rep.each.tree <- round(my.n.ha.df$n_ha_CCS/my.n.plot.df$n_CCS)
# repeat every tree per circle by the number this tree would be repeated by to reach itÂ´s ha number
# so every tree id repeated as often as it would be represented on a hectar)
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
my.tree.rep.df <- rbind(
# 5m circle
my.tree.df[my.tree.df$CCS_r_m == 5.64, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 5.64, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 5.64]), ],
# 12m circle
my.tree.df[my.tree.df$CCS_r_m == 12.62, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 12.62, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 12.62] ), ],
# 17m circle
my.tree.df[my.tree.df$CCS_r_m == 17.84, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 17.84, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 17.84]), ])
LT_avg_SP_ST_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv, SP_code, stand) %>%
summarise(mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
LT_avg_SP_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv, SP_code) %>%
summarise(stand = "all",
mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
LT_avg_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv) %>%
summarise(SP_code = "all",
stand = "all",
mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
}
LT_avg_SP_ST_P <- as.data.frame(rbindlist(LT_avg_SP_ST_P_list))
LT_avg_SP_P <- as.data.frame(rbindlist(LT_avg_SP_P_list))
LT_avg_P <- as.data.frame(rbindlist(LT_avg_P_list))
# 1.7. binding LT data together -------------------------------------------------------------------------------------------------------
# 1.7.1. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_ST_P <- LT_SP_ST_P_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID'), as.integer),
by = c("plot_ID", "inv", "stand_component"))  %>%
left_join(LT_avg_SP_ST_P,
by = c("plot_ID", "inv", "stand_component", "SP_code", "stand")) %>%
select(-(n_ha))
# 1.7.2. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_P <- LT_SP_BCNBA_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'n_stands'), as.integer),
by = c("plot_ID", "inv", "stand_component")) %>%
left_join(., LT_avg_SP_P,
by = c("plot_ID", "inv", "stand_component", "SP_code", "stand"))
# 1.7.3. LT stand data ----------------------------------------------------
LT_ST_P <- LT_ST_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID'), as.integer),
by = c("plot_ID", "inv", "stand_component"))
# 1.7.4. LT plot data ----------------------------------------------------------------------------------------------------------------
LT_P <- LT_BCNBAn_ha %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID'), as.integer),
by = c("plot_ID", "inv", "stand_component")) %>%
left_join(., LT_avg_P,
by = c("plot_ID", "inv", "stand_component", "SP_code", "stand")) %>%
left_join(., LT_n_SP_plot,
by = c("plot_ID", "inv", "stand_component"))
# 1.7.5. summrizing LT data by stand type ---------------------------------
LT_TY <- LT_P %>%
select(stand_type, compartiment, stand_component, inv, B_t_ha, C_t_ha, N_t_ha) %>%
distinct() %>%
group_by(stand_type, compartiment, stand_component, inv) %>%
summarise(B_t_ha = mean(B_t_ha),
C_t_ha = mean(C_t_ha),
N_t_ha = mean(N_t_ha))%>%
# so ba, n_ha, n_SP are only calculated for compartiment "ag", meaning with 1 row per plot not 6 as we have compartiments
left_join(.,
LT_P %>%
select(stand_type, compartiment, stand_component, inv, BA_m2_ha, n_ha, n_SP) %>%
filter(compartiment == "ag") %>%
group_by(stand_type, compartiment, stand_component, inv) %>%
summarise(BA_m2_ha = mean(BA_m2_ha),
n_ha = mean(n_ha),
n_SP = mean(n_SP)) %>%
ungroup() %>%
select(-c("compartiment")),
by = c("stand_type", "stand_component", "inv")) %>%
arrange(as.numeric(stand_type)) %>%
mutate(plot_ID = "all",
stand = "all",
dom_SP = "all",
SP_code = "all") %>%
distinct()
# 1.7.6. rbinding LT data together ----------------------------------------
LT_summary <- plyr::rbind.fill(LT_SP_ST_P,
LT_SP_P,
LT_ST_P,
LT_P,
LT_TY) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# to get only stand type summarised data one had to filter for:
# plot_ID == "all" & SP_code == "all" & stand  == "all"
# to get the plotwise summarised data one has to filter for:
# plot_ID != "all" & SP_code == "all" & stand  == "all"
# to get the species & plotwise wise summarised data one has to filter for:
# plot_ID != "all" & SP_code != "all" & stand == "all"
# to get the stand & plotwise  wise summarised data one has to filter for:
# plot_ID != "all" & SP_code == "all" & stand != "all"
# to get the stand , species & plotwise  wise summarised data one has to filter for:
# plot_ID != "all" & SP_code != "all" & stand != "all"
# 2. REGENERATION ---------------------------------------------------------
# 2.1. plot area - sum off all sampling circuits ---------------------------
# if there are plots that are labelled empty but have to included in the eare calcualtion
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_plot_A_ha <- rbind(RG_data %>%
mutate(plot_A_ha = as.numeric(area_m2)/10000) %>%
select(plot_ID, inv, CCS_nr, plot_A_ha) %>%
distinct(),
RG_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))  %>%
select(plot_ID, inv, CCS_nr, plot_A_ha)) %>%
group_by(plot_ID, inv) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))}else{
RG_plot_A_ha <- RG_data %>%
mutate(plot_A_ha = as.numeric(area_m2)/10000) %>%
select(plot_ID, inv, CCS_nr, plot_A_ha) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))
}
# 2.2. number of RG  plants  per hectar ----------------------------------------------
RG_n_ha <- RG_data %>%
filter(compartiment == "ag") %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv")) %>%
group_by(plot_ID, inv) %>%
# sum number of trees  per sampling circuit
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "RG")
# 2.3. number of RG  species per hectar ----------------------------------------------
RG_n_SP_plot <- RG_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, SP_code) %>%
group_by(plot_ID, inv) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "RG")
# 2.4. RG big summary combining all grouping variables --------------------------------------------------------
# 2.4.1. RG summary by plot, inventory, compartiment, species and  -------------------------------------------
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_SP_ST_BCN_ha <- plyr::rbind.fill(
RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv, stand, compartiment, SP_code) %>%
# sum number of trees  per sampling circuit
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct() ,
RG_stat_2 %>%
# this is in case in 01_00_RG_LT_DW_plot_inv_status_sorting there were stat_2 datasets produced that do not hold any data but only NAs
filter(!is.na(plot_ID))  %>%
select(plot_ID, CCS_nr, plot_A_ha, inv, compartiment, B_t_ha, C_t_ha, N_t_ha)
) %>%
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha))%>%
mutate(stand_component = "RG")
}else{
RG_SP_ST_BCN_ha <-     RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv, stand, compartiment, SP_code) %>%
# sum stocks of trees  per sampling circuit, stand, compartiment, and SP_code
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "RG")
}
## RG big summary final
RG_summary <- plyr::rbind.fill(
# RG summray by plot, species, stand
RG_SP_ST_BCN_ha,
# 2.4.2. RG big summary by plot and species, without grouping by stand ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all"),
# 2.4.3. RG summary by plot and stand, without grouping by species ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv", "compartiment", "stand"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(SP_code = "all"),
# 2.4.4. RG summary by plot, inventory, compartiment, not by speci --------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv,stand_component, n_ha),
by = c("plot_ID", "inv", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv", "stand_component")) %>%
mutate(n_ha = ifelse(is.na(n_ha), 0, n_ha),
n_SP = ifelse(is.na(n_SP), 0, n_SP),
stand = "all",
SP_code = "all")
) %>% # close rbind
distinct() %>%
arrange(plot_ID)
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. DW summary per plot per SP per DW type per Dec state ---------------------------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(isTRUE(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0) ==T ){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% filter(!is.na(plot_ID)) %>% select(-c( plot_A_ha))) %>%
mutate(stand_component = "DW")
}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
# 3.4. DW big summary including all grouping variables and combinations -------------------------
# 3.4.1. grouped by species, decay type, deadwoodtype, plot, compartiment, inventory ------------------------------------------------------------------
DW_summary <-
plyr::rbind.fill(
DW_BCN_ha_SP_TY_DEC_P,
# 3.4.2. grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore------------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# 3.4.3. DW grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore --------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all") ,
# 3.4.4. DW grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# 3.4.5. DW grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv, ST_LY_type, dw_type) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv", "dw_type"),
multiple = "all") %>%
mutate(dw_sp = "all",
decay = "all"),
# 3.4.6. DW grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv, decay) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv", "decay"),
multiple = "all") %>%
mutate(dw_sp = "all",
dw_type = "all") ,
# 3.4.7. DW grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
# mean and sd of length and diameter of deadwood
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv, dw_sp) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv", "dw_sp"),
multiple = "all") %>%
mutate(decay = "all",
dw_type = "all") ,
# 3.4.8.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
distinct() %>%
# average values over all deadwood items per plot
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv"),
multiple = "all") %>%
# number of DW items per ha
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct(),
multiple = "all",
by = c("plot_ID", "inv")) %>%
# number of decay types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, decay) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(n_dec = n()),
multiple = "all",
by = c("plot_ID", "inv")) %>%
# number of deadwood types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv, dw_type) %>%
distinct() %>%
group_by(plot_ID, inv) %>%
summarise(n_dw_TY = n()),
multiple = "all",
by = c("plot_ID", "inv")) %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%  # close rbind
# add stand component for those datasets where itÂ´s not included yet
mutate(stand_component = "DW") %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
# LT_RG_DW_P <- rbind(
#   # plotwise summar yof tree dataset
#   LT_P %>% select(plot_ID, inv, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
#   RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
#   DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
#     # as there is no bg and total compartiment, this filter will only select ag compartiments
#     filter(compartiment %in% c("ag", "bg", "total")),
#   # take all "ag" compartiments of DW and assign them to the compartiment "total" as well, so we can create a row of total stocks for all stand components
#   DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total"),
#   # total plot data over all stand components
# ) %>%
#   arrange(plot_ID)
LT_RG_DW_P <-
plyr::rbind.fill(
plyr::rbind.fill(
#living tree summary all group combination possible , without stocks grouped by stand type tho
LT_summary %>% filter(plot_ID != "all") %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
# select only tree plots with plot_ID, not stand type summaries
(rbind(LT_summary %>% filter(plot_ID != "all" & stand == "all" & SP_code == "all") %>% select(plot_ID, inv, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total"))
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
)%>%
left_join(., LT_stand_TY_P %>%
select(-stand_component) %>%
mutate_at(c('inv', 'plot_ID'), as.character),
by = c("plot_ID", "inv")),
# add standtype wise dataset
LT_summary %>% filter(plot_ID == "all")) %>%
arrange(plot_ID)
LT_RG_DW_P
LT_RG_DW_P %>%
select(plot_ID, inv, inv_year, stand,  SP_code, dw_sp,	dw_type,	decay,	ST_LY_type, compartiment)
LT_RG_DW_P %>%
select(plot_ID, inv, inv_year, stand,  SP_code, dw_sp,	dw_type,	decay,	ST_LY_type, compartiment) %>%
distinct()
LT_RG_DW_P %>%
filter(plot_ID == 140037 | plot_ID == "all")
LT_RG_DW_P %>%
filter(plot_ID == 140037 | plot_ID == "all") %>%
select(plot_ID, inv, inv_year, stand,  SP_code, dw_sp,	dw_type,	decay,	ST_LY_type, compartiment) %>%
distinct()
view(LT_RG_DW_P %>%
filter(plot_ID == 140037 | plot_ID == "all") %>%
select(plot_ID, inv, inv_year, stand,  SP_code, dw_sp,	dw_type,	decay,	ST_LY_type, compartiment) %>%
distinct())
view(LT_RG_DW_P %>%
filter(plot_ID == 140037 | plot_ID == "all") %>%
select(stand_component, plot_ID, inv, inv_year, stand,  SP_code, dw_sp,	dw_type,	decay,	ST_LY_type, compartiment) %>%
distinct())
##### tree inventory status -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
source(paste0(here(), "/scripts/BZE_III/02_01_LT_invetory_status_HBI_BZE3.R"))

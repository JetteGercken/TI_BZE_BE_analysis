"x2" = bg.kg.x2)
}
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees){
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ NA, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]),
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
return(N)
}
# 1.13. carbon stock ------------------------------------------------------
carbon <- function(B){
C <- B*0.5;
return(C)
}
# 1.2.3. join RG biomass for trees <1.3m and >1.3m height  ----------------
HBI_RG %>% left_join(., rbind(bio.ag.kg.RG.above.1.3.df,
bio.bg.kg.RG.above.1.3.df,
bio.ag.kg.RG.below.1.3.df),
by = c("plot_ID", "CCS_no", "tree_ID", "inv", "inv_year"),
multiple = "all")
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio.ag.kg.RG.above.1.3.df, bio.bg.kg.RG.above.1.3.df) %>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio.ag.kg.RG.above.1.3.df%>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
HBI_RG %>%
filter(H_m <= 1.3) %>%
mutate(compartiment = "ag",
B_kg_tree = GHGI_aB_Hb1.3(LH_NH, H_m)) %>%
select("plot_ID","CCS_no", "tree_ID", "inv", "inv_year", "compartiment", "B_kg_tree")
)
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the  national soil inventory
# stock calculations for regeneration
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here("data/input/BZE2_HBI/bejb.csv"), sep = ",", dec = ",")%>% mutate(inv_year = 2012, inv = inv_name(inv_year))
#  "bund_nr"  "pk_nr"  "lfd_nr"   "bart"  "hoehe"    "grklasse"
colnames(HBI_RG) <- c("plot_ID", "CCS_no", "tree_ID", "SP_code", "H_cm", "D_class_cm", "inv_year", "inv")
# this dataset contains the position and extend of the sampling circle satelites of the regeneration inventory of the HBI (BZE2) including stand and area info
HBI_RG_loc <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_loc_update_1.csv")), sep = ",", dec = ",")
SP_names_com_ID_tapeS <- read.delim(file = here("output/out_data/x_bart_tapeS.csv"), sep = ",", dec = ",")
# 1. calculations ---------------------------------------------------------
# 1.1. size class to diameter ---------------------------------------------
# translate size class into diameter
HBI_RG <- HBI_RG %>%
mutate(
D_cm = sizeclass_to_d(D_class_cm),
H_m = H_cm/100) %>%
# join in species names and codes from x_bart
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
HBI.RG.above.1.3 <- HBI_RG[HBI_RG$H_m > 1.3, ]
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# create output list
bio.ag.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
for (i in 1:nrow(HBI.RG.above.1.3)) {
# i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
Dm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))))
Hm = na.omit(as.list(as.numeric(1.3)))
Ht = na.omit(as.numeric(unique(HBI.RG.above.1.3$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(HBI.RG.above.1.3$plot_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"CCS_no" = c(my.ccs.id),
"tree_ID" = c(as.integer(HBI.RG.above.1.3$tree_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"inv" = c(HBI.RG.above.1.3$inv[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"inv_year" = c(as.integer(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"LH_NH" = c(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.RG.above.1.3[[i]] <- bio.info.df
}
bio.ag.kg.RG.above.1.3.df <- as.data.frame(rbindlist(bio.ag.kg.RG.above.1.3))
# 1.2.1.2. belowgroung biomass for RG trees height > 1.3m -------------------------------
bio.bg.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
for (i in 1:nrow(HBI.RG.above.1.3)) {
# i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
# select variales for belowground functions
spp = unique(HBI.RG.above.1.3$Bio_SP_group[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
dbh.cm = as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"CCS_no" = c(my.ccs.id),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(HBI.RG.above.1.3$inv[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.RG.above.1.3[[i]] <- bio.info.df
}
bio.bg.kg.RG.above.1.3.df <- as.data.frame(rbindlist(bio.bg.kg.RG.above.1.3))
HBI_RG %>% left_join(.,
rbind(
# 1.2.1.3. total and total aboveground biomass for RG trees height > 1.3m -------------------------------
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio.ag.kg.RG.above.1.3.df, bio.bg.kg.RG.above.1.3.df) %>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio.ag.kg.RG.above.1.3.df%>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# 1.2.2. biomass for RG trees height < 1.3m -------------------------------
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# 1.2.1.1.1. GHGI aboveground biomass for RG trees height > 1.3m -------------------------------
(HBI_RG %>%
filter(H_m <= 1.3) %>%
mutate(compartiment = "ag",
B_kg_tree = GHGI_aB_Hb1.3(LH_NH, H_m)) %>%
select("plot_ID","CCS_no", "tree_ID", "inv", "inv_year", "compartiment", "B_kg_tree"))), # close rbind  for all compartiments and trees
by = c("plot_ID", "CCS_no", "tree_ID", "inv", "inv_year"),
multiple = "all") # close left join in HBI_RG
bio.ag.kg.RG.above.1.3.df[,c(1,2, 3, 5,7)] <- lapply(bio.ag.kg.RG.above.1.3.df[,c(1,2, 3, 5,7)], as.numeric)
bio.bg.kg.RG.above.1.3.df[,c(1,2, 3, 5,7)] <- lapply(bio.bg.kg.RG.above.1.3.df[,c(1,2, 3, 5,7)], as.numeric)
HBI_RG %>% left_join(.,
rbind(
# 1.2.1.3. total and total aboveground biomass for RG trees height > 1.3m -------------------------------
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio.ag.kg.RG.above.1.3.df, bio.bg.kg.RG.above.1.3.df) %>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio.ag.kg.RG.above.1.3.df%>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# 1.2.2. biomass for RG trees height < 1.3m -------------------------------
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# 1.2.1.1.1. GHGI aboveground biomass for RG trees height > 1.3m -------------------------------
(HBI_RG %>%
filter(H_m <= 1.3) %>%
mutate(compartiment = "ag",
B_kg_tree = GHGI_aB_Hb1.3(LH_NH, H_m)) %>%
select("plot_ID","CCS_no", "tree_ID", "inv", "inv_year", "compartiment", "B_kg_tree"))), # close rbind  for all compartiments and trees
by = c("plot_ID", "CCS_no", "tree_ID", "inv", "inv_year"),
multiple = "all") # close left join in HBI_RG
HBI_RG %>% left_join(.,
rbind(
# join in aboegrond compartiments and belowground compartients in tree dataset
bio.ag.kg.RG.above.1.3.df,
bio.bg.kg.RG.above.1.3.df,
# 1.2.1.3. total and total aboveground biomass for RG trees height > 1.3m -------------------------------
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
rbind(
bio.ag.kg.RG.above.1.3.df, bio.bg.kg.RG.above.1.3.df) %>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
bio.ag.kg.RG.above.1.3.df%>%
group_by(plot_ID, CCS_no, tree_ID, inv, inv_year) %>%
summarize(B_kg_tree = sum(as.numeric(B_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID","CCS_no", "tree_ID", "inv",
"inv_year", "compartiment", "B_kg_tree"),
# 1.2.2. biomass for RG trees height < 1.3m -------------------------------
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# 1.2.1.1.1. GHGI aboveground biomass for RG trees height > 1.3m -------------------------------
(HBI_RG %>%
filter(H_m <= 1.3) %>%
mutate(compartiment = "ag",
B_kg_tree = GHGI_aB_Hb1.3(LH_NH, H_m)) %>%
select("plot_ID","CCS_no", "tree_ID", "inv", "inv_year", "compartiment", "B_kg_tree"))), # close rbind  for all compartiments and trees
by = c("plot_ID", "CCS_no", "tree_ID", "inv", "inv_year"),
multiple = "all") # close left join in HBI_RG
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees){
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
# calculate nitrogen content in the aboveground and belowground compartiments but without sums (total or total aboveground N)
N <- case_when(
comp.trees == "ndl" ~ NA, # as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]), # accordint to the BZE we don´t have to deliver this compartiments nitrogen stock so we wont
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
return(N)
}
# join inventory jear and name into deadwood tree dataset
HBI_DW <- HBI_DW %>% left_join(., HBI_inv_info %>% select(inv_year, inv, plot_ID), by = "plot_ID")
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. Packages & functions  ---------------------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# DEAD trees
HBI_DW <- read.delim(file = here("data/input/BZE2_HBI/bedw_liste.csv"), sep = ",", dec = ",")
#  bund_nr lfd_nr t     yp      baumgruppe anzahl  durchmesser laenge zersetzung
colnames(HBI_DW) <- c("plot_ID", "tree_ID", "dw_type", "dw_sp", "count", "d_mm", "l_dm", "decay")
# HBI point info
HBI_inv_info <- read.delim(file = here("data/input/BZE2_HBI/tit_1.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
# HBI point/ inventory info
HBI_inv_info <- HBI_inv_info %>% dplyr::select(bund_nr, datum, status )
colnames(HBI_inv_info) <- c("plot_ID", "date", "plot_inventory_status")
# 0.4.1. Inventory year & name --------------------------------------------------------
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
HBI_inv_info$date <- as.Date(HBI_inv_info$date)
HBI_inv_info$inv_year <- as.numeric(format(HBI_inv_info$date, "%Y"))
# this line can be removed later
HBI_inv_info <- HBI_inv_info %>% mutate(inv_year = ifelse(inv_year < 2012, 2012,inv_year),
inv = inv_name(inv_year))
# join inventory jear and name into deadwood tree dataset
HBI_DW <- HBI_DW %>% left_join(., HBI_inv_info %>% select(inv_year, inv, plot_ID), by = "plot_ID")
HBI_DW
# 1.3.1. whole trees  -----------------------------
# Das Volumen der Totholzart 2 = stehend oder liegend, ganzer Baum wird wie ein lebender Baum behandelt, d. h. es werden BHD und Höhe gemessen und über die Programmbibliothek BDat das Volumen hergeleitet.
# Bei der Totholzart 3 = stehend oder liegend, Bruchstück (mit Wurzelanlauf) wird ebenfalls der BHD und die Höhe erfasst und anschließend mit BDat das Volumen für gebrochene Bäume berechnet.
# -->  Für Bruchstücke mit Wurzelanlauf < 3 m Länge bzw. Höhe liefert BDat jedoch unplausible Totholzvolumina, da es für diesen Wertebereich nicht
#         entsprechend parametrisiert wurde. Alternativ wurde für diese Totholzstücke die Zylinderformel angewandt, wobei deren BHD als Prädiktor für den Durchmesser einfließt
HBI_DW[, dw_type %in% c(2, 5)]
# 1.3.1. whole trees  -----------------------------
# Das Volumen der Totholzart 2 = stehend oder liegend, ganzer Baum wird wie ein lebender Baum behandelt, d. h. es werden BHD und Höhe gemessen und über die Programmbibliothek BDat das Volumen hergeleitet.
# Bei der Totholzart 3 = stehend oder liegend, Bruchstück (mit Wurzelanlauf) wird ebenfalls der BHD und die Höhe erfasst und anschließend mit BDat das Volumen für gebrochene Bäume berechnet.
# -->  Für Bruchstücke mit Wurzelanlauf < 3 m Länge bzw. Höhe liefert BDat jedoch unplausible Totholzvolumina, da es für diesen Wertebereich nicht
#         entsprechend parametrisiert wurde. Alternativ wurde für diese Totholzstücke die Zylinderformel angewandt, wobei deren BHD als Prädiktor für den Durchmesser einfließt
HBI_DW[, HBI_DW$dw_type %in% c(2, 5)]
# 1.3.1. whole trees  -----------------------------
# Das Volumen der Totholzart 2 = stehend oder liegend, ganzer Baum wird wie ein lebender Baum behandelt, d. h. es werden BHD und Höhe gemessen und über die Programmbibliothek BDat das Volumen hergeleitet.
# Bei der Totholzart 3 = stehend oder liegend, Bruchstück (mit Wurzelanlauf) wird ebenfalls der BHD und die Höhe erfasst und anschließend mit BDat das Volumen für gebrochene Bäume berechnet.
# -->  Für Bruchstücke mit Wurzelanlauf < 3 m Länge bzw. Höhe liefert BDat jedoch unplausible Totholzvolumina, da es für diesen Wertebereich nicht
#         entsprechend parametrisiert wurde. Alternativ wurde für diese Totholzstücke die Zylinderformel angewandt, wobei deren BHD als Prädiktor für den Durchmesser einfließt
HBI_DW[HBI_DW$dw_type %in% c(2, 5), ]
# 1.3.1. whole trees  -----------------------------
# Das Volumen der Totholzart 2 = stehend oder liegend, ganzer Baum wird wie ein lebender Baum behandelt, d. h. es werden BHD und Höhe gemessen und über die Programmbibliothek BDat das Volumen hergeleitet.
# Bei der Totholzart 3 = stehend oder liegend, Bruchstück (mit Wurzelanlauf) wird ebenfalls der BHD und die Höhe erfasst und anschließend mit BDat das Volumen für gebrochene Bäume berechnet.
# -->  Für Bruchstücke mit Wurzelanlauf < 3 m Länge bzw. Höhe liefert BDat jedoch unplausible Totholzvolumina, da es für diesen Wertebereich nicht
#         entsprechend parametrisiert wurde. Alternativ wurde für diese Totholzstücke die Zylinderformel angewandt, wobei deren BHD als Prädiktor für den Durchmesser einfließt
HBW_DW_whole <- HBI_DW[HBI_DW$dw_type %in% c(2, 5), ]
nrow(HBW_DW_whole)
i = 1
# select general info about the DW item
my.plot.id <- HBW_DW_whole[,"plot_ID"][i]
my.tree.id <- HBW_DW_whole[,"tree_ID"][i]
my.decay.type <- HBW_DW_whole[,"decay"][i]
my.dw.type <- HBW_DW_whole[,"dw_type"][i]
my.dw.type
# HBI forest type info per plot  (Bestandestyp)
# this i deed to later say "if the stocking species are mainly coniferous i need this secies group from tapeS
# and if th estocking species fall in the category broadleafes the other tapes species code"
HBI_forest <- read.delim(file = here("data/input/BZE2_HBI/be.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
HBI_forest
# HBI forest type info per plot  (Bestandestyp)
# this i deed to later say "if the stocking species are mainly coniferous i need this secies group from tapeS
# and if th estocking species fall in the category broadleafes the other tapes species code"
HBI_forest_info <- read.delim(file = here("data/input/BZE2_HBI/be.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
HBI_DW %>% left_join(.,
HBI_forest_info %>% select(bund_nr, besttyp)) %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ LB,
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ NB,
TRUE ~ NA))
HBI_DW %>% left_join(.,
HBI_forest_info %>% select(bund_nr, besttyp),
by = C("plot_ID" = "bund_nr")) %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ LB,
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ NB,
TRUE ~ NA))
HBI_DW %>% left_join(.,
HBI_forest_info %>% select(bund_nr, besttyp),
by = C("plot_ID" == "bund_nr")) %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ LB,
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ NB,
TRUE ~ NA))
HBI_DW %>% left_join(.,
HBI_forest_info %>% select(bund_nr, besttyp),
by = c("plot_ID" == "bund_nr")) %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ LB,
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ NB,
TRUE ~ NA))
HBI_DW %>% left_join(.,
HBI_forest_info %>% select(bund_nr, besttyp),
by = c("plot_ID" = "bund_nr")) %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ LB,
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ NB,
TRUE ~ NA))
HBI_DW %>% left_join(.,
HBI_forest_info %>% select(bund_nr, besttyp),
by = c("plot_ID" = "bund_nr")) %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ "LB",
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ "NB",
TRUE ~ NA))
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. Packages & functions  ---------------------------------------------------------
source(paste0(getwd(), "/scripts/00_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# DEAD trees
HBI_DW <- read.delim(file = here("data/input/BZE2_HBI/bedw_liste.csv"), sep = ",", dec = ",")
#  bund_nr lfd_nr t     yp      baumgruppe anzahl  durchmesser laenge zersetzung
colnames(HBI_DW) <- c("plot_ID", "tree_ID", "dw_type", "dw_sp", "count", "d_mm", "l_dm", "decay")
# HBI point info
HBI_inv_info <- read.delim(file = here("data/input/BZE2_HBI/tit_1.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
# HBI point/ inventory info
HBI_inv_info <- HBI_inv_info %>% dplyr::select(bund_nr, datum, status )
colnames(HBI_inv_info) <- c("plot_ID", "date", "plot_inventory_status")
# HBI forest type info per plot  (Bestandestyp)
# this i deed to later say "if the stocking species are mainly coniferous i need this secies group from tapeS
# and if th estocking species fall in the category broadleafes the other tapes species code"
HBI_forest_info <- read.delim(file = here("data/input/BZE2_HBI/be.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
# 0.4.1. Inventory year & name --------------------------------------------------------
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
HBI_inv_info$date <- as.Date(HBI_inv_info$date)
HBI_inv_info$inv_year <- as.numeric(format(HBI_inv_info$date, "%Y"))
# this line can be removed later
HBI_inv_info <- HBI_inv_info %>% mutate(inv_year = ifelse(inv_year < 2012, 2012,inv_year),
inv = inv_name(inv_year))
# join inventory jear and name into deadwood tree dataset
HBI_DW <- HBI_DW %>% left_join(., HBI_inv_info %>% select(inv_year, inv, plot_ID), by = "plot_ID")
HBI_DW %>% left_join(.,
HBI_forest_info %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ "LB",
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ "NB",
TRUE ~ NA)) %>%
select(bund_nr, LH_NH),
by = c("plot_ID" = "bund_nr"))
# select variables fot TprTrees object
# translating Species groups into TapeS codes
spp = case_when(my.dw.spec == 1 | (my.dw.spec == 4 & my.CF.BL == "NB") ~ 1,  # Fi
my.dw.spec == 2 | (my.dw.spec == 4 & my.CF.BL == "LB") ~ 15, # BU
my.dw.spec == 3 ~ 17,                                   # EI
TRUE ~ NA)
# my.decay.type <- HBW_DW_whole[,"decay"][i]
# my.dw.type <- HBW_DW_whole[,"dw_type"][i]
my.dw.spec <- HBW_DW_whole[,"dw_sp"][i]
my.CF.BL <- HBW_DW_whole[,"LH_NH"][i]
# 1.3 biomass ------------------------------------------------------------------------
HBW_DW_whole <- HBI_DW[HBI_DW$dw_type %in% c(2, 5, 3), ]
i = 1
# select general info about the DW item
my.plot.id <- HBW_DW_whole[,"plot_ID"][i]
my.tree.id <- HBW_DW_whole[,"tree_ID"][i]
# my.decay.type <- HBW_DW_whole[,"decay"][i]
# my.dw.type <- HBW_DW_whole[,"dw_type"][i]
my.dw.spec <- HBW_DW_whole[,"dw_sp"][i]
my.CF.BL <- HBW_DW_whole[,"LH_NH"][i]
# select variables fot TprTrees object
# translating Species groups into TapeS codes
spp = case_when(my.dw.spec == 1 | (my.dw.spec == 4 & my.CF.BL == "NB") ~ 1,  # Fi
my.dw.spec == 2 | (my.dw.spec == 4 & my.CF.BL == "LB") ~ 15, # BU
my.dw.spec == 3 ~ 17,                                   # EI
TRUE ~ NA)
# 0.4.1. Inventory year & name --------------------------------------------------------
# create column that just contains year of inventory: https://www.geeksforgeeks.org/how-to-extract-year-from-date-in-r/
HBI_inv_info$date <- as.Date(HBI_inv_info$date)
HBI_inv_info$inv_year <- as.numeric(format(HBI_inv_info$date, "%Y"))
# this line can be removed later
HBI_inv_info <- HBI_inv_info %>% mutate(inv_year = ifelse(inv_year < 2012, 2012,inv_year),
inv = inv_name(inv_year))
# join inventory jear and name into deadwood tree dataset
HBI_DW <- HBI_DW %>% left_join(., HBI_inv_info %>% select(inv_year, inv, plot_ID), by = "plot_ID")
HBI_DW <- HBI_DW %>% left_join(.,
HBI_forest_info %>%
mutate(LH_NH = case_when(besttyp %in% c(4, 5, 7, 8, 10, 91 ) ~ "LB",
besttyp %in% c(92, 1, 2, 3, 6, 9 ) ~ "NB",
TRUE ~ NA)) %>%
select(bund_nr, LH_NH),
by = c("plot_ID" = "bund_nr"))
# 1.3 biomass ------------------------------------------------------------------------
HBW_DW_whole <- HBI_DW[HBI_DW$dw_type %in% c(2, 5, 3), ]
i = 1
# select general info about the DW item
my.plot.id <- HBW_DW_whole[,"plot_ID"][i]
my.tree.id <- HBW_DW_whole[,"tree_ID"][i]
# my.decay.type <- HBW_DW_whole[,"decay"][i]
# my.dw.type <- HBW_DW_whole[,"dw_type"][i]
my.dw.spec <- HBW_DW_whole[,"dw_sp"][i]
my.CF.BL <- HBW_DW_whole[,"LH_NH"][i]
# select variables fot TprTrees object
# translating Species groups into TapeS codes
spp = case_when(my.dw.spec == 1 | (my.dw.spec == 4 & my.CF.BL == "NB") ~ 1,  # Fi
my.dw.spec == 2 | (my.dw.spec == 4 & my.CF.BL == "LB") ~ 15, # BU
my.dw.spec == 3 ~ 17,                                   # EI
TRUE ~ NA)
spp
Dm = na.omit(as.list(as.numeric(unique(HBW_DW_whole$D_mm[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])/10))) # diameter in cm
Hm =  as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(trees$H_m[trees$plot_ID==my.plot.id & trees$tree_ID==my.tree.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
Dm
View(trees)
Dm = na.omit(as.list(as.numeric(unique(HBW_DW_whole$D_mm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id]))/10)) # diameter in cm
Hm =  as.list(as.numeric(1.3))
Ht = na.omit(as.numeric(unique(HBW_DW_whole$L_dm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id]))/10) # lenth in meter m
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
Dm
Ht = na.omit(as.numeric(unique(HBW_DW_whole$l_dm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id]))/10) # lenth in meter m
Ht
Hm =  as.list(as.numeric(1.3))
Hm
Dm = na.omit(as.list(as.numeric(unique(HBW_DW_whole$d_mm[HBW_DW_whole$plot_ID==my.plot.id & HBW_DW_whole$tree_ID==my.tree.id]))/10)) # diameter in cm
Dm
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
obj.trees
TapeS::tprVolume(obj.trees)
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
TapeS::tprVolume(tprVolume(obj.dw[obj.dw@monotone == TRUE]))
obj.dw
tprVolume(obj.dw[obj.dw@monotone == TRUE])
Hm
# create object
obj.dw <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
tprVolume(obj.dw[obj.dw@monotone == TRUE])
Hm
Hm
Ht
tprVolume(obj.dw) [obj.dw@monotone == TRUE])
tprVolume(obj.dw)
tprVolume(obj.dw[obj.dw@monotone == TRUE])
tprVolume(obj.dw[obj.dw@monotone == TRUE], mono = TRUE)
tprBiomass(obj.dw)

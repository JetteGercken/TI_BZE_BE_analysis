plot_ID != "all"&
stand == "all" &
SP_code == "all", 0, .x)) )
pre_vars
post_vars
trees_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- trees_stock_changes_P[, post_vars] - trees_stock_changes_P[, pre_vars]
trees_stock_changes_P
LT_changes <- dbh_growth_summary %>%
left_join(.,
trees_stock_changes_P %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "C_layer", "SP_code"),
multiple = "all") %>%  # multiple = "all" for compartiments, which is not represented in dbh growth
left_join(BA_changes_SP_P %>%
select(plot_ID, stand, SP_code, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "SP_code", "C_layer") ) %>%
mutate(stand_component = "LT")
view(LT_changes)
# 1.2. grouping growth ------------------------------------------------------------------
dbh_growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"),
# growth by plot
summarize_data(dbh_growth_tree,
c("plot_ID"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
SP_code = "all"))
# 1.3. changes in BA composition -------------------------------------------
# select all possible tree species per plot create list of all possible species per plot from both invenoties, to be able to join in basal area shares later and set missing shares to 0
BA_changes_SP_P <- rbind(BZE3_trees %>% select(plot_ID, SP_code) %>% distinct(),
HBI_trees %>% select(plot_ID, SP_code) %>% distinct()) %>%
distinct() %>%
arrange(plot_ID) %>%
# join basal area shares from species in BZE3 dataset according to species, and plot, if the species does have a basal area share in BZE3
left_join(., BZE3_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all") %>%
# select the BA percent
select(plot_ID, SP_code, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_BZE3 = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code")) %>%
# join basal area shares from species in HBI dataset according to species, and plot, if the species does have a basal area share in BZE3
left_join(., HBI_LT_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all") %>%
# select the BA percent
select(plot_ID, SP_code, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_HBI = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code")) %>%
# here we have to set the BA_percent that do not appear in the respective inventory to 0
mutate(BA_percent_BZE3 = ifelse(is.na(BA_percent_BZE3), 0, BA_percent_BZE3),
BA_percent_HBI = ifelse(is.na(BA_percent_HBI), 0, BA_percent_HBI),
BA_percent_diff = BA_percent_BZE3-BA_percent_HBI, # calcualte difference in HBI and BZE3 BA share per plot and species
stand = "all",
C_layer = "all")
# 1.4. changes in stocks per ha --------------------------------------------
trees_stock_changes_P <-
BZE3_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m) %>%
#add "_BZE3" to the names of the valriables we want to calculate the difference for:  https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP, mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m)) %>%
distinct()  %>%
# jopin in HBI dataset via left join, so that only plots, species, C layers and stands are joined in that have a partner in the current inventory.
left_join(., HBI_LT_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP,
mean_DBH_cm, sd_DBH_cm, Dg_cm, mean_BA_m2, mean_H_m, sd_H_m, Hg_m)) %>%
distinct(),
by = c("stand_component", "stand_type" ,"plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") | contains("n_SP")  | contains("Hg")  | contains("Dg"), ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all", 0, .x)) ) %>%
# for the means and sds we calcualted values in the catagories : SP_code, plot and plot. Thus we have to set only NAs that occure in these groups and columns to 0
mutate(across(contains("mean") | contains("sd")  | contains("Hg")  | contains("Dg") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code != "all", 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(trees_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(trees_stock_changes_P), value=TRUE)
trees_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- trees_stock_changes_P[, post_vars] - trees_stock_changes_P[, pre_vars]
trees_stock_changes_P <- trees_stock_changes_P %>% arrange(plot_ID, stand, SP_code, compartiment) %>%
mutate(C_layer = "all")
LT_changes <- dbh_growth_summary %>%
left_join(.,
trees_stock_changes_P %>%
select(stand_component, plot_ID, stand, stand_type, SP_code, compartiment, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "C_layer", "SP_code"),
multiple = "all") %>%  # multiple = "all" for compartiments, which is not represented in dbh growth
left_join(BA_changes_SP_P %>%
select(plot_ID, stand, SP_code, C_layer, contains("diff")) %>%
mutate(across(c("plot_ID"), as.character)),
by = c("plot_ID", "stand", "SP_code", "C_layer") ) %>%
mutate(stand_component = "LT") %>% arrange
View(LT_changes)
# 2. REGENERATION CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
RG_stock_changes_P <-
BZE3_RG_summary %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)) %>%
left_join(., HBI_RG_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)),
by = c("stand_component", "plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") | contains("n_SP") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all" |
is.na(.x) &
plot_ID != "all"&
is.na(stand) &
SP_code == "all" , 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
BZE3_RG_summary
# 2. REGENERATION CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
RG_stock_changes_P <-
BZE3_RG_summary %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)) %>%
left_join(., HBI_RG_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, stand, SP_code, compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_SP)),
by = c("stand_component", "plot_ID", "compartiment", "SP_code", "stand")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_SP we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but stand and species == "all"
mutate(across(contains("n_ha") | contains("n_SP") , ~ifelse(is.na(.x) &
plot_ID != "all"&
stand == "all" &
SP_code == "all" |
is.na(.x) &
plot_ID != "all"&
is.na(stand) &
SP_code == "all" , 0, .x)) ) %>%
arrange(plot_ID, stand, SP_code, compartiment)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(RG_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(RG_stock_changes_P), value=TRUE)
RG_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- RG_stock_changes_P[, post_vars] - RG_stock_changes_P[, pre_vars]
RG_stock_changes_P <- RG_stock_changes_P %>% arrange(plot_ID, stand, SP_code, compartiment)
RG_changes <- RG_stock_changes_P
# 2. DEADWOOD CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "inv", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID","inv", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ . %in% "all"),
0, .x)) ) %>%
arrange(plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay)
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(DW_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(DW_stock_changes_P), value=TRUE)
DW_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- DW_stock_changes_P[, post_vars] - DW_stock_changes_P[, pre_vars]
DW_stock_changes_P <- DW_stock_changes_P %>% arrange(plot_ID, inv, dw_sp, dw_type, ST_LY_type, decay, compartiment)
DW_changes <- DW_stock_changes_P
# 3.1. calculating total difference in stock per plot per ha --------------
# stand_component == "all"
all_components_stock_changes_P <-
BZE3_summary %>% filter(stand_component == "all") %>%
select(stand_component, plot_ID, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha)) %>%
left_join(., HBI_summary %>% filter(stand_component == "all") %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha)),
by = c("stand_component", "plot_ID", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )
all_components_stock_changes_P
# 3.1. calculating total difference in stock per plot per ha --------------
# stand_component == "all"
all_components_stock_changes_P <-
BZE3_summary %>% filter(stand_component == "all") %>%
select(stand_component, plot_ID, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha)) %>%
left_join(., HBI_summary %>% filter(stand_component == "all") %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha)),
by = c("stand_component", "plot_ID", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )
# substact columns edning on BZE3 from columns ednign with HBI
# https://stackoverflow.com/questions/47478125/create-new-columns-by-substracting-column-pairs-from-each-other-in-r
pre_vars <- grep("_HBI", colnames(all_components_stock_changes_P), value=TRUE)
post_vars <- grep("_BZE3", colnames(all_components_stock_changes_P), value=TRUE)
all_components_stock_changes_P[, paste0(str_sub(pre_vars, end=-5), "_diff")] <- all_components_stock_changes_P[, post_vars] - all_components_stock_changes_P[, pre_vars]
all_components_stock_changes_P <- all_components_stock_changes_P %>% arrange(plot_ID, compartiment)
all_components_changes <- all_components_stock_changes_P
LT_RG_DW_P_changes
RG_changes
DW_changes
LT_changes
all_components_changes
# 3.2. binding all forest datasets (LT, RG, DW) together ------------------
LT_RG_DW_P_changes <- plyr::rbind.fill(LT_changes,
RG_changes,
DW_changes, all_components_changes)
LT_RG_DW_P_changes
# 3.2. binding all forest datasets (LT, RG, DW) together ------------------
LT_RG_DW_P_changes <- plyr::rbind.fill(LT_changes,
RG_changes,
DW_changes, all_components_changes) %>%
arrange(plot_ID)
DW_stock_changes_P
LT_changes
RG_stock_changes_P
RG_stock_changes_P %>% select(plot_ID, stand, SP_code, compartiment, contains("diff"))
RG_changes <- RG_stock_changes_P %>% select(plot_ID, stand, SP_code, compartiment, contains("diff"))
RG_changes <- RG_stock_changes_P %>% select(stand_component, plot_ID, stand, SP_code, compartiment, contains("diff"))
RG_changes
DW_changes <- DW_stock_changes_P %>% select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay, compartiment, contains("diff"))
# 2. DEADWOOD CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ . %in% "all"),
0, .x)) ) %>%
arrange(plot_ID, dw_sp, dw_type, ST_LY_type, decay)
DW_stock_changes_P
# 2. DEADWOOD CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID", "dw_sp", "dw_type", "decay",
#"compartiment",
"ST_LY_type" ), ~ ~ x == .x), # . %in% "all"),
0, .x)) ) %>%
arrange(plot_ID, dw_sp, dw_type, ST_LY_type, decay)
# 2. DEADWOOD CALCULATIONS --------------------------------------------
# 2.1. changes in stocks per ha --------------------------------------------
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID", "dw_sp", "dw_type", "decay",
#"compartiment",
"ST_LY_type" ), ~  x == .x), # . %in% "all"),
0, .x)) ) %>%
arrange(plot_ID, dw_sp, dw_type, ST_LY_type, decay)
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ . %in% "all"),
0, .x)) ) %>%
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_all(c("plot_ID", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ x == x.),
0, .x)) )
DW_stock_changes_P
DW_stock_changes_P <-
BZE3_DW_summary %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_BZE3")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m)) %>%
left_join(., HBI_DW_summary %>%
#filter(plot_ID != "all" & SP_code == "all" & stand == "all") %>%
select(stand_component, plot_ID, dw_sp, dw_type, ST_LY_type, decay,
compartiment, B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm, mean_l_m, sd_l_m) %>%
# https://rstats101.com/add-prefix-or-suffix-to-column-names-of-dataframe-in-r/
rename_with(.fn = function(.x){paste0(.x,"_HBI")},
.cols= c(B_t_ha, C_t_ha, N_t_ha, n_ha, n_dec, n_dw_TY, mean_d_cm, sd_d_cm,  mean_l_m, sd_l_m)),
by = c("stand_component", "plot_ID", "dw_sp", "dw_type", "ST_LY_type", "decay", "compartiment")) %>%
# if there are plots/ species or stands that were not established in HBI and thus do not have stocks
# or if there are plots/ species or stands that are not present in BZE3 anymore but have stocks in HBI
# we have to set their stock per ha to 0 to make sure the calculations can also track "negative growth"
mutate(across(contains("t_ha"), ~ifelse(is.na(.x), 0, .x)) )%>%
# for n_ha and n_dw_TY, n_dec we do the same but as these values were calculated only for the whole plot we
# apply the correction only to rows witch plot_ID != all, but decay, dw_type and species  == "all"
mutate(across(contains("n_ha") | contains("n_dec") | contains("n_dw_TY") , ~ifelse(is.na(.x) &
plot_ID != "all"&
dw_sp == "all" &
dw_type == "all" &
decay == "all" , 0, .x)) ) %>%
# this is to replace NA for missing average values. Average values were calcualted for the following groups:
# everything != "all" excecpt decay == "all"
# everything ! = "all" except dw_type == "all"
# Everything != "all" except dw_sp == "all"
# https://stackoverflow.com/questions/69560076/r-applying-condition-across-multiple-columns-ignoring-na
# mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_any(c("plot_ID", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ . %in% "all"),
#                                                           0, .x)) ) %>%
# mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & if_all(c("plot_ID", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~ x == x.),
#                                                           0, .x)) ) %>%
mutate(across(contains("mean") | contains("sd") , ~ifelse(is.na(.x) & across(c("plot_ID", "dw_sp", "dw_type", "decay", "compartiment", "ST_LY_type" ), ~`==`(.x, x)),
0, .x)) ) %>%
arrange(plot_ID, dw_sp, dw_type, ST_LY_type, decay)

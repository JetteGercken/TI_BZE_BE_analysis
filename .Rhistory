my.CF.share >= 70 &
# but there is still a high amount of BL trees >30%
my.BL.share <= 30, 9,         # "Nd-Lb<30",
ifelse(is.na(besttype.mono) &
# if there are more BL then CF (BL min 50%, BL <50%)
my.BL.share >= 70 &
# but there is still a high amount of CF trees >30%
my.CF.share <= 30, 10, # "Lb-Nd<30",
NA))
besttype.final <- ifelse(!is.na(besttype.mono) &
is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.mono,
ifelse(is.na(besttype.mono) &
!is.na(besttype.strong.mix) &
is.na(besttype.mix), besttype.strong.mix,
ifelse(is.na(besttype.mono) &
is.na(besttype.strong.mix) &
!is.na(besttype.mix), besttype.mix, NA)))
besttype_list[[i]] <- as.data.frame(cbind(
plot_ID = c(my.plot.id),
inv_year = c(my.inv.year),
dom_SP = c(main.sp.p.df$SP_code),
stand_type = c(besttype.final),
n_stands = c(my.n.stand),
stand_component = c("LT")
)) %>%
distinct()
}
LT_stand_TY_P <- as.data.frame(rbindlist(besttype_list))
LT_stand_TY_P
LT_ST_BCNBAn_ha
# 1.4.4. Plot, species: stocks per hektar ------------------------------------------------------
LT_SP_BCNBA_ha <- summarize_data(LT_SP_ST_P_BCNBAn_ha,
c("plot_ID", "inv_year", "compartiment", "SP_code"),
c("B_t_ha", "C_t_ha", "N_t_ha", "BA_m2_ha"),
operation = "sum_df") %>%
mutate(stand_component = "LT",
stand = "all") %>%
#calcualte species compostiion by calcualting the percent of the respective species contributes to the overall basal area
left_join(LT_BCNBAn_ha %>%
select(plot_ID, inv_year, compartiment, BA_m2_ha) %>%
rename(BA_m2_ha_total = BA_m2_ha),
by = c("plot_ID", "inv_year", "compartiment"), ) %>%
distinct() %>%
mutate(BA_percent = (BA_m2_ha/BA_m2_ha_total)*100) %>%
select(-"BA_m2_ha_total")
LT_SP_BCNBA_ha
# 1.6. average values ----------------------------------------------------
# 1.6.1. create "pseudo stands" -------------------------------------------
LT_avg_SP_P_list <- vector("list", length = length(unique(trees_data$plot_ID)))
LT_avg_P_list <- vector("list", length = length(unique(trees_data$plot_ID)))
for (i in 1:length(unique(trees_data$plot_ID))) {
# i = 1
my.plot.id <- unique(trees_data$plot_ID)[i]
# select all trees by only one compartiment of each tree to make sure the tree enters the dataframe only once
my.tree.df <- trees_data[trees_data$plot_ID == my.plot.id & trees_data$compartiment == "ag", ]
my.n.ha.df <- trees_data %>% filter(compartiment == "ag" & plot_ID == my.plot.id) %>% group_by(plot_ID, CCS_r_m) %>% reframe(n_ha_CCS = n()/plot_A_ha) %>% distinct()
my.n.plot.df <- trees_data %>% filter(compartiment == "ag" & plot_ID == my.plot.id) %>% group_by(plot_ID, CCS_r_m) %>% reframe(n_CCS = n()) %>% distinct()
my.n.ha.df$n.rep.each.tree <- round(my.n.ha.df$n_ha_CCS/my.n.plot.df$n_CCS)
# repeat every tree per circle by the number this tree would be repeated by to reach itÂ´s ha number
# so every tree id repeated as often as it would be represented on a hectar)
# https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame
my.tree.rep.df <- rbind(
# 5m circle
my.tree.df[my.tree.df$CCS_r_m == 5.64, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 5.64, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 5.64]), ],
# 12m circle
my.tree.df[my.tree.df$CCS_r_m == 12.62, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 12.62, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 12.62] ), ],
# 17m circle
my.tree.df[my.tree.df$CCS_r_m == 17.84, ][rep(seq_len(nrow(my.tree.df[my.tree.df$CCS_r_m == 17.84, ])),
each = my.n.ha.df$n.rep.each.tree[my.n.ha.df$CCS_r_m == 17.84]), ])
LT_avg_SP_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv_year, SP_code) %>%
summarise(stand = "all",
mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
LT_avg_P_list[[i]] <- my.tree.rep.df %>%
group_by(plot_ID, inv_year) %>%
summarise(SP_code = "all",
stand = "all",
mean_DBH_cm = mean(DBH_cm),
sd_DBH_cm = sd(DBH_cm),
Dg_cm = ((sqrt(mean(BA_m2)/pi))*2)*100,
mean_BA_m2 = mean(BA_m2),
mean_H_m = mean(H_m),
sd_H_m = sd(H_m),
Hg_m = sum(mean(na.omit(mean_H_m))*sum(BA_m2))/sum(sum(BA_m2))) %>%
mutate(stand_component = "LT")
}
LT_avg_SP_P <- as.data.frame(rbindlist(LT_avg_SP_P_list))
LT_avg_P <- as.data.frame(rbindlist(LT_avg_P_list))
# 1.7. binding LT data together -------------------------------------------------------------------------------------------------------
# 1.7.1. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_ST_P <- LT_SP_ST_P_BCNBAn_ha  %>%
select(-(n_ha))
# 1.7.1. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_P <- LT_SP_BCNBA_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year', 'n_stands'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., LT_avg_SP_P,
by = c("plot_ID", "inv_year", "stand_component", "SP_code", "stand"))
# 1.7.2. LT stand data ----------------------------------------------------
LT_ST_P <- LT_ST_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component"))
# 1.7.3. LT plot data ----------------------------------------------------------------------------------------------------------------
LT_P <- LT_BCNBAn_ha %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., LT_avg_P,
by = c("plot_ID", "inv_year", "stand_component", "SP_code", "stand")) %>%
left_join(., LT_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component"))
LT_SP_P
# 1.7.2. LT stand data ----------------------------------------------------
LT_ST_P <- LT_ST_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component"))
LT_ST_P
# 1.7.3. LT plot data ----------------------------------------------------------------------------------------------------------------
LT_P <- LT_BCNBAn_ha %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., LT_avg_P,
by = c("plot_ID", "inv_year", "stand_component", "SP_code", "stand")) %>%
left_join(., LT_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component"))
LT_P
# 1.7.4. summrizing LT data by stand type ---------------------------------
LT_TY <- LT_P %>%
group_by(stand_type, compartiment, stand_component, inv_year) %>%
summarise(B_t_ha = mean(B_t_ha),
C_t_ha = mean(C_t_ha),
N_t_ha = mean(N_t_ha)) %>%
left_join(.,
LT_P %>%
filter(compartiment == "ag") %>%
group_by(stand_type, compartiment, stand_component, inv_year) %>%
summarise(BA_m2_ha = mean(BA_m2_ha),
n_ha = mean(n_ha),
n_SP = mean(n_SP)) %>%
ungroup() %>%
select(-c("compartiment")),
by = c("stand_type", "stand_component", "inv_year")) %>%
mutate(plot_ID = "all",
dom_SP = "all",
SP_code = "all")
# 1.7.5. rbinding LT data together ----------------------------------------
LT_summary <- plyr::rbind.fill(LT_SP_P,
LT_ST_P,
LT_P,
LT_TY) %>%
arrange(plot_ID)
LT_summary
# if there are plots that are labelled empty but have to included in the eare calcualtion
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_plot_A_ha <- rbind(RG_data %>%
mutate(plot_A_ha = area_m2/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct(),
RG_stat_2 %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha)) %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))}else{
RG_plot_A_ha <- RG_data %>%
mutate(plot_A_ha = area_m2/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))
}
# 2.2. number of RG  plants  per hectar ----------------------------------------------
RG_n_ha <- RG_data %>%
filter(compartiment == "ag") %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, inv_year) %>%
# sum number of trees  per sampling circuit
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "RG")
# 2.3. number of RG  species per hectar ----------------------------------------------
RG_n_SP_plot <- RG_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, SP_code) %>%
group_by(plot_ID, inv_year) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "RG")
# 2.4. RG big summary combining all grouping variables --------------------------------------------------------
# 2.4.1. RG summary by plot, inventory, compartiment, species and  -------------------------------------------
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_SP_ST_BCN_ha <- plyr::rbind.fill(
RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum number of trees  per sampling circuit
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct() ,
RG_stat_2 %>%
select(plot_ID, CCS_nr, plot_A_ha, inv_year, compartiment, B_t_ha, C_t_ha, N_t_ha)
) %>%
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha))%>%
mutate(stand_component = "RG")
}else{
RG_SP_ST_BCN_ha <-     RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum stocks of trees  per sampling circuit, stand, compartiment, and SP_code
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "RG")
}
# 2.4.2. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
RG_summary <- plyr::rbind.fill(
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all"),
# 2.4.3. RG summary by plot and stand, without grouping by species ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "stand"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(SP_code = "all"),
# 2.4.4. RG summary by plot, inventory, compartiment, not by speci --------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv_year,stand_component, n_ha),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component")) %>%
mutate(n_ha = ifelse(is.na(n_ha), 0, n_ha),
n_SP = ifelse(is.na(n_SP), 0, n_SP),
stand = "all",
SP_code = "all")
) %>% # close rbind
distinct() %>%
arrange(plot_ID)
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. DW summary per plot per SP per DW type per Dec state ---------------------------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-c(X, plot_A_ha))) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
# 3.4. DW big summary including all grouping variables and combinations -------------------------
# 3.4.1. grouped by species, decay type, deadwoodtype, plot, compartiment, inventory ------------------------------------------------------------------
DW_summary <-
plyr::rbind.fill(
DW_BCN_ha_SP_TY_DEC_P,
# 3.4.2. grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore------------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# 3.4.3. DW grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore --------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all") ,
# 3.4.4. DW grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# 3.4.5. DW grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, ST_LY_type, dw_type) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_type"),
multiple = "all") %>%
mutate(dw_sp = "all",
decay = "all"),
# 3.4.6. DW grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, decay) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "decay"),
multiple = "all") %>%
mutate(dw_sp = "all",
dw_type = "all") ,
# 3.4.7. DW grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
# mean and sd of length and diameter of deadwood
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, dw_sp) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_sp"),
multiple = "all") %>%
mutate(decay = "all",
dw_type = "all") ,
# 3.4.8.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
distinct() %>%
# number of DW items per ha
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct(),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of decay types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, decay) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dec = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of deadwood types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, dw_type) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dw_TY = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%  # close rbind
# add stand component for those datasets where itÂ´s not included yet
mutate(stand_component = "DW") %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
LT_RG_DW_P <- rbind(
# plotwise summar yof tree dataset
LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# as there is no bg and total compartiment, this filter will only select ag compartiments
filter(compartiment %in% c("ag", "bg", "total")),
# take all "ag" compartiments of DW and assign them to the compartiment "total" as well, so we can create a row of total stocks for all stand components
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total"),
# total plot data over all stand components
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all")) %>%
arrange(plot_ID)
LT_summary
# 4. data export ----------------------------------------------------------
write.csv2(LT_summary, paste0(out.path.BZE3, paste(inv_name(LT_summary$inv_year[1]), "LT_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(RG_summary, paste0(out.path.BZE3, paste(inv_name(RG_summary$inv_year[1]), "RG_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(DW_summary, paste0(out.path.BZE3, paste(inv_name(DW_summary$inv_year[1]), "DW_stocks_ha_all_groups", sep = "_"), ".csv"))
HBI_summary <- read.delim(file = here(paste0(out.path.BZE3, "HBI_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1, -9) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, stand, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, stand, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code")) %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
# 1.2. grouping growth ------------------------------------------------------------------
growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"))
# 1.3. changes in BA composition -------------------------------------------
# select all possible tree species per plot
BA_changes_SP_P <- rbind(BZE3_trees %>% select(plot_ID, SP_code) %>% distinct(),
HBI_trees %>% select(plot_ID, SP_code) %>% distinct()) %>%
distinct() %>%
arrange(plot_ID) %>%
left_join(., BZE3_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all") %>%
# select the BA percent
select(plot_ID, SP_code, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_BZE3 = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code")) %>%
left_join(., HBI_summary %>%
# filter for plot and species wise summary
filter(plot_ID != "all" & SP_code != "all" & stand == "all") %>%
# select the BA percent
select(plot_ID, SP_code, BA_percent) %>%
mutate(across(c("plot_ID"), as.integer)) %>%
rename(BA_percent_HBI = BA_percent) %>%
distinct(),
by = c("plot_ID", "SP_code")) %>%
# here we have to set the BA_percent that do not appear in the respective inventory to 0
mutate(BA_percent_BZE3 = ifelse(is.na(BA_percent_BZE3), 0, BA_percent_BZE3),
BA_percent_HBI = ifelse(is.na(BA_percent_HBI), 0, BA_percent_HBI),
BA_percent_difference = BA_percent_BZE3-BA_percent_HBI)
BZE3_summary <- read.delim(file = here(paste0(out.path.BZE3, "BZE3_LT_stocks_ha_all_groups.csv")), sep = ";", dec = ",")

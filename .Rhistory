# to get the plotwise summarised data one has to filter for:
# plot_ID != "all" & SP_code == "all" & stand  == "all"
# to get the species & plotwise wise summarised data one has to filter for:
# plot_ID != "all" & SP_code != "all" & stand == "all"
# to get the stand & plotwise  wise summarised data one has to filter for:
# plot_ID != "all" & SP_code == "all" & stand != "all"
# to get the stand , species & plotwise  wise summarised data one has to filter for:
# plot_ID != "all" & SP_code != "all" & stand != "all"
# 2. REGENERATION ---------------------------------------------------------
# 2.1. plot area - sum off all sampling circuits ---------------------------
# if there are plots that are labelled empty but have to included in the eare calcualtion
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_plot_A_ha <- rbind(RG_data %>%
mutate(plot_A_ha = area_m2/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct(),
RG_stat_2 %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha)) %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))}else{
RG_plot_A_ha <- RG_data %>%
mutate(plot_A_ha = area_m2/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))
}
# 2.2. number of RG  plants  per hectar ----------------------------------------------
RG_n_ha <- RG_data %>%
filter(compartiment == "ag") %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, inv_year) %>%
# sum number of trees  per sampling circuit
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "RG")
# 2.3. number of RG  species per hectar ----------------------------------------------
RG_n_SP_plot <- RG_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, SP_code) %>%
group_by(plot_ID, inv_year) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "RG")
# 2.4. RG big summary combining all grouping variables --------------------------------------------------------
# 2.4.1. RG summary by plot, inventory, compartiment, species and  -------------------------------------------
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_SP_ST_BCN_ha <- plyr::rbind.fill(
RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum number of trees  per sampling circuit
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct() ,
RG_stat_2 %>%
select(plot_ID, CCS_nr, plot_A_ha, inv_year, compartiment, B_t_ha, C_t_ha, N_t_ha)
) %>%
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha))%>%
mutate(stand_component = "RG")
}else{
RG_SP_ST_BCN_ha <-     RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum stocks of trees  per sampling circuit, stand, compartiment, and SP_code
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "RG")
}
# 2.4.2. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
RG_summary <- plyr::rbind.fill(
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all"),
# 2.4.3. RG summary by plot and stand, without grouping by species ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "stand"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(SP_code = "all"),
# 2.4.4. RG summary by plot, inventory, compartiment, not by speci --------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv_year,stand_component, n_ha),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component")) %>%
mutate(n_ha = ifelse(is.na(n_ha), 0, n_ha),
n_SP = ifelse(is.na(n_SP), 0, n_SP),
stand = "all",
SP_code = "all")
) %>% # close rbind
distinct() %>%
arrange(plot_ID)
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. DW summary per plot per SP per DW type per Dec state ---------------------------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-c(X, plot_A_ha))) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
# 3.4. DW big summary including all grouping variables and combinations -------------------------
# 3.4.1. grouped by species, decay type, deadwoodtype, plot, compartiment, inventory ------------------------------------------------------------------
DW_summary <-
plyr::rbind.fill(
DW_BCN_ha_SP_TY_DEC_P,
# 3.4.2. grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore------------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# 3.4.3. DW grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore --------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all") ,
# 3.4.4. DW grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# 3.4.5. DW grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, ST_LY_type, dw_type) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_type"),
multiple = "all") %>%
mutate(dw_sp = "all",
decay = "all"),
# 3.4.6. DW grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, decay) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "decay"),
multiple = "all") %>%
mutate(dw_sp = "all",
dw_type = "all") ,
# 3.4.7. DW grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
# mean and sd of length and diameter of deadwood
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
distinct() %>%
group_by(plot_ID, inv_year, dw_sp) %>%
summarise(mean_d_cm = mean(d_cm),
sd_d_cm = sd(d_cm),
mean_l_m = mean(l_dm/10),
sd_l_m = sd(l_dm/10)),
by = c("plot_ID", "inv_year", "dw_sp"),
multiple = "all") %>%
mutate(decay = "all",
dw_type = "all") ,
# 3.4.8.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
distinct() %>%
# number of DW items per ha
left_join(., DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct(),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of decay types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, decay) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dec = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
# number of deadwood types per plot
left_join(DW_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, dw_type) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(n_dw_TY = n()),
multiple = "all",
by = c("plot_ID", "inv_year")) %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%  # close rbind
# add stand component for those datasets where it´s not included yet
mutate(stand_component = "DW") %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
LT_RG_DW_P <- rbind(
# plotwise summar yof tree dataset
LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>%
# as there is no bg and total compartiment, this filter will only select ag compartiments
filter(compartiment %in% c("ag", "bg", "total")),
# take all "ag" compartiments of DW and assign them to the compartiment "total" as well, so we can create a row of total stocks for all stand components
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total"),
# total plot data over all stand components
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all")) %>%
arrange(plot_ID)
# 4. data export ----------------------------------------------------------
write.csv2(LT_summary, paste0(out.path.BZE3, paste(inv_name(LT_summary$inv_year[1]), "LT_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(RG_summary, paste0(out.path.BZE3, paste(inv_name(RG_summary$inv_year[1]), "RG_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(DW_summary, paste0(out.path.BZE3, paste(inv_name(DW_summary$inv_year[1]), "DW_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(LT_RG_DW_P, paste0(out.path.BZE3, paste(inv_name(LT_RG_DW_P$inv_year[1]), "LT_RG_DW_stocks_ha_all_groups", sep = "_"), ".csv"))
LT_SP_ST_P_BCNBAn_ha
LT_SP_ST_P
# 1.7.6. rbinding LT data together ----------------------------------------
LT_summary <- plyr::rbind.fill(LT_SP_ST_P,
LT_SP_P,
LT_ST_P,
LT_P,
LT_TY) %>%
arrange(plot_ID)
LT_summary
LT_stand_TY_P
# 1.7.1. LT Species data -------------------------------------------------------------------------------------------------------------
LT_SP_ST_P <- LT_SP_ST_P_BCNBAn_ha  %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component"))  %>%
select(-(n_ha))
LT_SP_ST_P
RG_summary
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all")
RG_SP_ST_BCN_ha
RG_summary
DW_summary
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha))
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all"))
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all")
LT_summary
RG_summary
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>% arrange(plot_ID)
LT_stand_TY_P
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
arrange(plot_ID)
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('plot_ID', 'inv_year'), as.character),
by = c("plot_ID", "inv_year", "stand_component")) %>%
arrange(plot_ID)
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
arrange(plot_ID)
LT_RG_DW_P <-
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('inv_year'), as.integer),
by = c("plot_ID", "inv_year", "stand_component")) %>%
arrange(plot_ID)
view(LT_RG_DW_P)
write.csv2(LT_RG_DW_P, paste0(out.path.BZE3, paste(inv_name(LT_RG_DW_P$inv_year[1]), "LT_RG_DW_stocks_ha_all_groups", sep = "_"), ".csv"))
LT_RG_DW_P <-
plyr::rbind.fill(
#deadwood summary all group combination possible
LT_summary %>% select(-c(dom_SP, stand_type, n_stands))
#regeneration summary all group combination possible
,RG_summary
#deadwood summary all group combination possible
,DW_summary,
# dataset with all stand compnents, stand and species combined
(rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_summary %>% filter(stand == "all" & SP_code == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_summary %>% filter(decay == "all" & dw_type == "all" & dw_sp == "all") %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all",
stand = "all",
SP_code = "all"))
) %>%
left_join(., LT_stand_TY_P %>%
mutate_at(c('inv_year'), as.integer),
by = c("plot_ID", "inv_year")) %>%
arrange(plot_ID)
write.csv2(LT_RG_DW_P, paste0(out.path.BZE3, paste(inv_name(LT_RG_DW_P$inv_year[1]), "LT_RG_DW_stocks_ha_all_groups", sep = "_"), ".csv"))
paste0(getwd(), "/scripts/01_00_functions_library.R")
parse(paste0(getwd(), "/scripts/01_00_functions_library.R"))
parse(paste0(getwd(), "/scripts/01_00_functions_library.R"))
parse(file = paste0(getwd(), "/scripts/01_00_functions_library.R"))
parse(srcfile = paste0(getwd(), "/scripts/01_00_functions_library.R"))
parse(file = paste0(getwd(), "/scripts/01_00_functions_library.R"))
parse(file = try(paste0(getwd(), "/scripts/01_00_functions_library.R")))
parsetry(paste0(getwd(), "/scripts/01_00_functions_library.R")))
parse(try(paste0(getwd(), "/scripts/01_00_functions_library.R")))
parse(evaluate(paste0(getwd(), "/scripts/01_00_functions_library.R")))
#### common/ general operations -------------------------------------------------------------------------------------------------------------------------------------------------------------------
# functions & packages
source(paste0(here(), "/scripts/01_00_functions_library.R"))
# data wrangling & sorting for bark and fruit types for forest structural indeyx calcualtion
source(paste0(here(), "/scripts/03_00_bark_fruit_types_FSI.R"))
# data wrangling & sorting for bark and fruit types for forest structural indeyx calcualtion
try(source(paste0(here(), "/scripts/03_00_bark_fruit_types_FSI.R")))

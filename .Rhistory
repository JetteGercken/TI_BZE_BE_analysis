#print(plot(remaining.circle.17.1$geometry, main = paste0(my.plot.id, "-", my.e.form.1,  "-", c.r3)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.17.2 <- st_intersection(remaining.circle.17.1, my.poly.2)
inter.status.poly.17.2 <- ifelse(nrow(inter.poly.17.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.17.2$geometry == remaining.circle.17.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.17.2$geometry == remaining.circle.17.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.17.2 <- if(isTRUE(inter.poly.17.2) && inter.poly.17.2$geometry == remaining.circle.17.1$geometry){inter.poly.17.2 <- data.frame()}else{inter.poly.17.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.17.1.and.2.poly <- if(nrow(inter.poly.17.2)==0){remaining.circle.17.1}else{sf::st_difference(remaining.circle.17.1, inter.poly.17.2)}
#print(plot(remaining.circle.17.1.and.2.poly$geometry, main = paste0(my.plot.id, "-", my.e.form.2,  "-", c.r3)))
### 12m circle
my.circle = circle.12
## create poolygon of intersection for first polygon with circle
inter.poly.12.1  <- st_intersection(my.circle, my.poly.1)
inter.status.poly.12.1 <- ifelse(nrow(inter.poly.12.1) == 0, "no intersections",
ifelse(my.e.form.1 == 1 & inter.poly.12.1$geometry == my.circle$geometry,  "no intersections",
ifelse(my.e.form.1 == 2 & inter.poly.12.1$geometry == my.circle$geometry, "fully covering circle",
"partly intersecting")))
# if the first ednge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections and the circle is passed on to the next edge to calcualte the intersection
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.12.1 <- if(isTRUE(inter.poly.12.1) && inter.poly.12.1$geometry == my.circle$geometry){inter.poly.12.1 <- data.frame()}else{inter.poly.12.1}
## create poolygon of remaining circle after first edge polygone is intersected
# create poly with remaining area: https://gis.stackexchange.com/questions/353633/r-spatial-erase-one-polygon-from-another-correct-use-of-st-difference
remaining.circle.12.1 <- if(nrow(inter.poly.12.1)==0){my.circle}else{sf::st_difference(my.circle, inter.poly.12.1)}
# print(plot(remaining.circle.12.1$geometry, main = paste0(my.plot.id, "-",my.e.form.1,  "-", c.r2)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.12.2 <- st_intersection(remaining.circle.12.1, my.poly.2)
inter.status.poly.12.2 <- ifelse(nrow(inter.poly.12.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.12.2$geometry == remaining.circle.12.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.12.2$geometry == remaining.circle.12.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.12.2 <- if(isTRUE(inter.poly.12.2) && inter.poly.12.2$geometry == remaining.circle.12.1$geometry){inter.poly.12.2 <- data.frame()}else{inter.poly.12.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.12.1.and.2.poly <- if(nrow(inter.poly.12.2)==0){remaining.circle.12.1}else{sf::st_difference(remaining.circle.12.1, inter.poly.12.2)}
#print(plot(remaining.circle.12.1.and.2.poly$geometry, main = paste0(my.plot.id, "-", my.e.form.2,  "-", c.r2)))
### 5m circle
my.circle = circle.5
## create poolygon of intersection for first polygon with circle
inter.poly.5.1  <- st_intersection(my.circle, my.poly.1)
inter.status.poly.5.1 <- ifelse(nrow(inter.poly.5.1) == 0, "no intersections",
ifelse(my.e.form.1 == 1 & inter.poly.5.1$geometry == my.circle$geometry,  "no intersections",
ifelse(my.e.form.1 == 2 & inter.poly.5.1$geometry == my.circle$geometry, "fully covering circle",
"partly intersecting")))
# if the first ednge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections and the circle is passed on to the next edge to calcualte the intersection
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.5.1 <- if(isTRUE(inter.poly.5.1) && inter.poly.5.1$geometry == my.circle$geometry){inter.poly.5.1 <- data.frame()}else{inter.poly.5.1}
## create poolygon of remaining circle after first edge polygone is intersected
# create poly with remaining area: https://gis.stackexchange.com/questions/353633/r-spatial-erase-one-polygon-from-another-correct-use-of-st-difference
remaining.circle.5.1 <- if(nrow(inter.poly.5.1)==0){my.circle}else{sf::st_difference(my.circle, inter.poly.5.1)}
# print(plot(remaining.circle.5.1$geometry, main = paste0(my.plot.id, "-",my.e.form.1,  "-", c.r1)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.5.2 <- st_intersection(remaining.circle.5.1, my.poly.2)
inter.status.poly.5.2 <- ifelse(nrow(inter.poly.5.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.5.2$geometry == remaining.circle.5.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.5.2$geometry == remaining.circle.5.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.5.2 <- if(isTRUE(inter.poly.5.2) && inter.poly.5.2$geometry == remaining.circle.5.1$geometry){inter.poly.5.2 <- data.frame()}else{inter.poly.5.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.5.1.and.2.poly <- if(nrow(inter.poly.5.2)==0){remaining.circle.5.1}else{sf::st_difference(remaining.circle.5.1, inter.poly.5.2)}
plot(remaining.circle.17.1.and.2.poly$geometry, main = paste0(my.plot.id, " - ", my.e.form.1, " - ", my.e.form.2))
plot(remaining.circle.12.1.and.2.poly$geometry, add = T)
plot(remaining.circle.5.1.and.2.poly$geometry, add = T)
#### calculate the area
## 17m cricle
# area of the intersection 1
inter.17.1.area <- ifelse(nrow(inter.poly.17.1) == 0, 0, sf::st_area(inter.poly.17.1))
# area of the intersection polygone 2
inter.17.2.area <- ifelse(nrow(inter.poly.17.2) == 0, 0, sf::st_area(inter.poly.17.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.17 <- sf::st_area(remaining.circle.17.1.and.2.poly)
# save area in dataframe
inter.area.df.17 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id), "e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"CCS_r_m" = c(c.r3, c.r3, c.r3), "inter_stat" = c(inter.status.poly.17.1, inter.status.poly.17.2, 0),
"area_m2" = c(inter.17.1.area, inter.17.2.area, remaining.circle.area.17)
))
## 12m cricle
# area of the intersection 1
inter.12.1.area <- ifelse(nrow(inter.poly.12.1) == 0, 0, sf::st_area(inter.poly.12.1))
# area of the intersection polygone 2
inter.12.2.area <- ifelse(nrow(inter.poly.12.2) == 0, 0, sf::st_area(inter.poly.12.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.12 <- sf::st_area(remaining.circle.12.1.and.2.poly)
# save area in dataframe
inter.area.df.12 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id), "e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"CCS_r_m" = c(c.r2, c.r2, c.r2), "inter_stat" = c(inter.status.poly.12.1, inter.status.poly.12.2, 0),
"area_m2" = c(inter.12.1.area, inter.12.2.area, remaining.circle.area.12)
))
## 5m cricle
# area of the intersection 1
inter.5.1.area <- ifelse(nrow(inter.poly.5.1) == 0, 0, sf::st_area(inter.poly.5.1))
# area of the intersection polygone 2
inter.5.2.area <- ifelse(nrow(inter.poly.5.2) == 0, 0, sf::st_area(inter.poly.5.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.5 <- sf::st_area(remaining.circle.5.1.and.2.poly)
# save area in dataframe
inter.area.df.5 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id),
"e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"CCS_r_m" = c(c.r1, c.r1, c.r1),
"inter_stat" = c(inter.status.poly.5.1, inter.status.poly.5.2, 0),
"area_m2" = c(inter.5.1.area, inter.5.2.area, remaining.circle.area.5)
))
# bind area datafames of all 3 circles together
inter.area.df <- rbind(inter.area.df.17, inter.area.df.12,inter.area.df.5 )
# assing stand to the edges depedning on area
stand.df <- inter.area.df%>%
filter(CCS_r_m  == 17.84) %>%
mutate(area_m2 = as.numeric(area_m2)) %>%
group_by(plot_ID) %>%
arrange(area_m2) %>%
# lowest area receives stand ID C, then B, then A
mutate(stand = case_when(
row_number()== 1 ~ "C",
row_number()== 2 ~ "B",
row_number()== 3 ~ "A",
TRUE ~ NA)) %>%
# make stand.df joinable by only leaving plot_ID, e_ID, no matter the diameter of the CCS
select(- c(CCS_r_m, inter_stat, area_m2))
# join in stand info based on area of the edge segment
inter.area.df <- inter.area.df %>% left_join(., stand.df,
by = c("plot_ID", "e_ID"))
# save datacframe per plot in list
edges.list.two.edges.nogeo[[i]] <- inter.area.df
# create list with those plot ID where the two edges intersect within the radius of 17.84m
intersection.between.edges.17 <- sf::st_intersection(
sf::st_intersection(my.poly.1, circle.17), # intersection poly 1 and cirlce 17
sf::st_intersection(my.poly.2, circle.17) # intersection poly 2 and cirlce 17
)
intersection.warning.edges <- ifelse(nrow(intersection.between.edges.17) == 0, NA, intersection.between.edges.17$plot_ID)
intersection.warning.edges.list.nogeo[[i]] <- as.data.frame(cbind("plot_ID" = c(intersection.warning.edges)))
## save intersection polygones in list
# poly.1
inter.poly.1.list.nogeo[[i]] <- if(nrow(inter.poly.17.1)!= 0){c(inter.poly.17.1)}else{c(my.poly.1)}
# poly.2
inter.poly.2.list.nogeo[[i]] <- if(nrow(inter.poly.17.2)!= 0){c(inter.poly.17.2)}else{c( my.poly.2)}
## save the reimaingf circle polygones in a list
remaining.circle.17.1.and.2.poly$plot_ID <- my.plot.id
remaining.circle.17.1.and.2.poly$e_ID <- 0
remaining.circle.17.1.and.2.poly$e_form <- 0
remaining.circle.17.1.and.2.poly$geometry <- remaining.circle.17.1.and.2.poly$geometry
# create list wit polygones of the remaining cirlce when it´s only one polygone
rem.circle.poly.2.edges.list.nogeo[[i]] <- if(st_geometry_type(remaining.circle.17.1.and.2.poly)== "POLYGON"){c(remaining.circle.17.1.and.2.poly)}else{}
# create list wit polygones of the remaining cirlce when it´s a multipoligone
rem.circle.multipoly.2.edges.list.nogeo[[i]] <- if(st_geometry_type(remaining.circle.17.1.and.2.poly)== "MULTIPOLYGON"){c(remaining.circle.17.1.and.2.poly)}else{}
}
# save areas into dataframe
edges.list.two.edges.final.nogeo <- rbindlist(edges.list.two.edges.nogeo)
edges.area.two.edges.df.nogeo <- as.data.frame(edges.list.two.edges.final.nogeo)
# save plot IDs with overlappig edges within the 17.84m circle into dataframe
intersection.two.edges.warning.final.nogeo <- rbindlist(intersection.warning.edges.list.nogeo, fill=TRUE)
intersection.two.edges.warning.df.nogeo <- na.omit(as.data.frame(intersection.two.edges.warning.final.nogeo))
if(nrow(intersection.two.edges.warning.df.nogeo)!=0){print("There are plots with overlapping edges within a 17.84m radius around the plot center.
Please check dataset intersection.two.edges.warning.df.nogeo")}
# save intersection polygones into dataframe
# list of polygones 1 of forest edges
inter.poly.1.list.final.nogeo <- rbindlist(inter.poly.1.list.nogeo, fill=TRUE)
inter.poly.1.two.edges.df.nogeo <- as.data.frame(inter.poly.1.list.final.nogeo)
# list of polygones 2 of forest edges
inter.poly.2.list.final.nogeo <- rbindlist(inter.poly.2.list.nogeo, fill=TRUE)
inter.poly.2.two.edges.df.nogeo <- as.data.frame(inter.poly.2.list.final.nogeo)[,c(1,2,3,4)]
# bind the both edges per plot together
inter.poly.two.edges.df.nogeo <- rbind(inter.poly.1.two.edges.df.nogeo, inter.poly.2.two.edges.df.nogeo) %>% arrange(plot_ID, e_ID)
# list of polygones of remainign circles
rem.circle.poly.two.edges.list.final.nogeo <- rbindlist(rem.circle.poly.2.edges.list.nogeo, fill = TRUE)
rem.circle.poly.two.edges.df.nogeo <- as.data.frame(rem.circle.poly.two.edges.list.final.nogeo)[,c(1,2,3,4)]  %>% distinct()
# list of multipolygones of remaining circles
rem.circle.multipoly.two.edges.list.final.nogeo <- rbindlist(rem.circle.multipoly.2.edges.list.nogeo)
rem.circle.multipoly.two.edges.df.nogeo <- as.data.frame(rem.circle.multipoly.two.edges.list.final.nogeo)[,c(1,2,3,10)] %>% distinct()
# binding the both circle lists back together
rem.circle.two.edges.df.nogeo <- if(nrow(rem.circle.poly.two.edges.df.nogeo) != 0 && nrow(rem.circle.multipoly.two.edges.list.final.nogeo) != 0){
rbind(rem.circle.poly.two.edges.df.nogeo, rem.circle.multipoly.two.edges.df.nogeo)
}else{rem.circle.poly.two.edges.df.nogeo}
# bind all edges area dataframes together
all.edges.area.df.nogeo <- rbind(edges.area.df.nogeo, edges.area.two.edges.df.nogeo) %>% mutate(area_m2 = as.numeric(area_m2))
# 3.2.2. sorting TREES into edge and remaining circle polygones ---------
# 3.2.2.1. plots with one edge: sorting trees into edge and remaining circle polygones ---------
trees.one.edge.nogeo <- HBI_trees %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges_HBI.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
# filter for trees located in plots htat haev only one forest edge
anti_join(forest_edges_HBI.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>% group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") #%>%
tree.status.list.nogeo <- vector("list", length = length(trees.one.edge.nogeo$tree_ID))
tree.points.list.nogeo <- vector("list", length = length(trees.one.edge.nogeo$tree_ID))
for (i in 1:length(trees.one.edge.nogeo$tree_ID)){
#i = 997
# i = which(grepl(50133, (trees.one.edge.nogeo$plot_ID)))[7]
# select plot ID accordint to positioin in the list
my.plot.id <- trees.one.edge.nogeo[i, "plot_ID"]
my.tree.id <- trees.one.edge.nogeo[i, "tree_ID"]
my.inv <- trees.one.edge.nogeo[i, "inv"]
# select the remaining cirlce we want to intersect the tree with
my.rem.circle <- sf::st_as_sf(rem.circle.one.edge.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct())
my.inter <- sf::st_as_sf(inter.poly.one.edge.df.nogeo  %>% filter(plot_ID == my.plot.id) %>% distinct())
# sort area dataframe by size of cirlce fragments:
# bigger polygone/ polygone with greater area is assigned to category A, smaller area polygone is assigned to B
area.plot.df <- edges.area.df.nogeo %>% filter(plot_ID == my.plot.id & CCS_r_m == 17.84) %>%
arrange(area_m2) %>%
mutate(stand = case_when(
row_number()== 1 ~ "B",
row_number()== 2 ~ "A",
TRUE ~ NA))
# assign stand category to the polygones depending on which one is bigger/ smaller
my.rem.circle$stand <- area.plot.df$stand[area.plot.df$e_ID == 0]
my.inter$stand <- area.plot.df$stand[area.plot.df$e_ID == 1 | area.plot.df$e_ID == 2]
# # assign crs
#my.utm.epsg <- "+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs +type=crs"
# # select UTM corrdinates of the plot center
#my.center.easting <- HBI_loc[HBI_loc$plot_ID == my.plot.id, "RW_MED"]
#my.center.northing <- HBI_loc[HBI_loc$plot_ID == my.plot.id, "HW_MED"]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.one.edge.nogeo[i, "Dist_cm"]/100
azi.tree <- trees.one.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree #+ my.center.easting
tree.north <-  y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = c(my.inv),
"lon" = c(tree.east),
"lat" = c(tree.north)
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
# assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
# print(plot(my.inter$geometry),
#      plot(my.rem.circle$geometry, add = T),
#      plot(tree.sf$geometry, add = T)
#     )
inter.tree.circle <- sf::st_intersection(tree.sf, my.rem.circle)
inter.tree.edge <- sf::st_intersection(tree.sf, my.inter)
tree_status <- ifelse(nrow(inter.tree.edge)!= 0, my.inter$stand,
ifelse(nrow(inter.tree.circle) != 0,  my.rem.circle$stand,
"warning"))
tree.status.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = c(my.inv),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status)))
# export tree points as sf
tree.points.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
}
# save tree corodiantes and status into dataframe
tree.status.list.one.edge.final.nogeo <- rbindlist(tree.status.list.nogeo)
tree.status.one.edge.df.nogeo <- as.data.frame(tree.status.list.one.edge.final.nogeo)
# save tree sf into dataframe
tree.points.list.one.edge.final.nogeo <- rbindlist(tree.points.list.nogeo)
tree.points.one.edge.df.nogeo <- as.data.frame(tree.points.list.one.edge.final.nogeo)
# 3.2.2.2. plots with 2 edges: sorting trees into edge and remaining circle polygones ---------
# intersection of trees with 2 edges
trees.two.edges.nogeo <- HBI_trees %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges_HBI.man %>% filter(e_form == 1 | e_form == 2) %>%
#& inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
# filter for trees located in plots htat haev only one forest edge
semi_join(forest_edges_HBI.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") #%>%
tree.status.two.edges.list.nogeo <- vector("list", length = length(trees.two.edges.nogeo$tree_ID))
tree.points.two.edges.list.nogeo <- vector("list", length = length(trees.two.edges.nogeo$tree_ID))
for (i in 1:length(trees.two.edges.nogeo$tree_ID)){
# i = 1
# i = which(grepl(50122, (trees.two.edges.nogeo$plot_ID)))[2]
# select plot ID accordint to positioin in the list
my.plot.id <- trees.two.edges.nogeo[i, "plot_ID"]
my.tree.id <- trees.two.edges.nogeo[i, "tree_ID"]
my.inv <- trees.two.edges.nogeo[i, "inv"]
# select the remaining cirlce we want to intersect the tree with
my.rem.circle <- sf::st_as_sf(rem.circle.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct())
my.edges.df <- inter.poly.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct() %>% arrange(e_ID)
my.inter.1 <- sf::st_as_sf(my.edges.df[1,])
my.inter.2 <- sf::st_as_sf(my.edges.df[2,])
# assign stand category to the polygones depending on which one is bigger/ smaller:
# bigger polygone/ polygone with greater area is assigned to category A, smaller area polygone is assigned to B
area.plot.df <- edges.area.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id & CCS_r_m == 17.84) %>%
arrange(as.numeric(area_m2)) %>%
mutate(stand = case_when(
row_number()== 1 ~ "C",
row_number()== 2 ~ "B",
row_number()== 3 ~ "A",
TRUE ~ NA))
# assign stand category to the polygones depending on which one is bigger/ smaller
my.rem.circle$stand <- area.plot.df$stand[area.plot.df$e_ID == 0]
my.inter.1$stand <- area.plot.df$stand[area.plot.df$e_ID == 1]
my.inter.2$stand <- area.plot.df$stand[area.plot.df$e_ID == 2]
# # assign crs
# my.utm.epsg <- "+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs +type=crs"
# # select UTM corrdinates of the plot center
# my.center.easting <- HBI_loc[HBI_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- HBI_loc[HBI_loc$plot_ID == my.plot.id, "HW_MED"]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.two.edges.nogeo[i, "Dist_cm"]/100
azi.tree <- trees.two.edges.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = c(my.inv),
"lon" = c(tree.east),
"lat" = c(tree.north)
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
# assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
# print(plot(my.rem.circle$geometry, col = "red"),
#       plot(my.inter.2$geometry, add = T),
#       plot(my.inter.1$geometry, add = T),
#       plot(tree.sf$geometry, add = T)
#       )
inter.tree.circle <- sf::st_intersection(tree.sf, my.rem.circle)
inter.tree.edge.1 <- sf::st_intersection(tree.sf, my.inter.1)
inter.tree.edge.2 <- sf::st_intersection(tree.sf, my.inter.2)
tree_status <- ifelse(nrow(inter.tree.edge.1)!= 0 & nrow(inter.tree.edge.2)== 0 & nrow(inter.tree.circle)== 0,  my.inter.1$stand,                     # if tree is in edge 1
ifelse(nrow(inter.tree.edge.2)!= 0 & nrow(inter.tree.edge.1)== 0 & nrow(inter.tree.circle)== 0,  my.inter.2$stand,              # if tree is in edge 2
ifelse(nrow(inter.tree.circle)!= 0 & nrow(inter.tree.edge.1)== 0 & nrow(inter.tree.edge.2)== 0,  my.rem.circle$stand,    # if tree is in circle
#ifelse(nrow(inter.tree.circle)== 0 & nrow(inter.tree.edge.1)!= 0 & nrow(inter.tree.edge.2)!= 0,  "warning",       # if tree is in two edges
"warning")))                                                                                             # if tree is nowhere
tree.status.two.edges.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = c(my.inv),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status)))
tree.points.two.edges.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
}
# save tree corodiantes and status into dataframe
tree.status.list.two.edges.final.nogeo <- rbindlist(tree.status.two.edges.list.nogeo)
tree.status.two.edges.df.nogeo <- as.data.frame(tree.status.list.two.edges.final.nogeo)
# save tree sf into dataframe
tree.points.list.two.edges.final.nogeo <- rbindlist(tree.points.two.edges.list.nogeo)
tree.points.two.edges.df.nogeo <- as.data.frame(tree.points.list.two.edges.final.nogeo)
# bind the tree point datafarmes of one and two edges plots together
two.and.one.edge.trees.points.df.nogeo <- rbind(tree.points.one.edge.df.nogeo,tree.points.two.edges.df.nogeo) %>% mutate(plot_ID = as.integer(plot_ID))
# 3.2.2.3 plots with no edge edge: sorting trees into circle ---------
trees.no.edge.nogeo <- anti_join(HBI_trees, two.and.one.edge.trees.points.df.nogeo %>% select(plot_ID) %>% distinct(), by = "plot_ID")
tree.status.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
tree.points.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
for (i in 1:length(trees.no.edge.nogeo$tree_ID)){
#i =1
#i = which(grepl(50080, unique(trees.one.edge$plot_ID)))
# select plot ID accordint to positioin in the list
my.plot.id <- trees.no.edge.nogeo[i, "plot_ID"]
my.tree.id <- trees.no.edge.nogeo[i, "tree_ID"]
my.inv <- trees.two.edges.nogeo[i, "inv"]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.no.edge.nogeo[i, "Dist_cm"]/100
azi.tree <- trees.no.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = c(my.inv),
"lon" = c(as.numeric(tree.east)),
"lat" = c(as.numeric(tree.north))
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
# assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
# select the UTM coordiantes of the center of the cirlce corresponding with the plot ID
# my.center.easting <- HBI_loc[HBI_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- HBI_loc[HBI_loc$plot_ID == my.plot.id, "HW_MED"]
#### build circle
# circle data
c.x0 = 0
c.y0 = 0
c.r3 = 17.84
c.r2 = 12.62
c.r1 = 5.64
# build polygon (circlular buffer) around center point
center.df<- as.data.frame(cbind("lon" = c.x0, "lat" = c.y0))
# center.df <- as.data.frame(cbind("lon" = my.center.easting, "lat" = my.center.northing))
circle.pt <- sf::st_as_sf(center.df, coords = c("lon", "lat"))
circle.17 <- sf::st_buffer(circle.pt, c.r3)
circle.12 <- sf::st_buffer(circle.pt, c.r2)
circle.5 <- sf::st_buffer(circle.pt, c.r1)
inter.tree.circle.17 <- sf::st_intersection(tree.sf, circle.17)
# if a tree is not intersecting with the circle or its exactly at the edge of the cirlce the inter.tree.circle.17 will be empty,
# however, trees that are exactly 17.84 meters apart from the circle center would still be part of the plot, tho the polygones won´t detect and intersection
# which is why trees only receive the status "warning" if they are acturally situated outside of the circle
tree_status <- ifelse(nrow(inter.tree.circle.17) == 0 & dist.tree > 17.84,  "warning", "A")                                                                                            # if tree is nowhere
tree.status.no.edge.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = c(my.inv),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status))
)
tree.points.no.edge.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
}
# save tree corodiantes and status into dataframe
tree.status.no.edges.final.nogeo <- rbindlist(tree.status.no.edge.list.nogeo)
tree.status.no.edges.df.nogeo <- as.data.frame(tree.status.no.edges.final.nogeo)
# save tree sf into dataframe
tree.points.list.no.edges.final.nogeo <- rbindlist(tree.points.no.edge.list.nogeo)
tree.points.no.edges.df.nogeo <- as.data.frame(tree.points.list.no.edges.final.nogeo)
# bind all tree point.sf dataframes (with & without edges together)
all.trees.points.df.nogeo <-
rbind(two.and.one.edge.trees.points.df.nogeo ,
tree.points.no.edges.df.nogeo) %>%
mutate(across(plot_ID:tree_ID, ~ as.integer(.x))) %>%
left_join(., trees_and_edges %>%
select(plot_ID, tree_ID, DBH_cm),
by = c("plot_ID", "tree_ID"),
multiple = "all")
# bind all tree status dataframes together (one edge, two edges, no edge plots)
all.trees.status.df <-
rbind(tree.status.no.edges.df.nogeo,
tree.status.one.edge.df.nogeo,
tree.status.two.edges.df.nogeo)
# 3.3. data export ---------------------------------------------------------------------------------------------------------
# 3.3.1. data prep for export -----------------------------------------------------------------------------------------------
# 3.3.1.1. harmonzing strings for join --------------------------------------------------------
# harmonize strings of all.trees.status.df and
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
all.trees.status.df[,c(1,2, 4, 5)] <- lapply(all.trees.status.df[,c(1,2, 4, 5)], as.numeric)
all.edges.area.df.nogeo[,c(1,2, 3, 5)] <- lapply(all.edges.area.df.nogeo[,c(1,2, 3, 5)], as.numeric)
# 3.3.1.2. join tree stand status and plot areas into trees dataset  --------------------------------------------------------
HBI_trees_update_1 <- HBI_trees %>%
# join in stand of each tree
left_join(., all.trees.status.df %>%
select(plot_ID, tree_ID, inv, t_stat) %>%
distinct(),
by = c("plot_ID", "tree_ID", "inv")) %>%
rename(stand = t_stat) %>%
# then join in plot area the tree reffers to due to it´s DBH which determines the sampling circuit it was found in
# asssing corect samling circle diameter according to DBH of the tree to be able to join in the right plot area
mutate(CCS_r_m = case_when(DBH_cm >= 7  & DBH_cm < 10 ~ 5.64,
DBH_cm >= 10 & DBH_cm < 30 ~ 12.62,
DBH_cm >= 30 ~ 17.84,
TRUE ~ NA)) %>%
# join in the area that belongs to the tree according to the CCS the tree was measured in/ belongs to
left_join(., all.edges.area.df.nogeo %>%
select(plot_ID, inter_stat, CCS_r_m, stand, area_m2),
by = c("plot_ID", "CCS_r_m", "stand")) %>%
# if there was no plot area claualted due to the fact that there is no edger at the plot,
# we calcualte the area from the sampling circuit diameter assign under CCD_r_m
mutate(area_m2 = ifelse(is.na(e_ID) & is.na(area_m2) |
# for trees alloceted to a in a cirlce without intersections wil not run throuhg the loops
# thus they do  have an edge ID but no calcualted areas or assigned intersection status
# therefore we have to calculate their area manually subsequently
# trees with the status "warning" will not have any stand and area from the dataset "all.edges.area.df.nogeo" assigned
# as this stand category doesn´t exist
# trees with the status "warning" will be excluded from the analysis
stand == "A" & inter_stat != "partly intersecting" & is.na(area_m2) |
stand == "A" & is.na(inter_stat) & is.na(area_m2), c_A(CCS_r_m), area_m2),
plot_A_ha = as.numeric(area_m2)/10000)  # dividedd by 10 000 to transform m2 into hectar
# 3.3.1.3. sort trees into remove and process on datasets by status "warning" --------------------------------------------------------
HBI_trees_removed_1 <- HBI_trees_update_1 %>% filter(stand == "warning")
HBI_trees_removed_1
HBI_trees_update_1 <- HBI_trees_update_1 %>% filter(stand != "warning")
# 3.3.1.4.  binding datasets together ----------------------------------------------------------
all.triangle.polys.df.nogeo <- rbind(triangle.e1.poly.df.nogeo, triangle.e2.poly.df.nogeo)
all.edge.intersections.poly  <- rbind(inter.poly.one.edge.df.nogeo, inter.poly.two.edges.df.nogeo)
all.remaning.circles.poly <- rbind(rem.circle.one.edge.df.nogeo, rem.circle.two.edges.df.nogeo)
# exporting tree and edge/ plot area data
write.csv(HBI_trees_update_1, paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "trees_update_1", sep = "_"), ".csv"))
write.csv(HBI_trees_removed_1, paste0(out.path.BZE3, paste(unique(HBI_trees_removed_1$inv)[1], "trees_removed_1", sep = "_"), ".csv"))
write.csv(trees_and_edges,paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "LT_edges", sep = "_"), ".csv"))
# export tree stand status of all trees nomatter if they have one, two or no forest edges at their plot
write.csv(all.trees.status.df, paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "all_trees_stand", sep = "_"), ".csv"))
# export areas and stand info of all sampling circuits, edges and remaining circles
write.csv(all.edges.area.df.nogeo,  paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "all_edges_rem_circles", sep = "_"), ".csv"))
# export list of plots where the edge polygones intersect within the 17.84 radius
write.csv(intersection.two.edges.warning.df.nogeo,  paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "edges_intersecting_warning", sep = "_"), ".csv"))
# exporting edge triangle polygones
write.csv(all.triangle.polys.df.nogeo, paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "all_edges_triangle_poly", sep = "_"), ".csv"))
# exporting edge intersection polygones
write.csv(all.edge.intersections.poly, paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "all_edges_intersection_poly", sep = "_"), ".csv"))
# exporting all remaining circles
write.csv(all.remaning.circles.poly, paste0(out.path.BZE3, paste(unique(HBI_trees_update_1$inv)[1], "all_edges_intersection_poly", sep = "_"), ".csv"))

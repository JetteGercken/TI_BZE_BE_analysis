"LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB",
"LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB",
"LB", "LB", "NB", "NB", "NB", "NB", "NB", "NB", "NB", "NB", "NB",
"NB", "NB", "NB", "NB", "NB", "NB", "NB", "LB", "LB", "LB", "LB",
"LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB",
"LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "NB", "NB", "LB",
"LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB", "LB",
"LB", "NB", "LB", "LB"),
IPC = c(215L, 4L, 227L, 216L, 212L, 13L, 15L, 20L, 22L, 36L, 211L, 99L, 53L, 56L, 62L, 64L, 210L,
213L, 230L, 66L, 22L, 1L, 100L, 103L, 197L, 116L, 129L, 134L,
118L, 133L, 0L, NA, 0L, 7L, 8L, 10L, 11L, 48L, 51L, 68L, 69L,
35L, 70L, 61L, 72L, 71L, 32L, 9L, 99L, 214L, 99L, 63L, 248L,
26L, 99L, 221L, 58L, 25L, 34L, 65L, 135L, 237L, 38L, 39L, 247L,
226L, 220L, 253L, 232L, 41L, 33L, 99L, 98L, 31L, 57L, 90L, 217L,
33L, 99L, 198L, 117L, 199L, 118L, 120L, 199L, 136L, 153L, 128L,
140L, 199L, 124L, 106L, 137L, 139L, 150L, 157L, 138L, 199L, 160L,
104L, 119L, 155L, 147L, 158L, 161L, 159L, 152L, 199L, 149L, 151L,
123L, 199L, 145L, 146L, 143L, 142L, 111L, 2L, 3L, 27L, 40L, 6L,
74L, 73L, 19L, 82L, 84L, 79L, 144L, 112L, 113L, 114L, 115L, 233L,
12L, 14L, 16L, 17L, 18L, 21L, 23L, 24L, 28L, 29L, 30L, 37L, 42L,
43L, 44L, 45L, 46L, 47L, 49L, 50L, 52L, 54L, 55L, 59L, 60L, 67L,
75L, 76L, 77L, 78L, 80L, 81L, 83L, 85L, 86L, 87L, 88L, 91L, 92L,
93L, 94L, 101L, 102L, 105L, 107L, 108L, 109L, 110L, 121L, 122L,
125L, 126L, 127L, 130L, 131L, 132L, 141L, 201L, 202L, 203L, 204L,
205L, 206L, 207L, 208L, 209L, 222L, 223L, 224L, 225L, 242L, 243L,
244L, 245L, 246L, 228L, 229L, 249L, 250L, 251L, 154L, 156L, 252L,
231L, 234L, 235L, 236L, 238L, 239L, 240L, 241L, 254L, 162L, 163L,
255L, 164L, 71L, 72L),
WZE = c(30011L, 30011L, 30011L, 30011L,30011L, 30011L, 30011L, 30016L, 30011L, 30011L, 30011L, 30013L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30012L, 30012L, 30012L, 30012L, 30012L, 30015L,
30014L, 30012L, NA, NA, NA, 30011L, 30011L, 30011L, 30011L, 30013L,
30013L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30012L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30013L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30012L, 30012L, 30012L, 30014L, 30012L, 30015L, 30012L,
30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L,
30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L,
30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L,
30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30012L, 30012L, 30012L, 30012L, 30012L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L,
30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L, 30012L,
30012L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30012L, 30012L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L,
30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30011L, 30012L,
30011L, 30011L),
BWI = c("AH", "SAH", "BAH", "ERL", "BI", "HBU",
"KA", "BU", "ES", "KIR", "PA", "EI", "REI", "ROB", "SLB", "VB",
"LI", "UL", "PA", "VB", "ES", "FAH", "TA", "TA", "LAE", "ELA",
"KI", "KI", "FI", "WEY", "", "", "", "ERL", "ERL", "BI", "BI",
"EI", "EI", "LI", "LI", "PA", "UL", "SLB", "UL", "UL", "PA",
"ERL", "SLB", "BI", "BI", "VB", "SLB", "SLB", "SLB", "KA", "SLB",
"SLB", "PA", "VB", "KI", "EI", "KIR", "KIR", "SLB", "ES", "SLB",
"SLB", "KIR", "EI", "PA", "SLB", "EI", "PA", "SLB", "SLB", "SLB",
"PA", "SLB", "TA", "JLA", "FI", "FI", "FI", "KI", "DGL", "KI",
"KI", "SNB", "TA", "KI", "TA", "EIB", "SNB", "LAE", "SNB", "SNB",
"TA", "SNB", "TA", "FI", "KI", "TA", "SNB", "SNB", "SNB", "FI",
"LAE", "TA", "FI", "KI", "SNB", "SNB", "FI", "SNB", "TA", "SNB",
"AH", "AH", "SLB", "SLB", "ERL", "SLB", "SLB", "BU", "SLB", "SLB",
"SLB", "SNB", "SNB", "SNB", "SNB", "SNB", "KIR", "SLB", "HBU",
"SLB", "SLB", "BU", "ES", "ES", "SLB", "SLB", "SLB", "SLB", "KIR",
"EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI",
"SLB", "SLB", "SLB", "SLB", "SLB", "SLB", "SLB", "SLB", "SLB",
"SLB", "SLB", "SLB", "SLB", "BI", "SLB", "SLB", "SLB", "EI",
"TA", "TA", "TA", "SNB", "SNB", "SNB", "SNB", "KI", "KI", "KI",
"KI", "KI", "KI", "KI", "KI", "SNB", "EI", "EI", "EI", "EI",
"EI", "EI", "EI", "EI", "EI", "AH", "AH", "AH", "AH", "SLB",
"SLB", "SLB", "SLB", "SLB", "SLB", "SLB", "SLB", "SLB", "SLB",
"KI", "KI", "SLB", "PA", "KIR", "KIR", "KIR", "EI", "SLB", "SLB",
"SLB", "VB", "SLB", "SLB", "LI", "SNB", "UL", "UL"),
BZE_al = c("WAHR", "WAHR", "WAHR", "WAHR", "WAHR", "WAHR", "FALSCH", "WAHR", "WAHR",
"WAHR", "WAHR", "FALSCH", "WAHR", "WAHR", "WAHR", "WAHR", "WAHR",
"WAHR", "FALSCH", "WAHR", "FALSCH", "WAHR", "WAHR", "WAHR", "WAHR",
"WAHR", "WAHR", "WAHR", "FALSCH", "WAHR", "FALSCH", "FALSCH",
"FALSCH", "WAHR", "WAHR", "WAHR", "WAHR", "WAHR", "WAHR", "WAHR",
"WAHR", "WAHR", "WAHR", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "WAHR", "WAHR", "FALSCH", "WAHR",
"FALSCH", "WAHR", "WAHR", "FALSCH", "WAHR", "WAHR", "FALSCH",
"WAHR", "WAHR", "WAHR", "WAHR", "FALSCH", "WAHR", "WAHR", "FALSCH",
"WAHR", "FALSCH", "FALSCH", "WAHR", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "WAHR", "WAHR", "WAHR", "WAHR", "FALSCH", "WAHR", "WAHR",
"FALSCH", "WAHR", "WAHR", "WAHR", "FALSCH", "FALSCH", "FALSCH",
"WAHR", "WAHR", "WAHR", "FALSCH", "FALSCH", "WAHR", "FALSCH",
"FALSCH", "WAHR", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "WAHR", "WAHR",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "WAHR", "WAHR",
"FALSCH", "WAHR", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "WAHR", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH",
"FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "FALSCH", "WAHR",
"FALSCH"),
tpS_SP_com_name = c("Acer spp.", "Acer platanoides",
"Acer pseudoplatanus", "Alnus spp.", "Betula spp.", "Carpinus betulus",
"Castanea sativa", "Fagus sylvatica", "Fraxinus excelsior", "Prunus avium",
"Populus spp.", "Quercus spp.", "Quercus rubra", "Robinia pseudoacacia",
"Salix spp.", "Sorbus aucuparia", "Tilia spp.", "Ulmus spp.",
"Populus balsamifera", "Sorbus torminalis", "Fraxinus excelsior",
"Acer campestre", "Abies alba", "Abies grandis", "Larix spp.",
"Larix decidua", "Pinus nigra", "Pinus sylvestris", "Picea abies",
"Pinus strobus", "missing", "missing", "missing", "Alnus spp.",
"Alnus spp.", "Betula spp.", "Betula spp.", "Quercus spp.", "Quercus spp.",
"Tilia spp.", "Tilia spp.", "Populus spp.", "Ulmus spp.", "Salix spp.",
"Ulmus spp.", "Ulmus spp.", "Populus spp.", "Alnus spp.", "Magnoliopsida trees",
"Betula spp.", "Betula spp.", "Sorbus aucuparia", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Salix spp.", "Magnoliopsida trees", "Populus spp.", "Sorbus aucuparia",
"Pinus sylvestris", "Quercus spp.", "Prunus avium", "Prunus avium",
"Magnoliopsida trees", "Fraxinus excelsior", "Magnoliopsida trees",
"Magnoliopsida trees", "Prunus avium", "Quercus spp.", "Populus spp.",
"Magnoliopsida trees", "Quercus spp.", "Populus spp.", "Salix spp.",
"Magnoliopsida trees", "Magnoliopsida trees", "Populus spp.",
"Magnoliopsida trees", "Abies alba", "Larix spp.", "Picea abies",
"Picea abies", "Picea abies", "Pinus sylvestris", "Pseudotsuga menziesii",
"Pinus sylvestris", "Pinus sylvestris", "Coniferales trees",
"Abies alba", "Pinus sylvestris", "Abies alba", "Coniferales trees",
"Tsuga heterophylla", "Larix spp.", "Coniferales trees", "Thuja plicata",
"Coniferales trees", "Coniferales trees", "Abies alba", "Picea abies",
"Pinus sylvestris", "Abies alba", "Coniferales trees", "Coniferales trees",
"Coniferales trees", "Picea abies", "Larix spp.", "Abies alba",
"Picea abies", "Pinus sylvestris", "Coniferales trees", "Coniferales trees",
"Picea abies", "Coniferales trees", "Abies alba", "Coniferales trees",
"Acer spp.", "Acer spp.", "Magnoliopsida trees", "Magnoliopsida trees",
"Alnus spp.", "Magnoliopsida trees", "Magnoliopsida trees", "Fagus sylvatica",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Coniferales trees", "Coniferales trees", "Coniferales trees",
"Coniferales trees", "Coniferales trees", "Prunus avium", "Magnoliopsida trees",
"Carpinus betulus", "Magnoliopsida trees", "Magnoliopsida trees",
"Fagus sylvatica", "Fraxinus excelsior", "Fraxinus excelsior",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Prunus avium", "Quercus spp.", "Quercus spp.",
"Quercus spp.", "Quercus spp.", "Quercus spp.", "Quercus spp.",
"Quercus spp.", "Quercus spp.", "Quercus spp.", "Quercus spp.",
"Quercus spp.", "Salix spp.", "Salix spp.", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Betula spp.", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Quercus spp.",
"Abies alba", "Abies alba", "Abies alba", "Coniferales trees",
"Coniferales trees", "Coniferales trees", "Coniferales trees",
"Pinus sylvestris", "Pinus sylvestris", "Pinus sylvestris", "Pinus sylvestris",
"Pinus sylvestris", "Pinus sylvestris", "Pinus sylvestris", "Pinus sylvestris",
"Coniferales trees", "Quercus spp.", "Quercus spp.", "Quercus spp.",
"Quercus spp.", "Quercus spp.", "Quercus spp.", "Quercus spp.",
"Quercus spp.", "Quercus spp.", "Acer spp.", "Acer spp.", "Acer spp.",
"Acer spp.", "Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Magnoliopsida trees", "Magnoliopsida trees",
"Magnoliopsida trees", "Pinus sylvestris", "Pinus sylvestris",
"Magnoliopsida trees", "Populus spp.", "Prunus avium", "Prunus avium",
"Prunus avium", "Quercus spp.", "Salix spp.", "Salix spp.", "Salix spp.",
"Sorbus aucuparia", "Magnoliopsida trees", "Magnoliopsida trees",
"Tilia spp.", "Tsuga heterophylla", "Ulmus spp.", "Ulmus spp."),
tpS_ID = c(22L, 24L, 23L, 28L, 26L, 16L, 33L, 15L, 21L, 29L,
19L, 17L, 18L, 31L, 34L, 36L, 27L, 30L, 20L, 32L, 21L, 25L, 3L,
4L, 9L, 10L, 6L, 5L, 1L, 7L, NA, NA, NA, 28L, 28L, 26L, 26L,
17L, 17L, 27L, 27L, 19L, 30L, 34L, 30L, 30L, 19L, 28L, 35L, 26L,
26L, 36L, 35L, 35L, 35L, 35L, 34L, 35L, 19L, 36L, 5L, 17L, 29L,
29L, 35L, 21L, 35L, 35L, 29L, 17L, 19L, 35L, 17L, 19L, 34L, 35L,
35L, 19L, 35L, 3L, 9L, 1L, 1L, 1L, 5L, 8L, 5L, 5L, 14L, 3L, 5L,
3L, 14L, 13L, 9L, 14L, 12L, 14L, 14L, 3L, 1L, 5L, 3L, 14L, 14L,
14L, 1L, 9L, 3L, 1L, 5L, 14L, 14L, 1L, 14L, 3L, 14L, 22L, 22L,
35L, 35L, 28L, 35L, 35L, 15L, 35L, 35L, 35L, 14L, 14L, 14L, 14L,
14L, 29L, 35L, 16L, 35L, 35L, 15L, 21L, 21L, 35L, 35L, 35L, 35L,
29L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 34L,
34L, 35L, 35L, 35L, 35L, 35L, 35L, 35L, 35L, 35L, 35L, 35L, 26L,
35L, 35L, 35L, 17L, 3L, 3L, 3L, 14L, 14L, 14L, 14L, 5L, 5L, 5L,
5L, 5L, 5L, 5L, 5L, 14L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 17L,
17L, 22L, 22L, 22L, 22L, 35L, 35L, 35L, 35L, 35L, 35L, 35L, 35L,
35L, 35L, 5L, 5L, 35L, 19L, 29L, 29L, 29L, 17L, 34L, 34L, 34L,
36L, 35L, 35L, 27L, 13L, 30L, 30L),
H_SP_group = c("bu", "bu",
"bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "ei", "ei",
"bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "ta", "ta",
"lae", "lae", "ki", "ki", "fi", "ki", "fi", "fi", "fi", "bu",
"bu", "bu", "bu", "ei", "ei", "bu", "bu", "bu", "bu", "bu", "bu",
"bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu",
"bu", "bu", "bu", "bu", "ki", "ei", "bu", "bu", "bu", "bu", "bu",
"bu", "bu", "ei", "bu", "bu", "ei", "bu", "bu", "bu", "bu", "bu",
"bu", "ta", "lae", "fi", "fi", "fi", "ki", "dgl", "ki", "ki",
"fi", "ta", "ki", "ta", "fi", "fi", "lae", "fi", "fi", "fi",
"fi", "ta", "fi", "ki", "ta", "fi", "fi", "fi", "fi", "lae",
"ta", "fi", "ki", "fi", "fi", "fi", "fi", "ta", "fi", "bu", "bu",
"bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "fi", "fi",
"fi", "fi", "fi", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu",
"bu", "bu", "bu", "bu", "bu", "ei", "ei", "ei", "ei", "ei", "ei",
"ei", "ei", "ei", "ei", "ei", "bu", "bu", "bu", "bu", "bu", "bu",
"bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu", "bu",
"ei", "ta", "ta", "ta", "fi", "fi", "fi", "fi", "ki", "ki", "ki",
"ki", "ki", "ki", "ki", "ki", "fi", "ei", "ei", "ei", "ei", "ei",
"ei", "ei", "ei", "ei", "bu", "bu", "bu", "bu", "bu", "bu", "bu",
"bu", "bu", "bu", "bu", "bu", "bu", "bu", "ki", "ki", "bu", "bu",
"bu", "bu", "bu", "ei", "bu", "bu", "bu", "bu", "bu", "bu", "bu",
"fi", "bu", "bu"),
BWI_SP_group = c("aLh", "aLh", "aLh", "aLn",
"aLn", "aLh", "aLh", "bu", "aLh", "aLn", "aLn", "ei", "ei", "aLh",
"aLn", "aLh", "aLh", "aLh", "aLn", "aLh", "aLh", "aLh", "fi",
"fi", "ki", "ki", "ki", "ki", "fi", "ki", "other", "other", "other",
"aLn", "aLn", "aLn", "aLn", "ei", "ei", "aLh", "aLh", "aLn",
"aLh", "aLn", "aLh", "aLh", "aLn", "aLn", "aLn", "aLn", "aLn",
"aLh", "aLn", "aLh", "aLh", "aLh", "aLn", "aLh", "aLn", "aLh",
"ki", "ei", "aLn", "aLn", "aLn", "aLh", "aLn", "aLn", "aLn",
"ei", "aLn", "aLn", "ei", "aLn", "aLn", "aLn", "aLn", "aLn",
"aLn", "fi", "ki", "fi", "fi", "fi", "ki", "fi", "ki", "ki",
"fi", "fi", "ki", "fi", "fi", "fi", "ki", "fi", "fi", "fi", "fi",
"fi", "fi", "ki", "fi", "fi", "fi", "fi", "fi", "ki", "fi", "fi",
"ki", "fi", "fi", "fi", "fi", "fi", "fi", "aLh", "aLh", "aLn",
"aLn", "aLn", "aLn", "aLn", "bu", "aLn", "aLn", "aLn", "fi",
"fi", "fi", "fi", "fi", "aLn", "aLn", "aLh", "aLh", "aLn", "bu",
"aLh", "aLh", "aLn", "aLn", "aLn", "aLh", "aLh", "ei", "ei",
"ei", "ei", "ei", "ei", "ei", "ei", "ei", "ei", "ei", "aLn",
"aLn", "aLn", "aLn", "aLn", "aLn", "aLn", "aLn", "aLn", "aLn",
"aLn", "aLh", "aLh", "aLn", "aLn", "aLn", "aLn", "ei", "fi",
"fi", "fi", "fi", "fi", "fi", "fi", "ki", "ki", "ki", "ki", "ki",
"ki", "ki", "ki", "fi", "ei", "ei", "ei", "ei", "ei", "ei", "ei",
"ei", "ei", "aLh", "aLh", "aLh", "aLh", "aLn", "aLn", "aLn",
"aLh", "aLn", "aLn", "aLn", "aLn", "aLn", "aLn", "ki", "ki",
"aLh", "aLn", "aLn", "aLn", "aLn", "ei", "aLn", "aLn", "aLn",
"aLh", "aLn", "aLn", "aLh", "fi", "aLh", "aLh"),
Bio_SP_group = c("bu","bu", "bu", "shw", "shw", "bu", "bu", "bu", "bu", "shw", "shw",
"ei", "ei", "bu", "shw", "bu", "bu", "bu", "shw", "bu", "bu",
"bu", "fi", "fi", "ki", "ki", "ki", "ki", "fi", "ki", "other",
"other", "other", "shw", "shw", "shw", "shw", "ei", "ei", "bu",
"bu", "shw", "bu", "shw", "bu", "bu", "shw", "shw", "shw", "shw",
"shw", "bu", "shw", "bu", "bu", "bu", "shw", "bu", "shw", "bu",
"ki", "ei", "shw", "shw", "shw", "bu", "shw", "shw", "shw", "ei",
"shw", "shw", "ei", "shw", "shw", "shw", "shw", "shw", "shw",
"fi", "ki", "fi", "fi", "fi", "ki", "fi", "ki", "ki", "fi", "fi",
"ki", "fi", "fi", "fi", "ki", "fi", "fi", "fi", "fi", "fi", "fi",
"ki", "fi", "fi", "fi", "fi", "fi", "ki", "fi", "fi", "ki", "fi",
"fi", "fi", "fi", "fi", "fi", "bu", "bu", "shw", "shw", "shw",
"shw", "shw", "bu", "shw", "shw", "shw", "fi", "fi", "fi", "fi",
"fi", "shw", "shw", "bu", "bu", "shw", "bu", "bu", "bu", "shw",
"shw", "shw", "bu", "bu", "ei", "ei", "ei", "ei", "ei", "ei",
"ei", "ei", "ei", "ei", "ei", "shw", "shw", "shw", "shw", "shw",
"shw", "shw", "shw", "shw", "shw", "shw", "bu", "bu", "shw",
"shw", "shw", "shw", "ei", "fi", "fi", "fi", "fi", "fi", "fi",
"fi", "ki", "ki", "ki", "ki", "ki", "ki", "ki", "ki", "fi", "ei",
"ei", "ei", "ei", "ei", "ei", "ei", "ei", "ei", "bu", "bu", "bu",
"bu", "shw", "shw", "shw", "bu", "shw", "shw", "shw", "shw",
"shw", "shw", "ki", "ki", "bu", "shw", "shw", "shw", "shw", "ei",
"shw", "shw", "shw", "bu", "shw", "shw", "bu", "fi", "bu", "bu"),
N_SP_group = c("AH", "AH", "AH", "ERL", "BI", "BU", "BU",
"BU", "ES", "BI", "BI", "EI", "EI", "BU", "BI", "BU", "BU", "BU",
"BI", "BU", "ES", "AH", "FI", "FI", "KI", "KI", "KI", "KI", "FI",
"KI", "other", "other", "other", "ERL", "ERL", "BI", "BI", "EI",
"EI", "BU", "BU", "BI", "BU", "BI", "BU", "BU", "BI", "ERL",
"BI", "BI", "BI", "BU", "BI", "BU", "BU", "BU", "BI", "BU", "BI",
"BU", "KI", "EI", "BI", "BI", "BI", "ES", "BI", "BI", "BI", "EI",
"BI", "BI", "EI", "BI", "BI", "BI", "BI", "BI", "BI", "FI", "KI",
"FI", "FI", "FI", "KI", "FI", "KI", "KI", "FI", "FI", "KI", "FI",
"FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI", "KI", "FI",
"FI", "FI", "FI", "FI", "KI", "FI", "FI", "KI", "FI", "FI", "FI",
"FI", "FI", "FI", "AH", "AH", "BI", "BI", "ERL", "BI", "BI",
"BU", "BI", "BI", "BI", "FI", "FI", "FI", "FI", "FI", "BI", "BI",
"BU", "BU", "BI", "BU", "ES", "ES", "BI", "BI", "BI", "BU", "BU",
"EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI",
"BI", "BI", "BI", "BI", "BI", "BI", "BI", "BI", "BI", "BI", "BI",
"BU", "BU", "BI", "BI", "BI", "BI", "EI", "FI", "FI", "FI", "FI",
"FI", "FI", "FI", "KI", "KI", "KI", "KI", "KI", "KI", "KI", "KI",
"FI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "EI", "AH",
"AH", "AH", "AH", "BI", "BI", "BI", "BU", "BI", "BI", "BI", "BI",
"BI", "BI", "KI", "KI", "BU", "BI", "BI", "BI", "BI", "EI", "BI",
"BI", "BI", "BU", "BI", "BI", "BU", "FI", "BU", "BU"),
N_bg_SP_group = c("BU", "BU", "BU", "BI", "BI", "BU", "BU", "BU", "BU", "BI", "BI", "EI",
"EI", "BU", "BI", "BU", "BU", "BU", "BI", "BU", "BU", "BU", "FI",
"FI", "LA", "LA", "KIN", "KI", "FI", "KI", "other", "other",
"other", "BI", "BI", "BI", "BI", "EI", "EI", "BU", "BU", "BI",
"BU", "BI", "BU", "BU", "BI", "BI", "BI", "BI", "BI", "BU", "BI",
"BU", "BU", "BU", "BI", "BU", "BI", "BU", "KI", "EI", "BI", "BI",
"BI", "BU", "BI", "BI", "BI", "EI", "BI", "BI", "EI", "BI", "BI",
"BI", "BI", "BI", "BI", "FI", "LA", "FI", "FI", "FI", "KI", "FI",
"KI", "KI", "FI", "FI", "KI", "FI", "FI", "FI", "LA", "FI", "FI",
"FI", "FI", "FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "LA",
"FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI", "BU", "BU",
"BI", "BI", "BI", "BI", "BI", "BU", "BI", "BI", "BI", "FI", "FI",
"FI", "FI", "FI", "BI", "BI", "BU", "BU", "BI", "BU", "BU", "BU",
"BI", "BI", "BI", "BU", "BU", "EI", "EI", "EI", "EI", "EI", "EI",
"EI", "EI", "EI", "EI", "EI", "BI", "BI", "BI", "BI", "BI", "BI",
"BI", "BI", "BI", "BI", "BI", "BU", "BU", "BI", "BI", "BI", "BI",
"EI", "FI", "FI", "FI", "FI", "FI", "FI", "FI", "KI", "KI", "KI",
"KI", "KI", "KI", "KI", "KI", "FI", "EI", "EI", "EI", "EI", "EI",
"EI", "EI", "EI", "EI", "BU", "BU", "BU", "BU", "BI", "BI", "BI",
"BU", "BI", "BI", "BI", "BI", "BI", "BI", "KI", "KI", "BU", "BI",
"BI", "BI", "BI", "EI", "BI", "BI", "BI", "BU", "BI", "BI", "BU",
"FI", "BU", "BU"),
N_f_SP_group_MoMoK = c("aLB", "aLB", "aLB",
"ERL", "BI", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aNB", "aNB", "aNB", "aNB", "KI", "KI", "FI", "KI", "other",
"other", "other", "ERL", "ERL", "BI", "BI", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "ERL", "aLB",
"BI", "BI", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "KI", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aNB", "aNB", "FI", "FI", "FI", "KI", "aNB",
"KI", "KI", "aNB", "aNB", "KI", "aNB", "aNB", "aNB", "aNB", "aNB",
"aNB", "aNB", "aNB", "aNB", "FI", "KI", "aNB", "aNB", "aNB",
"aNB", "FI", "aNB", "aNB", "FI", "KI", "aNB", "aNB", "FI", "aNB",
"aNB", "aNB", "aLB", "aLB", "aLB", "aLB", "ERL", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aNB", "aNB", "aNB", "aNB", "aNB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "BI", "aLB", "aLB", "aLB", "aLB", "aNB", "aNB", "aNB",
"aNB", "aNB", "aNB", "aNB", "KI", "KI", "KI", "KI", "KI", "KI",
"KI", "KI", "aNB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "KI",
"KI", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB", "aLB",
"aLB", "aLB", "aLB", "aLB", "aLB", "aNB", "aLB", "aLB"),
RG_Wolff_bio = c("BAH","BAH", "BAH", "BI", "BI", "ES", "ES", "BU", "ES", "BI", "BI",
"EI", "EI", "ES", "BI", "VB", "ES", "ES", "BI", "VB", "ES", "BAH",
"FI", "FI", "FI", "FI", "KI", "KI", "FI", "KI", "other", "other",
"other", "BI", "BI", "BI", "BI", "EI", "EI", "ES", "ES", "BI",
"ES", "BI", "ES", "ES", "BI", "BI", "BI", "BI", "BI", "VB", "BI",
"ES", "ES", "ES", "BI", "ES", "BI", "VB", "KI", "EI", "BI", "BI",
"BI", "ES", "BI", "BI", "BI", "EI", "BI", "BI", "EI", "BI", "BI",
"BI", "BI", "BI", "BI", "FI", "FI", "FI", "FI", "FI", "KI", "FI",
"KI", "KI", "FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI",
"FI", "FI", "FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI",
"FI", "FI", "KI", "FI", "FI", "FI", "FI", "FI", "FI", "BAH",
"BAH", "BI", "BI", "BI", "BI", "BI", "BU", "BI", "BI", "BI",
"FI", "FI", "FI", "FI", "FI", "BI", "BI", "ES", "ES", "BI", "BU",
"ES", "ES", "BI", "BI", "BI", "ES", "ES", "EI", "EI", "EI", "EI",
"EI", "EI", "EI", "EI", "EI", "EI", "EI", "BI", "BI", "BI", "BI",
"BI", "BI", "BI", "BI", "BI", "BI", "BI", "FKD", "FKD", "BI",
"BI", "BI", "BI", "EI", "FI", "FI", "FI", "FI", "FI", "FI", "FI",
"KI", "KI", "KI", "KI", "KI", "KI", "KI", "KI", "FI", "EI", "EI",
"EI", "EI", "EI", "EI", "EI", "EI", "EI", "BAH", "BAH", "BAH",
"BAH", "BI", "BI", "BI", "ES", "BI", "BI", "BI", "BI", "BI",
"BI", "KI", "KI", "ES", "BI", "BI", "BI", "BI", "EI", "BI", "BI",
"BI", "VB", "BI", "BI", "ES", "FI", "ES", "ES")),
class = "data.frame",
row.names = c(NA, -232L)))}else{
print("SP_names_com_ID_tapeS already exists")
}
# 2.2. Nitrogen content --------------------------------------------------------------------------------------------------------
# 2.2.1. Nitrogen content wood ------------------------------------------------------------------------------------------
# this is the result of a dput of N_con_w( nitrogen content in woody compartiments Rumpf et al. 2018), state now: 11.12.2023, 11:54
# dput(N_con_w)
if(!exists('N_con_w')){
N_con_w <- as.data.frame(
structure(list(X = 1:48, SP_com = c("BU_stw", "BU_stwb", "BU_sw",
"BU_swb", "BU_fw", "EI_stw", "EI_stwb", "EI_sw", "EI_swb", "EI_fw",
"ES_stw", "ES_stwb", "ES_sw", "ES_swb", "ES_fw", "AH_stw", "AH_stwb",
"AH_sw", "AH_swb", "AH_fw", "BI_stw", "BI_stwb", "BI_sw", "BI_swb",
"BI_fw", "ERL_stw", "ERL_stwb", "ERL_sw", "ERL_swb", "ERL_fw",
"FI_stw", "FI_stwb", "FI_sw", "FI_swb", "FI_fw", "FI_f", "KI_stw",
"KI_stwb", "KI_sw", "KI_swb", "KI_fw", "KI_f", "DGL_stw", "DGL_stwb",
"DGL_sw", "DGL_swb", "DGL_fw", "DGL_f"),
SP_BWI = c("BU", "BU","BU", "BU", "BU", "EI", "EI", "EI", "EI", "EI", "ES", "ES", "ES",
"ES", "ES", "AH", "AH", "AH", "AH", "AH", "BI", "BI", "BI", "BI",
"BI", "ERL", "ERL", "ERL", "ERL", "ERL", "FI", "FI", "FI", "FI",
"FI", "FI", "KI", "KI", "KI", "KI", "KI", "KI", "DGL", "DGL",
"DGL", "DGL", "DGL", "DGL"),
compartiment = c("stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw",
"sb", "fwb", "stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw",
"sb", "fwb", "stw", "stb", "sw", "sb", "fwb", "stw", "stb", "sw",
"sb", "fwb", "ndl", "stw", "stb", "sw", "sb", "fwb", "ndl", "stw",
"stb", "sw", "sb", "fwb", "ndl"),
N_mean_gkg = c("1.335", "7.227", "1.335", "7.227", "4.601", "1.752", "6.507", "1.752", "6.507",
"6.209", "1.438", "5.348", "1.438", "5.348", "3.721", "1.465",
"7.729", "1.465", "7.729", "4.278", "1.828", "6.131", "1.828",
"6.131", "6.057", "2.475", "11.028", "2.475", "11.028", "7.214",
"0.812", "4.84", "0.812", "4.84", "4.343", "12.978", "0.794",
"4.339", "0.794", "4.339", "4.058", "15.201", "0.701", "3.91",
"0.701", "3.91", "4.203", "15.166"),
reference = c("Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018", "Rumpf et al. 2018",
"Rumpf et al. 2018", "Rumpf et al. 2018"),
N_con = c("0.001335", "0.007227", "0.001335", "0.007227", "0.004601", "0.001752", "0.006507",
"0.001752", "0.006507", "0.006209", "0.001438", "0.005348", "0.001438",
"0.005348", "0.003721", "0.001465", "0.007729", "0.001465", "0.007729",
"0.004278", "0.001828", "0.006131", "0.001828", "0.006131", "0.006057",
"0.002475", "0.011028", "0.002475", "0.011028", "0.007214", "0.000812",
"0.00484", "0.000812", "0.00484", "0.004343", "0.012978", "0.000794",
"0.004339", "0.000794", "0.004339", "0.004058", "0.015201", "0.000701",
"0.00391", "0.000701", "0.00391", "0.004203", "0.015166")),
class = "data.frame",
row.names = c(NA, -48L)))}else{
print("N_con_w already exists")
}
# 2.2.2. Nitrogen content foliage -----------------------------------------
# this is the result of a dput of N_con_f (nitrogen content in foliage), state now: 11.12.2023, 11:54
#dput(N_con_f)
if(!exists('N_con_f')){N_con_f <- as.data.frame(
structure(list(X = 1:6, name = c("Birke", "Erle", "Gewoehnliche Fichte","Gewoehnliche Kiefer", "LB", "NB"),
N_f_SP_group_MoMoK = c("BI", "ERL", "FI", "KI", "aLB", "aNB"),
compartiment = c("ndl", "ndl", "ndl", "ndl", "ndl", "ndl"),
SP_com = c("BI_f", "ERL_f", "FI_f", "KI_f", "aLB_f", "aNB_f"),
LH_NH = c("LB", "LB", "NB", "NB",  "LB", "NB"),
N_mean_gkg = c("27.9538461538462", "27.2095238095238", "14.1362851664451", "17.0535167934124", "27.581684981685", "15.5949009799288"),
N_con = c("0.0279538461538462", "0.0272095238095238", "0.0141362851664451", "0.0170535167934124", "0.027581684981685", "0.0155949009799288")),
class = "data.frame",
row.names = c(NA, -6L)))}else{
print("N_con_f already exists")
}
# 2.3. DBH transformation -------------------------------------------------
# 2.3.1. DBH region -------------------------------------------------------
# this is the output of a dput of DBH_region which is called neu_x_ld.csv in the BZE database, state now: 11.12.2023, 11:54
# dput(DBH_region)
if(!exists('DBH_region')){
DBH_region <- as.data.frame(
structure(list(icode_reg = c(-9L, -2L, -1L, 1L, 2L, 3L, 4L, 5L,6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 20L),
reg_shortG = c("fehlt",  "nicht ausgeprägt", "nicht erhoben", "SH", "HH", "NI", "HB",
"NW", "HE", "RP", "BW", "BY", "SL", "BE", "BB", "MV", "SN", "ST",  "TH", "TD"),
reg_longG = c("Merkmal vergessen, nicht rekonstruierbar oder unbekannt", "Merkmal nicht ausgeprägt/nicht vorhanden",
"Merkmal nicht erhoben", "Schleswig-Holstein", "Hansestadt Hamburg", "Niedersachsen",
"Hansestadt Bremen", "Nordrhein-Westfalen", "Hessen", "Rheinland-Pfalz",
"Baden-Württemberg", "Bayern", "Saarland", "Berlin", "Brandenburg",
"Mecklenburg-Vorpommern", "Sachsen", "Sachsen-Anhalt", "Thüringen",  "Testdaten"),
country = c(-9L, -2L, -1L, 1L, 1L, 3L, 3L, 5L,6L, 7L, 8L, 9L, 10L, 12L, 12L, 13L, 14L, 15L, 16L, 20L),
region = c(-2L, -2L, -2L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, -2L)),
class = "data.frame",
row.names = c(NA, -20L)))}else{
print("DBH_region already exists")
}
# 2.3.2. DBH_tangenz ------------------------------------------------------
# this is the output of a dput of DBH_region which is called neu_x_ld.csv in the BZE database, state now: 11.12.2023, 11:54
#dput(DBH_tan)
if(!exists('DBH_tan')){
DBH_tan <- as.data.frame(
structure(list(SP_BWI1 = c("AH", "AH", "AH", "BAH", "BAH", "BAH",
"BI", "BI", "BI", "BLB", "BLB", "BLB", "BPA", "BPA", "BPA", "BU",
"BU", "BU", "DGL", "DGL", "DGL", "EI", "EI", "EI", "EIB", "EIB",
"EIB", "EL", "EL", "EL", "ELA", "ELA", "ELA", "ERL", "ERL", "ERL",
"ES", "ES", "ES", "FAH", "FAH", "FAH", "FI", "FI", "FI", "HBU",
"HBU", "HBU", "JLA", "JLA", "JLA", "KA", "KA", "KA", "KI", "KI",
"KI", "KIR", "KIR", "KIR", "KTA", "KTA", "KTA", "LAE", "LAE",
"LAE", "LB", "LB", "LB", "LI", "LI", "LI", "NB", "NB", "NB",
"PA", "PA", "PA", "REI", "REI", "REI", "ROB", "ROB", "ROB", "SAH",
"SAH", "SAH", "SFI", "SFI", "SFI", "SKI", "SKI", "SKI", "SLB",
"SLB", "SLB", "SNB", "SNB", "SNB", "TA", "TA", "TA", "THU", "THU",
"THU", "TSU", "TSU", "TSU", "UL", "UL", "UL", "VB", "VB", "VB",
"WEI", "WEI", "WEI", "WEY", "WEY", "WEY"),
region = c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L,
1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L,
2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L,
1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L,
2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L,
1L, 2L, 3L, 1L, 2L, 3L),
tangenz = c(40, 45.6, 44.5, 40, 45.6, 44.5, 41.1, 42, 45.5, 37, 42.2, 40, 38.8, 40, 43.7, 43.8, 44.3,
48.3, 52.5, 45.9, 52.4, 35.6, 42.9, 43.9, 38.8, 63.5, 46.7, 26.5,
26.5, 30.4, 60.8, 55.6, 67, 45, 44.8, 46.3, 40.1, 37.9, 46.7,
24.3, 24.3, 32.5, 54, 54, 63.8, 35.6, 37.3, 35.4, 60.8, 55.6,
67, 26, 36.4, 36.2, 52.8, 54, 60, 45.2, 29.8, 38.9, 48, 43.3,
49.3, 60.8, 55.6, 67, 37, 33.2, 33.5, 26.7, 43, 37.9, 38.8, 63.5,
46.7, 38.8, 40, 43.7, 35.6, 42.9, 43.9, 30, 36.3, 36.5, 40, 45.6,
44.5, 50.3, 45.2, 70.7, 40, 46.9, 52.8, 37, 33.2, 33.5, 38.8,
63.5, 46.7, 49.5, 61.8, 62, 31.7, 31.7, 48, 43.2, 43.2, 43.2,
26, 21.9, 26.5, 42, 34.2, 36.6, 30, 30, 31.7, 50.7, 65.5, 59.6),
icode = c(901L, 901L, 901L, 902L, 902L, 902L, 903L, 903L,
903L, 904L, 904L, 904L, 905L, 905L, 905L, 906L, 906L, 906L, 907L,
907L, 907L, 908L, 908L, 908L, 94L, 94L, 94L, 909L, 909L, 909L,
910L, 910L, 910L, 911L, 911L, 911L, 912L, 912L, 912L, 913L, 913L,
913L, 914L, 914L, 914L, 915L, 915L, 915L, 916L, 916L, 916L, 917L,
917L, 917L, 918L, 918L, 918L, 919L, 919L, 919L, 920L, 920L, 920L,
921L, 921L, 921L, 929L, 929L, 929L, 922L, 922L, 922L, 930L, 930L,
930L, 923L, 923L, 923L, 924L, 924L, 924L, 925L, 925L, 925L, 926L,
926L, 926L, 927L, 927L, 927L, 928L, 928L, 928L, 929L, 929L, 929L,
930L, 930L, 930L, 931L, 931L, 931L, 932L, 932L, 932L, 933L, 933L,
933L, 934L, 934L, 934L, 935L, 935L, 935L, 936L, 936L, 936L, 937L,
937L, 937L)),
class = "data.frame",
row.names = c(NA, -120L)))}else{
print("DBH_tan already exists")
}
##### stocks ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## HBI stocks
# LT
here()
paste0(here(),"/scripts/BZE_III/03_01_LT_heights_HBI_BZE3.R")

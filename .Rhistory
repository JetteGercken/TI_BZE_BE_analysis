}else{  data.frame()}
# binding the both circle lists back together
rem.circle.two.edges.df.nogeo <- if(isTRUE(nrow(rem.circle.poly.two.edges.df.nogeo) != 0 && nrow(rem.circle.multipoly.two.edges.df.nogeo) != 0) == T){
plyr::rbind.fill(rem.circle.poly.two.edges.df.nogeo, rem.circle.multipoly.two.edges.df.nogeo)
}else{rem.circle.poly.two.edges.df.nogeo}
# 3.2.1.3.2. outer edge: loop for intersection of plots with 2 edges, edge type 1, 2 ---------------------------------------------------------------
# dataprep for loop
# createa dataframe with plots that have only one forest edges
forest_edges.man.sub.2.outer.edges.nogeo <-
# check for plots with two edges that have an edge labelled type 1 or 2
forest_edges.man %>%
# select only plots with a known edge form and for edge 2
# --> select only those that actually intersect the 17m circle
filter(e_form == 1 |
e_form == 2 & inter_status_AT_17 == "two I" |
e_form == 2 & inter_status_BT_17 == "two I") %>%  # rows:81
# filter plots that have two edges among those that have edges at all
semi_join(forest_edges.man %>% filter(e_form == 1 |
e_form == 2 & inter_status_AT_17 == "two I" |
e_form == 2 & inter_status_BT_17 == "two I") %>%
group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") %>%
# select those plots among the plots htat have two edges of which at least one intersects the circle which
# have at least one edge_type of 1 or 2
semi_join(., forest_edges.man %>% filter(e_type %in% c(1, 2)) %>% select(plot_ID), by = "plot_ID") %>%
arrange(plot_ID, e_ID)# %>% # 14 plots iwth 2 edges --> 28 rows
# prepare output lists
# list to save areas in
outer.edges.list.two.edges.nogeo <- vector("list", length = length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
# list to save the first intersection polygone per plot in
outer.inter.poly.1.list.nogeo <- vector("list", length = length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
# list to save the second intersection polygone per plot in
outer.inter.poly.2.list.nogeo <- vector("list", length = length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
# list to save the remaining circle polygones per plot in
outer.rem.circle.poly.2.edges.list.nogeo <- vector("list", length = length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
# list to save the remaining circle MULTIpolygones per plot in
outer.rem.circle.multipoly.2.edges.list.nogeo <- vector("list", length = length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
# list for plop IDs of those plots where the edge lines/ polygones intersect within the 17.84m circle
outer.intersection.warning.edges.list.nogeo <- vector("list", length = length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
for (i in 1:length(unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID))){
#i = 3
# i = which(grepl(140068, unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)))
#if(nrow(forest_edges.man.sub.2.outer.edges.nogeo) == 0){break}
# select plot ID of the respective circle
my.plot.id <- unique(forest_edges.man.sub.2.outer.edges.nogeo$plot_ID)[i]
my.inv.year <- unique(forest_edges.man.sub.2.outer.edges.nogeo[i, c("plot_ID", "inv_year")])[, "inv_year"]
## select the UTM coordiantes of the center of the cirlce corresponding with the plot ID
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
#### build circle
# circle data
c.x0 = 0    # + my.center.easting
c.y0 = 0    # + my.center.northing
c.r3 = 17.84
c.r2 = 12.62
c.r1 = 5.64
# build polygon (circlular buffer) around center point
center.df<- as.data.frame(cbind("lon" = c.x0, "lat" = c.y0))
circle.pt <- sf::st_as_sf(center.df, coords = c("lon", "lat"))
## assing crs to cirlce corodiantes
# sf::st_crs(circle.pt) <- my.utm.epsg
circle.17 <- sf::st_buffer(circle.pt, c.r3)
circle.12 <- sf::st_buffer(circle.pt, c.r2)
circle.5 <- sf::st_buffer(circle.pt, c.r1)
# tree data to identify edge without trees
outer.trees.df <- trees_data[trees_data$plot_ID == my.plot.id, ]
my.tree.id <- outer.trees.df["tree_ID"]
# calcualte polar coordinates of trees
tree.coord.df <- outer.trees.df %>%
mutate(dist_tree = dist_cm/100,
x_tree = dist_tree*sin(azi_gon*pi/200),
y_tree = dist_tree*cos(azi_gon*pi/200),
lon = x_tree, #+ my.center.easting,
lat =  y_tree ) %>% # + my.center.northing)
select(plot_ID, tree_ID, inv_year, lon, lat) %>% distinct()
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
#### select the  polygones the circle is intersected by
# select the polygones with the same plot ID as the cirlce
my.plot.polys.df <- edge.poly.df.nogeo %>%
filter(plot_ID == my.plot.id ) %>% arrange(e_ID) %>%
left_join(., forest_edges.man %>% select(plot_ID, e_ID, e_type), by = c("plot_ID", "e_ID"))
#  this part is about whicht polgone to priotiise if there are two overlapping edges:
# usually we would select the polygone with edge_ID == 1 to be the priotiised one. now however, we will select the polygone with
# no trees to be the prioritized
## create the polygones of the edge geometries
# determine intersection status between poly and trees
# select the polygone with no trees and make it poly.1
# if the first polygone intersects with trees, but the second polygone doesn´t have intersections with trees while the edge type is 1 or 2,
# poly.1 is changes to poly.2
# if that is not the case everything remains as it is in the "normal" / "not outer  edges" way
# if edge 2 doesn´t have trees and the edge type 1 or two  edge ID 2 becomed poly.1 and edge ID 1 becomes poly.2
# poly.1 means that this is the polygone to be prioritized while
# --> this means the only way to prioritize the polygonn with the ID 2 is when it is an edge is an outer edge and it really doesnt have trees
# in any other case edge ID 1is prioritized
# nrow(st_intersection(sf::st_as_sf(my.plot.polys.df[1,]), tree.sf)) != 0) &&
if(isTRUE(my.plot.polys.df$e_type[2] %in% c(1,2) & nrow(st_intersection(sf::st_as_sf(my.plot.polys.df[2,]), tree.sf)) == 0 &
!(my.plot.polys.df$e_type[1] %in% c(1,2)))){
my.poly.1 <- sf::st_as_sf(my.plot.polys.df[2,])
my.poly.2 <- sf::st_as_sf(my.plot.polys.df[1,])
}else {
# if edge ID 2 does have type 1 or 2 but intersects with trees, the poly with the ID 1 remains poly.1 if
# if edge ID 1 doesn´t have trees but has the edge type 1 or 2 edge 1 becomed poly.1 and edge 2 becomes poly.2
# if both edges have trees or both edges do not have trees no matter their edge type, the poly with edge ID 1 becomes poly.1 and the edge with ID 2 becomes poly.2
my.poly.1 <- sf::st_as_sf(my.plot.polys.df[1,])
my.poly.2 <- sf::st_as_sf(my.plot.polys.df[2,])
}
# select edge ID of edge polygones
my.e.id.1 <- my.poly.1$e_ID
my.e.id.2 <- my.poly.2$e_ID
# select edge form of the respective edge polygones
my.e.form.1 <- my.poly.1$e_form
my.e.form.2 <- my.poly.2$e_form
# # print edges and circle
# print(c(plot(circle.17$geometry),
#         plot(my.poly.1$geometry, col = "red", add = T),
#       plot(my.poly.2$geometry, col = "blue",  add = T),
#       plot(st_geometry(tree.sf), add = TRUE)))
#### intersections between polygones and circles
### 17m circle
my.circle = circle.17
## create poolygon of intersection for first polygon with circle
inter.poly.17.1  <- st_intersection(my.circle, my.poly.1)
inter.status.poly.17.1 <- ifelse(nrow(inter.poly.17.1) == 0, "no intersections",
ifelse(my.e.form.1 == 1 & inter.poly.17.1$geometry == my.circle$geometry,  "no intersections",
ifelse(my.e.form.1 == 2 & inter.poly.17.1$geometry == my.circle$geometry, "fully covering circle",
"partly intersecting")))
# if the first ednge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections and the circle is passed on to the next edge to calcualte the intersection
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.17.1.a <- if(isTRUE(inter.poly.17.1$geometry == my.circle$geometry)){inter.poly.17.1 <- data.frame()}else{inter.poly.17.1}
## create poolygon of remaining circle after first edge polygone is intersected
# create poly with remaining area: https://gis.stackexchange.com/questions/353633/r-spatial-erase-one-polygon-from-another-correct-use-of-st-difference
remaining.circle.17.1.a <- if(nrow(inter.poly.17.1)==0){my.circle}else{sf::st_difference(my.circle, inter.poly.17.1)}
# here we have to correct the remaining circle: the circle can only be the part that contains the center of the plot
inter.poly.17.1 <- if(nrow(st_intersection(inter.poly.17.1.a, circle.pt))==0){inter.poly.17.1.a}else{remaining.circle.17.1.a}
remaining.circle.17.1 <- if(nrow(st_intersection(remaining.circle.17.1.a, circle.pt))!=0){remaining.circle.17.1.a}else{inter.poly.17.1.a}
# print(plot(inter.poly.17.1$geometry, col = "grey", main = paste0(my.plot.id, "-", my.e.form.1,  "-", c.r3)))
# print(plot(remaining.circle.17.1$geometry, col = "grey", main = paste0(my.plot.id, "-", my.e.form.1,  "-", c.r3)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.17.2 <- st_intersection(my.poly.2, st_geometry(remaining.circle.17.1))
inter.status.poly.17.2 <- ifelse(nrow(inter.poly.17.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.17.2$geometry == remaining.circle.17.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.17.2$geometry == remaining.circle.17.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.17.2 <- if(isTRUE(inter.poly.17.2$geometry == remaining.circle.17.1$geometry)){inter.poly.17.2 <- data.frame()}else{inter.poly.17.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.17.1.and.2.poly <- if(nrow(inter.poly.17.2)==0){remaining.circle.17.1}else{sf::st_difference(remaining.circle.17.1, inter.poly.17.2)}
#print(plot(remaining.circle.17.1.and.2.poly$geometry, main = paste0(my.plot.id, "-", my.e.form.2,  "-", c.r3)))
### 12m circle
my.circle = circle.12
## create poolygon of intersection for first polygon with circle
inter.poly.12.1  <- st_intersection(my.circle, my.poly.1)
inter.status.poly.12.1 <- ifelse(nrow(inter.poly.12.1) == 0, "no intersections",
ifelse(my.e.form.1 == 1 & inter.poly.12.1$geometry == my.circle$geometry,  "no intersections",
ifelse(my.e.form.1 == 2 & inter.poly.12.1$geometry == my.circle$geometry, "fully covering circle",
"partly intersecting")))
# if the first ednge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections and the circle is passed on to the next edge to calcualte the intersection
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.12.1.a <- if(isTRUE(inter.poly.12.1) && inter.poly.12.1$geometry == my.circle$geometry){inter.poly.12.1 <- data.frame()}else{inter.poly.12.1}
## create poolygon of remaining circle after first edge polygone is intersected
# create poly with remaining area: https://gis.stackexchange.com/questions/353633/r-spatial-erase-one-polygon-from-another-correct-use-of-st-difference
remaining.circle.12.1.a <- if(nrow(inter.poly.12.1)==0){my.circle}else{sf::st_difference(my.circle, inter.poly.12.1)}
# here we have to correct the remaining circle: the circle can only be the part that contains the center of the plot
inter.poly.12.1 <- if(nrow(st_intersection(inter.poly.12.1.a, circle.pt))==0){inter.poly.12.1.a}else{remaining.circle.12.1.a}
remaining.circle.12.1 <- if(nrow(st_intersection(remaining.circle.12.1.a, circle.pt))!=0){remaining.circle.12.1.a}else{inter.poly.12.1.a}
#print(plot(remaining.circle.12.1$geometry, main = paste0(my.plot.id, "-", my.e.form.2,  "-", c.r2)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.12.2 <- st_intersection(my.poly.2, st_geometry(remaining.circle.12.1))
inter.status.poly.12.2 <- ifelse(nrow(inter.poly.12.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.12.2$geometry == remaining.circle.12.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.12.2$geometry == remaining.circle.12.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.12.2 <- if(isTRUE(inter.poly.12.2) && inter.poly.12.2$geometry == remaining.circle.12.1$geometry){inter.poly.12.2 <- data.frame()}else{inter.poly.12.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.12.1.and.2.poly <- if(nrow(inter.poly.12.2)==0){remaining.circle.12.1}else{sf::st_difference(remaining.circle.12.1, inter.poly.12.2)}
### 5m circle
my.circle = circle.5
## create poolygon of intersection for first polygon with circle
inter.poly.5.1  <- st_intersection(my.circle, my.poly.1)
inter.status.poly.5.1 <- ifelse(nrow(inter.poly.5.1) == 0, "no intersections",
ifelse(my.e.form.1 == 1 & inter.poly.5.1$geometry == my.circle$geometry,  "no intersections",
ifelse(my.e.form.1 == 2 & inter.poly.5.1$geometry == my.circle$geometry, "fully covering circle",
"partly intersecting")))
# if the first ednge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections and the circle is passed on to the next edge to calcualte the intersection
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.5.1.a <- if(isTRUE(inter.poly.5.1) && inter.poly.5.1$geometry == my.circle$geometry){inter.poly.5.1 <- data.frame()}else{inter.poly.5.1}
## create poolygon of remaining circle after first edge polygone is intersected
# create poly with remaining area: https://gis.stackexchange.com/questions/353633/r-spatial-erase-one-polygon-from-another-correct-use-of-st-difference
remaining.circle.5.1.a <- if(nrow(inter.poly.5.1)==0){my.circle}else{sf::st_difference(my.circle, inter.poly.5.1)}
# print(plot(remaining.circle.5.1$geometry, main = paste0(my.plot.id, "-",my.e.form.1,  "-", c.r1)))
# here we have to correct the remaining circle: the circle can only be the part that contains the center of the plot
inter.poly.5.1 <- if(nrow(st_intersection(inter.poly.5.1.a, circle.pt))==0){inter.poly.5.1.a}else{remaining.circle.5.1.a}
remaining.circle.5.1 <- if(nrow(st_intersection(remaining.circle.5.1.a, circle.pt))!=0){remaining.circle.5.1.a}else{inter.poly.5.1.a}
# print(plot(remaining.circle.12.1$geometry, main = paste0(my.plot.id, "-", my.e.form.2,  "-", c.r2)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.5.2 <- st_intersection(my.poly.2, st_geometry(remaining.circle.5.1))
inter.status.poly.5.2 <- ifelse(nrow(inter.poly.5.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.5.2$geometry == remaining.circle.5.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.5.2$geometry == remaining.circle.5.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.5.2 <- if(isTRUE(inter.poly.5.2) && inter.poly.5.2$geometry == remaining.circle.5.1$geometry){inter.poly.5.2 <- data.frame()}else{inter.poly.5.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.5.1.and.2.poly <- if(nrow(inter.poly.5.2)==0){remaining.circle.5.1}else{sf::st_difference(remaining.circle.5.1, inter.poly.5.2)}
#### calculate the area
## 17m cricle
# area of the intersection 1
inter.17.1.area <- ifelse(nrow(inter.poly.17.1) == 0, 0, sf::st_area(inter.poly.17.1))
# area of the intersection polygone 2
inter.17.2.area <- ifelse(nrow(inter.poly.17.2) == 0, 0, sf::st_area(inter.poly.17.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.17 <- sf::st_area(remaining.circle.17.1.and.2.poly)
# save area in dataframe
inter.area.df.17 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id), "e_ID" = c(my.e.id.1, my.e.id.2, 0),
"inv_year" = c(my.inv.year, my.inv.year, my.inv.year),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"CCS_r_m" = c(c.r3, c.r3, c.r3),
"inter_stat" = c(inter.status.poly.17.1, inter.status.poly.17.2, 0),
"area_m2" = c(inter.17.1.area, inter.17.2.area, remaining.circle.area.17)
))
## 12m cricle
# area of the intersection 1
inter.12.1.area <- ifelse(nrow(inter.poly.12.1) == 0, 0, sf::st_area(inter.poly.12.1))
# area of the intersection polygone 2
inter.12.2.area <- ifelse(nrow(inter.poly.12.2) == 0, 0, sf::st_area(inter.poly.12.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.12 <- sf::st_area(remaining.circle.12.1.and.2.poly)
# save area in dataframe
inter.area.df.12 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id), "e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"inv_year" = c(my.inv.year, my.inv.year, my.inv.year),
"CCS_r_m" = c(c.r2, c.r2, c.r2),
"inter_stat" = c(inter.status.poly.12.1, inter.status.poly.12.2, 0),
"area_m2" = c(inter.12.1.area, inter.12.2.area, remaining.circle.area.12)
))
## 5m cricle
# area of the intersection 1
inter.5.1.area <- ifelse(nrow(inter.poly.5.1) == 0, 0, sf::st_area(inter.poly.5.1))
# area of the intersection polygone 2
inter.5.2.area <- ifelse(nrow(inter.poly.5.2) == 0, 0, sf::st_area(inter.poly.5.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.5 <- sf::st_area(remaining.circle.5.1.and.2.poly)
# save area in dataframe
inter.area.df.5 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id),
"e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"inv_year" = c(my.inv.year, my.inv.year, my.inv.year),
"CCS_r_m" = c(c.r1, c.r1, c.r1),
"inter_stat" = c(inter.status.poly.5.1, inter.status.poly.5.2, 0),
"area_m2" = c(inter.5.1.area, inter.5.2.area, remaining.circle.area.5)
))
# bind area datafames of all 3 circles together
inter.area.df <- rbind(inter.area.df.17, inter.area.df.12,inter.area.df.5 ) %>%
mutate(across(c("plot_ID", "e_ID", "inv_year", "CCS_r_m", "area_m2"), as.numeric))
# assing stand to the edges depedning on area and the stand with trees
# is there a polygone that does not incluce the middle of the plot, has the t<pe 1 or 2 (if its an edge) and doesn´t have trees
# then the poylgone is labelled with "no forest" and the remaining polygones are allocated into stands by area
# first "if": both edges are edge type 1 or 2 and do not have trees and do not have the middle of the plot
if(isTRUE(nrow(st_intersection(inter.poly.17.1, tree.sf))!=0 & my.poly.1$e_type %in% c(1,2))){inter.17.1.tree.stat <- "trees but outer edge"}else{inter.17.1.tree.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.2, tree.sf))!=0 & my.poly.2$e_type %in% c(1,2))){inter.17.2.tree.stat <- "trees but outer edge"}else{inter.17.2.tree.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.1, circle.pt))!=0 & my.poly.1$e_type %in% c(1,2))){inter.17.1.center.stat <- "center but outer edge"}else{inter.17.1.center.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.2, circle.pt))!=0 & my.poly.2$e_type %in% c(1,2))){inter.17.2.center.stat <- "center but outer edge"}else{inter.17.2.center.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.1, tree.sf))==0 & nrow(st_intersection(inter.poly.17.1, circle.pt))==0 & my.poly.1$e_type %in% c(1,2))){inter.17.1.forest.stat <- "no forest"}else{inter.17.1.forest.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.2, tree.sf))==0 & nrow(st_intersection(inter.poly.17.2, circle.pt))==0 & my.poly.2$e_type %in% c(1,2))){inter.17.2.forest.stat <- "no forest"}else{inter.17.2.forest.stat <- NA}
my.poly.1$stand <- case_when(inter.17.1.tree.stat ==  "trees but outer edge" | inter.17.1.center.stat == "center but outer edge" ~ "warning",
inter.17.1.tree.stat ==  "trees but outer edge" & inter.17.1.center.stat == "center but outer edge" ~ "warning",
inter.17.1.forest.stat == "no forest"~ "no forest",
TRUE ~ NA)
my.poly.2$stand <- case_when(inter.17.2.tree.stat ==  "trees but outer edge" | inter.17.2.center.stat == "center but outer edge" ~ "warning",
inter.17.2.tree.stat ==  "trees but outer edge" | inter.17.2.center.stat == "center but outer edge" ~ "warning",
inter.17.2.forest.stat == "no forest"~ "no forest",
TRUE ~ NA)
# create dataframe with stand info per edge/ remaining circle
stand.df <- as.data.frame(cbind(
"plot_ID" = my.plot.id,
"e_ID" = c(my.poly.1$e_ID, my.poly.2$e_ID, 0),
"stand"= c(ifelse(length(my.poly.1$stand) == 0, NA, my.poly.1$stand),
ifelse(length(my.poly.2$stand) == 0, NA, my.poly.2$stand),
ifelse(length(remaining.circle.17.1.and.2.poly$stand) == 0, NA, remaining.circle.17.1.and.2.poly$stand) ))) %>%
mutate(plot_ID = as.numeric(plot_ID),
e_ID = as.numeric(e_ID))
stand.df <-
rbind(
inter.area.df%>%
filter(CCS_r_m  == 17.84) %>%
mutate(area_m2 = as.numeric(area_m2)) %>%
left_join(., stand.df, by = c("plot_ID", "e_ID")) %>%
group_by(plot_ID, inv_year) %>%
arrange(desc(area_m2)) %>%
filter(!(stand %in% c("no forest", "warning"))) %>%
# assing stand according to row number by selecting the letter of the alphabet with the respective number e.g. row == 1 --> A:
# https://www.geeksforgeeks.org/sequence-of-alphabetical-character-letters-from-a-z-in-r/
# lowest area receives stand ID C, then B, then A
mutate(stand = LETTERS[row_number()]),
# dataset with "no forest" or "warning" stands (if there are any, if not i´ll just not bind them)
inter.area.df%>%
filter(CCS_r_m  == 17.84) %>%
mutate(area_m2 = as.numeric(area_m2)) %>%
left_join(., stand.df, by = c("plot_ID", "e_ID")) %>%
filter(stand %in% c("no forest", "warning")) %>%
mutate(stand = as.character(stand))
) %>%
# make stand.df joinable by only leaving plot_ID, e_ID, no matter the diameter of the CCS
select(- c(CCS_r_m, inter_stat, area_m2))
stand.df <- stand.df %>%
mutate(plot_ID = as.numeric(plot_ID),
e_ID = as.numeric(e_ID),
inv_year = as.numeric(inv_year))
# join in stand info based on area of the edge segment
inter.area.df <- inter.area.df %>% left_join(., stand.df,
by = c("plot_ID", "e_ID", "inv_year"))
print(  c(plot(circle.17$geometry, main = paste0(my.plot.id, " - ", my.e.form.1, " - ", my.e.form.2)),
plot(remaining.circle.17.1.and.2.poly$geometry, col = "grey", add = T),
plot(remaining.circle.12.1.and.2.poly$geometry, add = T),
plot(remaining.circle.5.1.and.2.poly$geometry, add = T),
plot(inter.poly.17.1$geometry, col = "green", add =TRUE),
plot(inter.poly.17.2$geometry, col = "blue", add =TRUE),
plot(circle.pt$geometry, col = "red",  add = TRUE),
legend("topleft", legend=c(paste0(unique(inter.area.df$stand[inter.area.df$e_ID == my.poly.1$e_ID]),":",  my.poly.1$e_type),
paste0(unique(inter.area.df$stand[inter.area.df$e_ID == my.poly.2$e_ID]),":",  my.poly.2$e_type),
paste0(unique(inter.area.df$stand[inter.area.df$e_ID == 0]),":","rem_circle")),
col=c("green", "blue", "grey"), lty=1:2, cex=0.8),
plot(st_geometry(tree.sf), add = TRUE)))
# save datacframe per plot in list
outer.edges.list.two.edges.nogeo[[i]] <- inter.area.df
# create list with those plot ID where the two edges intersect within the radius of 17.84m
intersection.between.edges.17 <- sf::st_intersection(
sf::st_intersection(my.poly.1, circle.17), # intersection poly 1 and cirlce 17
sf::st_intersection(my.poly.2, circle.17)) # intersection poly 2 and cirlce 17
intersection.warning.edges <- ifelse(nrow(intersection.between.edges.17) == 0, NA, intersection.between.edges.17$plot_ID)
outer.intersection.warning.edges.list.nogeo[[i]] <- as.data.frame(cbind("plot_ID" = c(intersection.warning.edges)))
## save intersection polygones in list
# poly.1
outer.inter.poly.1.list.nogeo[[i]] <- if(nrow(inter.poly.17.1)!= 0){c(inter.poly.17.1)}else{
# this is in case one of the inter polys is empty but we still want to transport the stand info with the polygone
c(my.poly.1)[1:6]}
# poly.2
outer.inter.poly.2.list.nogeo[[i]] <- if(nrow(inter.poly.17.2)!= 0){c(inter.poly.17.2)}else{
# this is in case one of the inter polys is empty but we still want to transport the stand info with the polygone
c(my.poly.2)[1:6]}
## save the reimaingf circle polygones in a list
remaining.circle.17.1.and.2.poly$plot_ID <- my.plot.id
remaining.circle.17.1.and.2.poly$e_ID <- 0
remaining.circle.17.1.and.2.poly$inv_year <- my.inv.year
remaining.circle.17.1.and.2.poly$e_form <- 0
remaining.circle.17.1.and.2.poly$geometry <- remaining.circle.17.1.and.2.poly$geometry
# create list wit polygones of the remaining cirlce when it´s only one polygone
outer.rem.circle.poly.2.edges.list.nogeo[[i]] <- if(st_geometry_type(remaining.circle.17.1.and.2.poly)== "POLYGON"){c(remaining.circle.17.1.and.2.poly)}else{}
# create list wit polygones of the remaining cirlce when it´s a multipoligone
outer.rem.circle.multipoly.2.edges.list.nogeo[[i]] <- if(st_geometry_type(remaining.circle.17.1.and.2.poly)== "MULTIPOLYGON"){c(remaining.circle.17.1.and.2.poly)}else{}
}
# save areas into dataframe
outer.edges.area.two.edges.df.nogeo <- as.data.frame(rbindlist(outer.edges.list.two.edges.nogeo))
# save plot IDs with overlappig edges within the 17.84m circle into dataframe
outer.intersection.two.edges.warning.df.nogeo <- na.omit(as.data.frame(rbindlist(outer.intersection.warning.edges.list.nogeo, fill=TRUE)))
if(nrow(outer.intersection.two.edges.warning.df.nogeo)!=0){print("There are plots with overlapping edges within a 17.84m radius around the plot center.
Please check dataset intersection.two.edges.warning.df.nogeo")}
# save intersection polygones into dataframe
# list of polygones 1 of forest edges
outer.inter.poly.1.two.edges.df.nogeo <- as.data.frame(rbindlist(outer.inter.poly.1.list.nogeo, fill=TRUE))
# list of polygones 2 of forest edges
outer.inter.poly.2.two.edges.df.nogeo <- as.data.frame(rbindlist(outer.inter.poly.2.list.nogeo, fill=TRUE))
# bind the both edges per plot together
outer.inter.poly.two.edges.df.nogeo <- plyr::rbind.fill(outer.inter.poly.1.two.edges.df.nogeo, outer.inter.poly.2.two.edges.df.nogeo)
# list of polygones of remainign circles
outer.rem.circle.poly.two.edges.list.final.nogeo <- rbindlist(outer.rem.circle.poly.2.edges.list.nogeo, fill = TRUE)
outer.rem.circle.poly.two.edges.df.nogeo <- as.data.frame(outer.rem.circle.poly.two.edges.list.final.nogeo)[,c("plot_ID", "inv_year","e_ID",  "e_form","geometry")]  %>% distinct()
# list of multipolygones of remaining circles
outer.rem.circle.multipoly.two.edges.df.nogeo <- if(nrow(as.data.frame(rbindlist(outer.rem.circle.multipoly.2.edges.list.nogeo)))!= 0){
as.data.frame(rbindlist(outer.rem.circle.multipoly.2.edges.list.nogeo, fill = TRUE))[,c("plot_ID", "inv_year","e_ID",  "e_form","geometry")] %>% distinct()
}else{  data.frame()}
# binding the both circle lists back together
outer.rem.circle.two.edges.df.nogeo <- if(isTRUE(nrow(outer.rem.circle.poly.two.edges.df.nogeo) != 0 && nrow(outer.rem.circle.multipoly.two.edges.df.nogeo) != 0) == T){
plyr::rbind.fill(outer.rem.circle.poly.two.edges.df.nogeo, outer.rem.circle.multipoly.two.edges.df.nogeo)
}else{outer.rem.circle.poly.two.edges.df.nogeo}
# bind all edges area dataframes together
all.edges.area.df.nogeo <- plyr::rbind.fill(edges.area.df.nogeo, edges.area.two.edges.df.nogeo, outer.edges.area.df.nogeo, outer.edges.area.two.edges.df.nogeo) %>% mutate(area_m2 = as.numeric(area_m2)) %>% filter(!is.na(plot_ID))
inter.poly.one.edge.df.nogeo <- plyr::rbind.fill(inter.poly.one.edge.df.nogeo, outer.inter.poly.one.edge.df.nogeo) # %>% select(colnames(inter.poly.one.edge.df.nogeo)))
rem.circle.one.edge.df.nogeo <- plyr::rbind.fill(rem.circle.one.edge.df.nogeo, outer.rem.circle.one.edge.df.nogeo) # %>% select(colnames(rem.circle.one.edge.df.nogeo)))
# 3.2.2. sorting TREES into edge and remaining circle polygones ---------
# 3.2.2.1. plots with one edge: sorting trees into edge and remaining circle polygones ---------
trees.one.edge.nogeo <- trees_data %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
# filter for trees located in plots htat haev only one forest edge
anti_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") #%>%
tree.status.list.nogeo <- vector("list", length = length(trees.one.edge.nogeo$tree_ID))
tree.points.list.nogeo <- vector("list", length = length(trees.one.edge.nogeo$tree_ID))
i = which(grepl(140042, (trees.one.edge.nogeo$plot_ID)))
i
i = 356
# select plot ID accordint to positioin in the list
my.plot.id <-trees.one.edge.nogeo [i, "plot_ID"]
my.tree.id <- trees.one.edge.nogeo[i, "tree_ID"]
my.inv.year <- trees.one.edge.nogeo[i, "inv_year"]
my.plot.id
my.tree.id
# select the remaining cirlce we want to intersect the tree with
my.rem.circle <- sf::st_as_sf(rem.circle.one.edge.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct())
my.inter <- sf::st_as_sf(inter.poly.one.edge.df.nogeo  %>% filter(plot_ID == my.plot.id) %>% distinct())
area.plot.df <- all.edges.area.df.nogeo %>% filter(plot_ID == my.plot.id & CCS_r_m == 17.84)
# assign stand category to the polygones depending on which one is bigger/ smaller
my.rem.circle$stand <- area.plot.df$stand[area.plot.df$e_ID == 0]
my.inter$stand <- area.plot.df$stand[area.plot.df$e_ID == 1 | area.plot.df$e_ID == 2]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.one.edge.nogeo[i, "dist_cm"]/100
azi.tree <- trees.one.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree*pi/200)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree*pi/200)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree   # + my.center.easting
tree.north <-  y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(tree.east),
"lat" = c(tree.north)
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
print(c(plot(my.inter$geometry, main = paste0(my.plot.id)),
plot(my.rem.circle$geometry, add = T),
plot(tree.sf$geometry, add = T))
)
#  # spatial
#   install.packages("sf")
#   install.packages("rgdal")
#   install.packages("terra")
#  install.packages("sfheaders")
install.packages("splancs")
library(splancs)
splancs::inout(tree.sf, my.rem.circle, bound = T)
tree.sf
splancs::inout(tree.coord.df, my.rem.circle, bound = T)
tree.coord.df
tree.coord.df$lon[1]
splancs::inout(as.data.frame(tree.coord.df$lon[1], tree.coord.df$lat[1]), my.rem.circle, bound = T)
as.data.frame(tree.coord.df$lon[1], tree.coord.df$lat[1]
as.data.frame(tree.coord.df$lon[1], tree.coord.df$lat[1])
as.data.frame(x = tree.east, y= tree.north)
as.data.frame(x = tree.east, y= tree.north)
as.data.frame(cbind(x = tree.east, y= tree.north))
splancs::inout(as.data.frame(cbind(x = tree.east, y= tree.north)), my.rem.circle, bound = T)
tree.pnt <- splancs::as.points(as.data.frame(cbind(x = tree.east, y= tree.north))
splancs::inout(), my.rem.circle, bound = T)
tree.pnt <- splancs::as.points(as.data.frame(cbind(x = tree.east, y= tree.north)))
tree.pnt
splancs::inout(tree.pnt, my.rem.circle, bound = T)
tree.pnt <- splancs::as.points(tree.east, tree.north)
tree.pnt
splancs::inout(tree.pnt, my.rem.circle, bound = T)
splancs::polymap(my.rem.circle)
splancs::polymap(my.rem.circle$geometry)
tree.pnt <- splancs::as.points(tree.east, tree.north)
print(plot(splancs::polymap(my.rem.circle$geometry)),
plot(splancs::pointmap(tree.sf$geometry)))
print(plot(splancs::polymap(my.rem.circle$geometry)),
plot(splancs::pointmap(tree.sf$geometry), add =T))
splancs::pointmap(tree.sf$geometry, add =T)
splancs::polymap(my.rem.circle$geometry)
splancs::pointmap(tree.sf$geometry, add =T)
splancs::pointmap(tree.sf$geometry)
tree.pnt
splancs::inout(tree.pnt, my.rem.circle$geometry, bound = T)
splancs::inout(tree.sf$geometry, my.rem.circle$geometry, bound = T)
tree.sf$geometry
as.points(tree.sf$geometry)
tree.pnt <- splancs::as.points(tree.east, tree.north)
tree.pnt
splancs::inout(tree.pnt, my.rem.circle$geometry, bound = T)
splancs::inout(splancs::as.points(tree.pnt), my.rem.circle$geometry, bound = T)
as.list(tree.pnt)
splancs::as.points(x = tree.east, y = tree.north)
splancs::as.points(cbind(x = tree.east, y = tree.north)))
splancs::as.points(cbind(x = tree.east, y = tree.north))
tree.pnt <- as.list(splancs::as.points(cbind(x = tree.east, y = tree.north)))
tree.pnt
tree.pnt <-splancs::as.points(cbind(x = tree.east, y = tree.north))
tree.pnt
splancs::inout(splancs::as.points(tree.pnt), my.rem.circle$geometry, bound = T)
tree.pnt <- as.list(splancs::as.points(cbind(x = tree.east, y = tree.north)))
splancs::inout(splancs::as.points(tree.pnt), my.rem.circle$geometry, bound = T)
splancs::as.points(tree.sf$geometry)
tree.sf$geometry
splancs::inout(tree.sf$geometry, my.rem.circle$geometry, bound = T)
rnorm(tree.east)
as.points(rnorm(100),rnorm(100))
# deadwood
# this dataset contains the data of the deadwood inventory of the HBI (BZE2), including info about species groups and B, C, N stocks per tree
DW_data <- read.delim(file = here(paste0(out.path.BZE3, trees_data$inv[1], "_DW_update_4.csv")), sep = ",", dec = ".")
DW_data

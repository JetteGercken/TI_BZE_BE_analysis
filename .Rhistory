distinct(),
RG_stat_2 %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha)) %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))}else{
RG_plot_A_ha <- RG_data %>%
mutate(plot_A_ha = area_m2/10000) %>%
select(plot_ID, inv_year, CCS_nr, plot_A_ha) %>%
distinct() %>%
group_by(plot_ID, inv_year) %>%
summarise(plot_A_ha = sum(as.numeric(plot_A_ha)))
}
# 2.2. number of RG  plants  per hectar ----------------------------------------------
RG_n_ha <- RG_data %>%
filter(compartiment == "ag") %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, inv_year) %>%
# sum number of trees  per sampling circuit
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "RG")
# 2.3. number of RG  species per hectar ----------------------------------------------
RG_n_SP_plot <- RG_data %>%
filter(compartiment == "ag") %>%
select(plot_ID, inv_year, SP_code) %>%
group_by(plot_ID, inv_year) %>%
distinct() %>%
summarise(n_SP = n()) %>%
mutate(stand_component = "RG")
# 2.4. RG big summary combining all grouping variables --------------------------------------------------------
# 2.4.1. RG summary by plot, inventory, compartiment, species and  -------------------------------------------
if(exists('RG_stat_2') == TRUE && nrow(RG_stat_2) != 0){
RG_SP_ST_BCN_ha <- plyr::rbind.fill(
RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum number of trees  per sampling circuit
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct() ,
RG_stat_2 %>%
select(plot_ID, CCS_nr, plot_A_ha, inv_year, compartiment, B_t_ha, C_t_ha, N_t_ha)
) %>%
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha))%>%
mutate(stand_component = "RG")
}else{
RG_SP_ST_BCN_ha <-     RG_data %>%
left_join(., RG_plot_A_ha, by = c("plot_ID", "inv_year")) %>%
group_by(plot_ID, CCS_nr, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
# sum stocks of trees  per sampling circuit, stand, compartiment, and SP_code
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitve samplign circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
arrange(plot_ID) %>%
group_by(plot_ID, plot_A_ha, inv_year, stand, compartiment, SP_code) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "RG")
}
# 2.4.2. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
RG_summary <- plyr::rbind.fill(
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all"),
# 2.4.3. RG summary by plot and stand, without grouping by species ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "stand"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(SP_code = "all"),
# 2.4.4. RG summary by plot, inventory, compartiment, not by speci --------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv_year,stand_component, n_ha),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component")) %>%
mutate(n_ha = ifelse(is.na(n_ha), 0, n_ha),
n_SP = ifelse(is.na(n_SP), 0, n_SP),
stand = "all",
SP_code = "all")
) %>% # close rbind
distinct() %>%
arrange(plot_ID)
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. number of DW items per hectar ----------------------------------------------
n_ha_DW <- DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "DW")
# 3.2. stocks per hectar deadwood -----------------------------------------
# 3.3. DW summary per plot per SP per DW type per Dec state ---------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-X, plot_A_ha)) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
# 3.4. DW summary by plot ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DW_P <- DW_BCN_ha %>%
left_join(., n_ha_DW,
by = c("plot_ID", "inv_year", "stand_component"))
# 3.4. DW big summary including all grouping variables and combinations -------------------------
DW_summary_trial <-
plyr::rbind.fill(
# 3.4.1. grouped by species, decay type, deadwoodtype, plot, compartiment, inventory ------------------------------------------------------------------
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# 3.4.2. DW grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore --------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all"),
# 3.4.3. DW grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# 3.4.4. DW grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
decay = "all"),
# 3.4.5. DW grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
dw_type = "all"),
# 3.4.6. DW grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all"),
# 3.4.7.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all") %>%
mutate(stand_component = "DW") %>%
# join in number of DW items per ha to plot wise summary
left_join(., n_ha_DW, by = c("plot_ID", "inv_year", "stand_component"))
) %>%  # close rbind
# add stand component for those datasets where itÂ´s not included yet
mutate(stand_component = ifelse(is.na(stand_component), "DW", stand_component)) %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
LT_RG_DW_P <- rbind(
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")),
# total plot data over all stand components
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all")) %>%
arrange(plot_ID) %>%
select(-plot_A_ha)
# 4. data export ----------------------------------------------------------
write.csv2(LT_summary, paste0(out.path.BZE3, paste(LT_summary$inv[1], "LT_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(RG_summary, paste0(out.path.BZE3, paste(RG_summary$inv[1], "RG_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(DW_summary, paste0(out.path.BZE3, paste(DW_summary$inv[1], "DW_stocks_ha_all_groups", sep = "_"), ".csv"))
# 3.4. DW big summary including all grouping variables and combinations -------------------------
DW_summary <-
plyr::rbind.fill(
# 3.4.1. grouped by species, decay type, deadwoodtype, plot, compartiment, inventory ------------------------------------------------------------------
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# 3.4.2. DW grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore --------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all"),
# 3.4.3. DW grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# 3.4.4. DW grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
decay = "all"),
# 3.4.5. DW grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
dw_type = "all"),
# 3.4.6. DW grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore ---------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all"),
# 3.4.7.DW grouped by species group, plot, compartiment, inventory, not by decay, species and deadwood type anymore ----------------------------------------------------------------
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all") %>%
mutate(stand_component = "DW") %>%
# join in number of DW items per ha to plot wise summary
left_join(., n_ha_DW, by = c("plot_ID", "inv_year", "stand_component"))
) %>%  # close rbind
# add stand component for those datasets where itÂ´s not included yet
mutate(stand_component = ifelse(is.na(stand_component), "DW", stand_component)) %>%
distinct() %>%
arrange(plot_ID)
# 4. creating dataset with all stand components ---------------------------
LT_RG_DW_P <- rbind(
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")),
# total plot data over all stand components
rbind(LT_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
RG_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, compartiment, B_t_ha, C_t_ha, N_t_ha) %>% filter(compartiment %in% c("ag", "bg", "total")),
DW_P %>% select(plot_ID, inv_year, stand_component, B_t_ha, C_t_ha, N_t_ha) %>% mutate(compartiment = "total")
) %>%
arrange(plot_ID)%>%
group_by(plot_ID, inv_year, compartiment) %>%
summarise(B_t_ha = sum(B_t_ha),
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
mutate(stand_component = "all")) %>%
arrange(plot_ID) %>%
select(-plot_A_ha)
# 4. data export ----------------------------------------------------------
write.csv2(LT_summary, paste0(out.path.BZE3, paste(LT_summary$inv[1], "LT_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(RG_summary, paste0(out.path.BZE3, paste(RG_summary$inv[1], "RG_stocks_ha_all_groups", sep = "_"), ".csv"))
write.csv2(DW_summary, paste0(out.path.BZE3, paste(DW_summary$inv[1], "DW_stocks_ha_all_groups", sep = "_"), ".csv"))
LT_summary
# 5.1.1. single tree biomass compartiments by species  --------------------
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all")
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha)
# 5.1.1. single tree biomass compartiments by species  --------------------
LT_B_wide <- LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha)
total_vars <- grep("_HBI", colnames(LT_B_wide), value=TRUE)
total_vars <- grep("total", colnames(LT_B_wide), value=TRUE)
total_vars
LT_B_wide
post_vars <- grep(ag:sw, colnames(stock_changes_P), value=TRUE)
post_vars <- grep("ag":"sw", colnames(stock_changes_P), value=TRUE)
grep
colnames(LT_B_wide)[ag:sw]
colnames(LT_B_wide)["ag":"sw"]
colnames(LT_B_wide)
colnames(LT_B_wide)[5:12]
total_vars <- "total"
comp_vars <- colnames(LT_B_wide)[5:12]
LT_B_wide[, comp_vars]/LT_B_wide[, total_vars]
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
mutate(
across(c(ag:sw),
.fns = ~./total))
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
mutate(
across(c(ag:total),
.fns = ~./total))
# 5.1.1. single tree biomass compartiments by species  --------------------
LT_B_percent_SP_P <- LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
# calcualte the percentage each compartiment contributes to the total bioass of a tree of
# the respective species at the respective plot
# https://stackoverflow.com/questions/47821241/how-to-divide-a-number-of-columns-by-one-column
mutate(across(c(ag:total),.fns = ~./total*100))
# 5.1.1. single tree biomass compartiments by species  --------------------
LT_B_percent_P <- LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha)) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
# calcualte the percentage each compartiment contributes to the total bioass of a tree of
# the respective species at the respective plot
# https://stackoverflow.com/questions/47821241/how-to-divide-a-number-of-columns-by-one-column
mutate(across(c(ag:total),.fns = ~./total*100))
LT_B_percent_P
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha))
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha)) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha)
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha)) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
# calcualte the percentage each compartiment contributes to the total bioass of a tree of
# the respective species at the respective plot
# https://stackoverflow.com/questions/47821241/how-to-divide-a-number-of-columns-by-one-column
mutate(across(c(ag:total),.fns = ~./total*100))
LT_B_percent_P %>%
ggplot(., aes(x="", y=B_t_ha, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)+
facet_wrap(~SP_code)
LT_B_percent_P
LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha)) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
# calcualte the percentage each compartiment contributes to the total bioass of a tree of
# the respective species at the respective plot
# https://stackoverflow.com/questions/47821241/how-to-divide-a-number-of-columns-by-one-column
mutate(across(c(ag:total),.fns = ~./total*100)) %>%
pivot_longer(., ag:total,
names_to = "compartiment",
values_to = "B_t_ha_percent")
LT_B_percent_P %>%
filter(compartiment != "total") %>%
ggplot(., aes(x="", y=B_t_ha, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)+
facet_wrap(~SP_code)
# 5.1.1. single tree biomass compartiments by species  --------------------
LT_B_percent_P <- LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha)) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
# calcualte the percentage each compartiment contributes to the total bioass of a tree of
# the respective species at the respective plot
# https://stackoverflow.com/questions/47821241/how-to-divide-a-number-of-columns-by-one-column
mutate(across(c(ag:total),.fns = ~./total*100)) %>%
pivot_longer(., ag:total,
names_to = "compartiment",
values_to = "B_t_ha_percent")
LT_B_percent_P
LT_B_percent_P %>%
filter(compartiment != "total") %>%
ggplot(., aes(x="", y=B_t_ha, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)+
facet_wrap(~SP_code)
LT_B_percent_P %>%
filter(compartiment != "total") %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)+
facet_wrap(~SP_code)
# 5.1.1. single tree biomass compartiments by species  --------------------
LT_B_percent_SP <- LT_summary %>%
filter(SP_code != "all" &
plot_ID != "all") %>%
select(stand_component, plot_ID, inv_year, SP_code, compartiment, B_t_ha) %>%
group_by(stand_component, inv_year, SP_code, compartiment) %>%
summarise(B_t_ha = mean(B_t_ha)) %>%
pivot_wider(names_from = compartiment, values_from = B_t_ha) %>%
# calcualte the percentage each compartiment contributes to the total bioass of a tree of
# the respective species at the respective plot
# https://stackoverflow.com/questions/47821241/how-to-divide-a-number-of-columns-by-one-column
mutate(across(c(ag:total),.fns = ~./total*100)) %>%
pivot_longer(., ag:total,
names_to = "compartiment",
values_to = "B_t_ha_percent")
i = 1
# i = 1
my.sp <- unique(LT_B_percent_SP$SP_code)[i]
my.sp
LT_B_percent_P %>%
filter(compartiment != "total" & SP_code == my.sp) %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# i = 1
my.sp <- unique(LT_B_percent_SP$SP_code)[i]
print(LT_B_percent_P %>%
filter(compartiment != "total" & SP_code == my.sp) %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
ggtitle(paste(my.sp))
#+
# coord_polar("y", start=0)
)
print(LT_B_percent_P %>%
filter(compartiment != "total" & SP_code == my.sp) %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
ggtitle(paste(my.sp))+
coord_polar("y", start=0)
)
print(LT_B_percent_P %>%
filter(compartiment != "total" & SP_code == my.sp) %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
ggtitle(paste(my.sp))+
coord_polar(B_t_ha_percent, start=0)
)
print(LT_B_percent_P %>%
filter(compartiment != "total" & SP_code == my.sp) %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
ggtitle(paste(my.sp))+
coord_polar("y", start=0)+
theme_void()
)
for (i in 1:length(unique(LT_B_percent_SP$SP_code))) {
# i = 1
my.sp <- unique(LT_B_percent_SP$SP_code)[i]
print(LT_B_percent_P %>%
filter(compartiment != "total" & SP_code == my.sp) %>%
ggplot(., aes(x="", y=B_t_ha_percent, fill=compartiment)) +
geom_bar(stat="identity", width=1) +
ggtitle(paste(my.sp))+
coord_polar("y", start=0)+
theme_void()
)
}

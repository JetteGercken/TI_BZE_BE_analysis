N.ag.bg.kg.df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree")
N.total.kg.df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N.ag.bg.kg.df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N.ag.bg.kg.df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
N.total.kg.df
# 1.2.3. join Nitrogen into tree dataset -----------------------------------
# harmonize strings to bind nitrogen dataframes together
N.total.kg.df[,c(1,2, 4, 6)] <- lapply( plot_ID tree_ID[,c(1,2,4, 6)], as.numeric)
# 1.2.3. join Nitrogen into tree dataset -----------------------------------
# harmonize strings to bind nitrogen dataframes together
N.total.kg.df[,c(1,2, 4, 6)] <- lapply(N.total.kg.df[,c(1,2,4, 6)], as.numeric)
trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
N.ag.bg.kg.df[,c(1,2, 4, 6)] <- lapply(N.ag.bg.kg.df[,c(1,2,4, 6)], as.numeric)
trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
trees <- trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# 1.13. carbon stock ------------------------------------------------------
carbon <- function(B){
C <- B*0.5;
return(C)
}
# 1.3. carbon stock per tree & compartiment -------------------------------------------------------
trees <- trees %>%
mutate(C_kg_tree = carbon(B_kg_tree))
trees
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees , comp.function){
n_con_w <- N_con_w %>%  filter(compartiment != "ndl") %>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
switch(
comp.function,
f = as.numeric(B)*as.numeric(n_con_f)[N_spec_f_BZE],
ag.not.foliage =  as.numeric(B)*as.numeric(n_con_w)[SP_compart_Rumpf],
bg = as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen])
)
}
N_all_com
N_con_w
N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees , comp.function){
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
switch(
comp.function,
f = as.numeric(B)*as.numeric(n_con_f)[N_spec_f_BZE],
ag.not.foliage =  as.numeric(B)*as.numeric(n_con_w)[SP_compart_Rumpf],
bg = as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen])
)
}
trees[1:500] %>% mutate(
N_kg_test = case_when(
compartiment == "ndl" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "f"),
compartiment == "bg" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "bg"),
!(compartiment %in% ("ag, total, ndl, bg")) ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "ag.not.foliage"),
TRUE ~ 0)
)
trees[1:500,] %>% mutate(
N_kg_test = case_when(
compartiment == "ndl" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "f"),
compartiment == "bg" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "bg"),
!(compartiment %in% ("ag, total, ndl, bg")) ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "ag.not.foliage"),
TRUE ~ 0)
)
N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
as.numeric(n_con_f[N_spec_f_BZE])
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees , comp.function){
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
switch(
comp.function,
f = as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]),
ag.not.foliage =  as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
bg = as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen])
)
}
trees[1:500,] %>% mutate(
N_kg_test = case_when(
compartiment == "ndl" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "f"),
compartiment == "bg" ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "bg"),
!(compartiment %in% ("ag, total, ndl, bg")) ~ N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment , comp.function = "ag.not.foliage"),
TRUE ~ 0)
)
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees){
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
N <- case_when(
compartiment == "ndl" ~ as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]),
compartiment == "bg" ~ as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen]),
!(compartiment %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
return(N)
# switch(
#   comp.function,
#   f = as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]),
#   ag.not.foliage =  as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
#   bg = as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen])
# )
#
}
# ----- 1.12. Nitrogen stock  --------------------------------------------
# nitrogen stock for woody compartiments
N_all_com <- function(B, N_spec_w_rumpf, N_spec_f_BZE, N_spec_bg_Jacobsen, comp.trees){
n_con_w <- N_con_w  %>%  filter(compartiment != "ndl") %>% unite("SP_com", SP_BWI:compartiment, remove = FALSE)%>% dplyr::pull(N_con, SP_com);
n_con_f <- N_con_f %>% dplyr::pull(N_con, N_f_SP_group_MoMoK)
# this function may have to be be adapted to the new dataset of the NSI which provides accurate N cocntents for all species and foliage
# proably I will also have to assign new species groups to acces the foliage dataset correctly
n_con_bg <- c(EI = 3.71, BU = 3.03, FI = 4.14, KI = 1.77, KIN = 1.76, BI = 3.7, LA = 2.8)/1000;# divide concentration in mg per g by 1000 to get concentration in percent/ decimal number of percent
# unite the compartiment and species to select the correct nitrogen content
SP_compart_Rumpf <- paste0(N_spec_w_rumpf, "_", comp.trees);
N <- case_when(
comp.trees == "ndl" ~ as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]),
comp.trees == "bg" ~ as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen]),
!(comp.trees %in% ("ag, total, ndl, bg")) ~ as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
TRUE ~ NA)
return(N)
# switch(
#   comp.function,
#   f = as.numeric(B)*as.numeric(n_con_f[N_spec_f_BZE]),
#   ag.not.foliage =  as.numeric(B)*as.numeric(n_con_w[SP_compart_Rumpf]),
#   bg = as.numeric(B)*as.numeric(n_con_bg[N_spec_bg_Jacobsen])
# )
#
}
trees[1:500,] %>% mutate(N_kg_test = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment))
trees[1:500,] %>% mutate(N_kg_test.2 = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment))
trees %>% mutate(N_kg_test.2 = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment))
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N.ag.bg.kg.df <- trees %>%
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree)
N.total.kg.df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N.ag.bg.kg.df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N.ag.bg.kg.df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
N.total.kg.df
N.ag.bg.kg.df
# 1.2. Nitrogen calculation -----------------------------------------------
# 1.2.1. Nitrogen stock in abofeground and belowgroung compartiments-----------------------------------------------
N.ag.bg.kg.df <- trees %>%
mutate(N_kg_tree = N_all_com(B_kg_tree, N_SP_group, N_f_SP_group_MoMoK, N_bg_SP_group, compartiment)) %>%
select(plot_ID, tree_ID, inv, inv_year, compartiment, N_kg_tree) %>%
filter(!(compartiment %in% c("ag", "total")))
N.total.kg.df <-
rbind(
# calculate total biomass (aboveground + belowground) by summing up biomass in kg per tree in all compartiments
N.ag.bg.kg.df %>%
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "total") %>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"),
# calculate total aboveground biomass by summing up biomass in kg per tree in all aboveground compartiments
N.ag.bg.kg.df%>%
filter(compartiment != "bg") %>%  # select only aboveground compartiments
group_by(plot_ID, tree_ID, inv, inv_year) %>%
summarize(N_kg_tree = sum(as.numeric(N_kg_tree))) %>%
mutate(compartiment = "ag")%>%
select("plot_ID", "tree_ID", "inv",
"inv_year", "compartiment", "N_kg_tree"))
N.total.kg.df
N.ag.bg.kg.df
trees <- trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
trees
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset: this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we should actually import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to
# tree data
trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_3.csv"), sep = ",", dec = ",")
trees <- trees %>% mutate(H_m = as.numeric(H_m))
trees <- trees %>% left_join(.,
rbind(bio.ag.kg.df ,
bio.bg.kg.df,
bio.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year"),
multiple = "all")
trees <- trees %>% left_join(.,
rbind(N.ag.bg.kg.df ,
N.total.kg.df),
by = c("plot_ID", "tree_ID", "inv", "inv_year", "compartiment"),
multiple = "all")
# data export ---------------------------------------------------------------------------------------------
colnames(trees)
# data export ---------------------------------------------------------------------------------------------
as.list(colnames(trees))
# 1.3. carbon stock per tree & compartiment -------------------------------------------------------
trees <- trees %>%
mutate(C_kg_tree = carbon(B_kg_tree))
# data export ---------------------------------------------------------------------------------------------
HBI_trees_update_4 <- trees %>% select(- c("Chr_code_ger", "H_SP_group","BWI_SP_group" , "Bio_SP_group",
"N_SP_group", "N_bg_SP_group", "N_f_SP_group_MoMoK"))
HBI_trees_update_4
# HBI dataset including estimated heights
write.csv(HBI_trees_update_4, paste0(out.path.BZE3, paste(unique(HBI_trees_update_4$inv)[1], "trees_update_4", sep = "_"), ".csv"))
HBI_trees_update_2
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset:
# this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to the original tree data
#HBI_trees <- read.delim(file = here("data/input/BZE2_HBI/beab.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
HBI_trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_2.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
HBI_trees
View(HBI_trees)
DBH_BWI
coeff_H_SP_P
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the the national soil inventory
# estimating missing tree heights based on sampled height and diameter pairs
# via nls per plot and species or just species and via SLOBODA and CURTIS
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# LIVING TREES
# hbi BE dataset:
# this dataset contains the inventory data of the tree inventory accompanying the second national soil inventory
# here we import a dataset called "HBI_trees_update_2.csv" which contains plot area and stand data additionally to the original tree data
#HBI_trees <- read.delim(file = here("data/input/BZE2_HBI/beab.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
HBI_trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_trees_update_2.csv"), sep = ",", dec = ",", stringsAsFactors=FALSE)
# stand info od individual trees
stand_info_HBI_trees <-  read.delim(file = here("output/out_data/out_data_BZE/HBI_all_trees_stand.csv"), sep = ",", dec = ",")
plot_areas_HBI <- read.delim(file = here("output/out_data/out_data_BZE/HBI_all_edges_rem_circles_area.csv"), sep = ",", dec = ".", stringsAsFactors=FALSE)
# species names & codes
SP_names_com_ID_tapeS <- read.delim(file = here("output/out_data/x_bart_tapeS.csv"), sep = ",", dec = ",")
# ----- 0.6 harmonising column names & structure  -----------------------------------------------------------------
# harmonize strings of plot_area_HBI
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
plot_areas_HBI[,c(1,2, 3, 4)] <- lapply(plot_areas_HBI[,c(1,2, 3, 4)], as.numeric)
HBI_trees[,c("plot_A_ha", "area_m2", "X_tree",  "Y_tree",
"DBH_cm", "dist_m","CCS_r_m")] <- lapply(HBI_trees[,c("plot_A_ha", "area_m2", "X_tree",  "Y_tree",
"DBH_cm", "dist_m",  "CCS_r_m")], as.numeric)
# change -2 in H_dm and C_h_dm to NA
# https://stackoverflow.com/questions/14737773/replacing-occurrences-of-a-number-in-multiple-columns-of-data-frame-with-another
HBI_trees[,c("H_dm","C_h_dm")][HBI_trees[,c("H_dm","C_h_dm")]== -2] <- NA
# 1. joining in external info  -------------------------------------------------
trees_total <- HBI_trees %>%
# add inventory info -----------------------------------------------------
mutate(#inv_year = 2012, # this shoukd not be necesarry cause it´s included in the data already as they come from  update 2
inv = inv_name(inv_year)) %>%
# !!!!!! # CAUTION: here we would actually rbind the both inventory datasets together ####!!!!!!###
# join in species codes --------------------------------------------------
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase")) %>%
# calcualte diameter and change units -----------------------------------
mutate(H_m = H_dm/10,
DBH_h_cm = ifelse(is.na(DBH_h_cm), 130, DBH_h_cm),        # assign DBH measuring height of 130cm when missing
DBH_h_m = DBH_h_cm/100) %>%                               # change unit of DBH measuring height from cm into m by dividing by 100
#  apply regression of BWI (5.5.1.2.) for DBH estimation when mesasuring height differs from 1.3 m
mutate(DBH_cm = ifelse(DBH_h_cm == 130, D_mm/10, DBH_BWI(D_mm, DBH_h_cm)),
DBH_class = ifelse(is.na(DBH_class), DBH_c_function(DBH_cm), DBH_class),
BA_m2 = c_A(DBH_cm/2)*0.0001) #%>% # *0.0001 to convert cm2 in m2
# check if there are no trees left that don´t have a SP_code in xBart/ SP_names_com_ID_tapeS
SP_NAs <- HBI_trees %>%
anti_join(SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
if(nrow(SP_NAs_HBI) != 0){print("There are species names or codes in the trees dataset that do not match
the species names and codes listed in x_bart")}else{"all fine"}
# 2. estimating tree height -----------------------------------------------
# 2.1. fitting own models H_m ~ nls(DBH_cm) -------------------------------
# 2.1.1. non linear height model h ~ DBH per species and plot ----------------------------
# to calculate individual tree heights for trees of the samme species and plot
# where the height has not been sampled we create a non-linear regression for the heights
# in the following a dataframe with regression coefficients per
# species per plot is created if there are more then 3 heights measured per species and plot
# coefficents of non-linear height model per species and plot
# https://rdrr.io/cran/forestmangr/f/vignettes/eq_group_fit_en.Rmd
coeff_H_SP_P <- left_join(
# select variables needed for modeling
trees_total %>% select(plot_ID, SP_code, H_m, DBH_cm, DBH_class) %>%
# filter for measured heights that also the necessary info about the diameter and measuring height of diameter
filter(!is.na(H_m) & !is.na(DBH_cm) & !is.na(DBH_class)) %>%
group_by(plot_ID, SP_code) %>%
# filter for plots that have at least 3 heights measured per species
filter(n() >= 3),
# creaing & joining in coeff_H_SP_P dataset
trees_total %>%
select(plot_ID, SP_code, H_m, DBH_cm, DBH_class) %>%
filter(!is.na(H_m) & !is.na(DBH_cm) & !is.na(DBH_class) ) %>%
#filter(DBH_cm <= 150) %>%
group_by(plot_ID, SP_code) %>%
# filter for plots where there is at least 3 heights measured for each species
#https://stackoverflow.com/questions/20204257/subset-data-frame-based-on-number-of-rows-per-group
filter(n() >= 3)%>%
group_by(plot_ID, SP_code) %>%
nls_table( H_m ~ b0 * (1 - exp( -b1 * DBH_cm))^b2,
mod_start = c(b0=23, b1=0.03, b2 =1.3),
output = "table") %>%
arrange(plot_ID, SP_code),
by = c("plot_ID", "SP_code"))%>%
# mutating statistical precictors
mutate(H_est = b0 * (1 - exp( -b1 * DBH_cm))^b2) %>%
group_by(plot_ID, SP_code) %>%
summarise( b0 = mean(b0),
b1 = mean(b1),
b2 = mean(b2),
#https://rdrr.io/cran/forestmangr/f/vignettes/eq_group_fit_en.Rmd
bias = bias_per(y = H_m, yhat = H_est),
rsme = rmse_per(y = H_m, yhat = H_est),
#https://stackoverflow.com/questions/14530770/calculating-r2-for-a-nonlinear-least-squares-fit
R2 = max(cor(H_m, H_est),0)^2,
#https://stats.stackexchange.com/questions/11676/pseudo-r-squared-formula-for-glms
mean_h = mean(H_m),
#N = length(H_m),
SSres = sum((H_m-H_est)^2),
SStot = sum((H_m-mean_h)^2),
pseu_R2 = 1-(SSres/SStot),
diff_h = mean(H_m - H_est))
# 2.1.2. non linear height model h ~ DBH per species over all plots ----------------------------
# coefficents of non-linear height model per species but over all plots:
# https://rdrr.io/cran/forestmangr/f/vignettes/eq_group_fit_en.Rmd
#  building separate dataframe for speicies soecific models adding adding bias, rmse and rsqrd
coeff_H_SP <- left_join(trees_total %>%
select(SP_code, H_m, DBH_cm, DBH_class) %>%
filter(!is.na(H_m) & !is.na(DBH_cm) & !is.na(DBH_class)) %>%
group_by(SP_code) %>%
filter(n() >= 3),
trees_total %>%
select(SP_code, H_m, DBH_cm, DBH_class) %>%
filter(!is.na(H_m) & !is.na(DBH_cm) & !is.na(DBH_class) ) %>%
#filter(DBH_cm <= 150) %>%
group_by(SP_code) %>%
# filter for plots where there is at least 3 heights measured for each species
#https://stackoverflow.com/questions/20204257/subset-data-frame-based-on-number-of-rows-per-group
filter(n() >= 3)%>%
group_by(SP_code) %>%
nls_table( H_m ~ b0 * (1 - exp( -b1 * DBH_cm))^b2,
mod_start = c(b0=23, b1=0.03, b2 =1.3),
output = "table"),
by = c("SP_code"))%>%
mutate(H_est = b0 * (1 - exp( -b1 * DBH_cm))^b2) %>%
group_by(SP_code) %>%
summarise( b0 = mean(b0),
b1 = mean(b1),
b2 = mean(b2),
#https://rdrr.io/cran/forestmangr/f/vignettes/eq_group_fit_en.Rmd
bias = bias_per(y = H_m, yhat = H_est),
rsme = rmse_per(y = H_m, yhat = H_est),
#https://stackoverflow.com/questions/14530770/calculating-r2-for-a-nonlinear-least-squares-fit
R2 = max(cor(H_m, H_est),0)^2,
#https://stats.stackexchange.com/questions/11676/pseudo-r-squared-formula-for-glms
mean_h = mean(H_m),
#N = length(H_m),
SSres = sum((H_m-H_est)^2),
SStot = sum((H_m-mean_h)^2),
pseu_R2 = 1-(SSres/SStot),
diff_h = mean(H_m - H_est)) %>%
mutate(plot_ID = as.factor('all')) %>%
select(plot_ID, SP_code, b0, b1, b2, bias, rsme, R2, mean_h, SSres, SStot, pseu_R2, diff_h)
# 2.1.3 combined coefficients of height models ---------------------
coeff_H_comb <- rbind(coeff_H_SP_P %>% mutate(plot_ID = as.factor(plot_ID)), coeff_H_SP)
#calcualte the height and diameter of a stem reprensenting the mean basal area
# this is creates a tree dataset with mean BHD, d_g, h_g per species per plot per canopy layer which we need for SLOBODA
Hg_Dg_trees_total.df <- trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m))) %>%      # calculate mean height per sampling circuit and species and C layer and plot
group_by(inv, plot_ID, stand, C_layer, SP_code )%>%            # group by plot and species,  canopy layer and sampling circuit to calcualte dg, hg
summarize(no_trees_ha = sum(no_trees_CC_ha),                                # calculate number of trees per plot
BA_m2_ha = sum(BA_CC_m2_ha),               # calculate sum of BA across all sampling circuit to account for represnation of different trees in the sampling circuits
mean_DBH_mm = mean(mean_DBH_mm_CC),        # calculate mean of DBH across all sampling circuit to account for represnation of different trees in the sampling circuits
mean_H_m = mean(mean_H_m_CC),              # calculate mean of height across all sampling circuit to account for represnation of different trees in the sampling circuits
mean_BA_m2_tree = BA_m2_ha/no_trees_ha,
H_g = sum(mean(na.omit(mean_H_m))*BA_m2_ha)/sum(BA_m2_ha),    # Hoehe des Grundflächemittelstammes, calculation according to S. Schnell
mean_DBH_mm = mean(mean_DBH_mm),                           # mean diameter per species per canopy layer per plot
D_g = ((sqrt((mean_BA_m2_tree/pi)))*2)*100)              #  Durchmesser des Grundflächenmittelstammes; *100 to get from 1m -> 100cm
Hg_Dg_trees_total.df
trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m)))
trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m))) %>%      # calculate mean height per sampling circuit and species and C layer and plot
group_by(inv, plot_ID, stand, C_layer, SP_code )
trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m))) %>%      # calculate mean height per sampling circuit and species and C layer and plot
group_by(inv, plot_ID, stand, C_layer, SP_code )%>%            # group by plot and species,  canopy layer and sampling circuit to calcualte dg, hg
summarize(no_trees_ha = sum(no_trees_CC_ha))
trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m)))
view(trees_total %>%
group_by(inv, plot_ID, stand, C_layer, SP_code, CCS_r_m) %>%    # group by plot and species, canopy layer and sampling circuit to calcualte all paremeters needed
summarise(no_trees_CC = n(),
BA_CC = sum(BA_m2),                        # sum up basal  area per sampling circuit to then reffer it to the hektar value of the respective circuit
CC_A_ha = mean(plot_A_ha),                   # mean area in ha per sampling circuit
BA_CC_m2_ha = BA_CC/CC_A_ha,               # calculating the BA hectare value of each tree species per c layer to account for the different sampling circuits
no_trees_CC_ha = no_trees_CC/CC_A_ha,
mean_DBH_mm_CC = mean(DBH_cm*10),          # calculate mean DBH per sampling circuit and species and C layer and plot
mean_H_m_CC = mean(na.omit(H_m))) )

#sf::st_crs(my.rg.ccs.poly) <- my.utm.epsg
# create polygone of sampling circle
circle.17 <- sf::st_buffer(
sf::st_as_sf(as.data.frame(cbind("lon" = c.x0,
"lat" = c.y0)),
coords = c("lon", "lat")), # center point df
c.r3)                                   # radius of outer 17.84 circle
# assing CRS to circle
#sf::st_crs(circle.17) <- my.utm.epsg
circle.17$stand <- unique(all_rem_circles_coords$stand[all_rem_circles_coords$plot_ID == my.plot.id])
circle.17$plot_ID <- my.plot.id
circle.17$e_ID <- 0
circle.17$e_form <- 0
circle.17$CCS_r_m <- c.r3
# create polygone of edge 1 triangle
edge.poly.1 <- sfheaders::sf_polygon(obj = all_edge_intersections_coords %>% filter(plot_ID == my.plot.id & e_ID == my.e.id.1)
, x = "X"
, y = "Y"
, keep = TRUE)
# create polygone of edge 2 triangle
edge.poly.2 <- sfheaders::sf_polygon(obj = all_edge_intersections_coords %>% filter(plot_ID == my.plot.id & e_ID == my.e.id.2)
, x = "X"
, y = "Y"
, keep = TRUE)
## create polygon of remaining circle after circle-edge.1 intersection
circle.edge.1.inter <- sf::st_intersection(circle.17, edge.poly.1)
# if there is no intersection between the edge and the cirlce,
if(isTRUE(nrow(circle.edge.1.inter) == 0)){
# the whole circle polygon is set as the remaining circle
rem.circle.17.1 <- circle.17}else{
# else the remaining area/ polyon after the inersection is deducted is passed on as remaining circle
rem.circle.17.1 <- sf::st_difference(circle.17, st_geometry(circle.edge.1.inter))
}
## create polygon of remaining circle after circle-edge.2 intersection
circle.edge.2.inter <- sf::st_intersection(rem.circle.17.1, edge.poly.2)
# if there is no intersection between the edge and the cirlce,
if(isTRUE(nrow(circle.edge.2.inter) == 0)){
# the previous remaining circle polygon is set as the remaining circle
rem.circle.17.2 <- rem.circle.17.1}else{
# else the remaining area/ polyon after the inersection is deducted is passed on as remaining circle
rem.circle.17.2 <- sf::st_difference(rem.circle.17.1, st_geometry(circle.edge.2.inter))
}
## check for intersections
# with edge-intersection-polygon
intersection.with.edge.1 <- sf::st_intersection(my.rg.ccs.poly, edge.poly.1)
intersection.with.edge.2 <- sf::st_intersection(my.rg.ccs.poly, edge.poly.2)
# with remaining circle polygon
intersection.with.rem.circle <- sf::st_intersection(my.rg.ccs.poly, rem.circle.17.2)
## set the stand of the rg circle according to its intersections: https://www.geeksforgeeks.org/nested-if-else-statement-in-r/
my.stand.rg <- list(c(intersection.with.rem.circle$stand, intersection.with.edge.1$stand, intersection.with.edge.2$stand))
## determine area of the rg circle (stands) according to it´s intersection
my.rg.A.m2 <-  list(c(st_area(intersection.with.rem.circle), st_area(intersection.with.edge.1), st_area(intersection.with.edge.2)))
## safe intersection info (stand and area) of the RG CCS into dataframe
rg.edge.data <- as.data.frame(cbind(
"plot_ID" = c(rep(my.plot.id, times = length(unlist(my.stand.rg)))),
"CCS_nr" = c(rep(my.ccs.id, times = length(unlist(my.stand.rg)))),
"stand" =  c(unlist(my.stand.rg)),
"area_m2"= c(unlist(my.rg.A.m2))
))
## assign the whole CCS area to the stand that covers 2/3rds of the RG CCS area
# determine 2/3 of the RG CCS area
rg.ccs.A.0.6 <- sf::st_area(my.rg.ccs.poly)*(2/3)
# select the row that includes the stand that covers 2/3 of the RG CCS area,
# by filtering the area fot bigger/ equal 2/3 of the total RG CCS area
rg.0.6.data <- (rg.edge.data[rg.edge.data$area_m2 >= rg.ccs.A.0.6, ] %>% arrange(., desc(area_m2)))[1,]
# as we cannot localise the plants in the cirlce, we cannot adjust the refference area (Bezugsfläche) according to the are covered by the respective stand
# thus the whole are of the RG CCS is allocated to the stand that covers most of it´s area, as all plants included in the respective RG CCS are also allocated to this stand
# since we cannot sort them into stands by location as we don´t know their location
if(isTRUE(nrow(rg.0.6.data)== 0)){
rg.edge.data[1,]$stand <- NA
rg.edge.data$area_m2  <- sf::st_area(my.rg.ccs.poly)
}else{
rg.edge.data <- rg.0.6.data
rg.edge.data$area_m2  <- sf::st_area(my.rg.ccs.poly)
}
## put dataframe in export list
RG.CCS.two.edges[[i]] <- rg.edge.data
#print(my.plot.id)
print(ggplot() +
geom_sf(data = rem.circle.17.2, aes(colour = stand),fill = NA)+
geom_sf(data = edge.poly.1, aes(colour = stand), fill = NA)+
geom_sf(data = edge.poly.2, aes(colour = stand), fill = NA)+
geom_sf(data = my.rg.ccs.poly, colour = "black", fill = NA)+
ggtitle(my.plot.id, my.ccs.id)
)
}
# bind areas and stands in one dataframe with plot_ID, CCS_nr to join stand & area info into HBI_RG dataset later
RG.two.edges.stands.areas <- as.data.frame(rbindlist(RG.CCS.one.edge))
HBI_RG_update_1$inv
HBI_RG_loc$inv
# HBI_RG update
HBI_RG_update_1 <- HBI_RG$inv %>% left_join(., RG_all_edges_stands_areas, by = c("plot_ID", c("CCS_no" = "CCS_nr")), multiple = "all")
HBI_RG$inv
## joining stand and area info into RG datasets
# join stand and area data into dataset with regeneration CCS locations and size
# details (HBI_RG_loc) as well as into regeneration individual plant info dataset (HBI_RG)
# HBI_RG_loc update
HBI_RG_loc_update_1 <- HBI_RG_loc %>% left_join(.,RG_all_edges_stands_areas, by = c("plot_ID", "CCS_nr"), multiple = "all")
HBI_RG_loc_update_1$inv
HBI_RG_update_1$inv
# HBI_RG update
HBI_RG_update_1 <- HBI_RG %>% left_join(., RG_all_edges_stands_areas, by = c("plot_ID", c("CCS_no" = "CCS_nr")), multiple = "all")
HBI_RG_update_1$inv
# 3.2. export  ------------------------------------------------------------
write.csv2(HBI_RG_loc_update_1, paste0(out.path.BZE3, paste(unique(HBI_RG_update_1$inv)[1], "RG_loc_update_1", sep = "_"), ".csv"))
write.csv2(HBI_RG_update_1, paste0(out.path.BZE3, paste(unique(HBI_RG_update_1$inv)[1], "RG_update_1", sep = "_"), ".csv"))
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2)
HBI_RG <- read.delim(file = here(paste0(out.path.BZE3, "_HBI_RG_update_1.csv")), sep = ",", dec = ",") %>% mutate(inv_year = 2012)
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2)
HBI_RG <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_update_1.csv")), sep = ",", dec = ",") %>% mutate(inv_year = 2012)
HBI_RG
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2)
HBI_RG <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_update_1.csv")), sep = ";", dec = ",") %>% mutate(inv_year = 2012)
HBI_RG
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_update_1.csv")), sep = ";", dec = ",") %>% mutate(inv_year = 2012)
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here("data/input/BZE2_HBI/bebj.csv"), sep = ",", dec = ",")%>% mutate(inv_year = 2012,
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here("data/input/BZE2_HBI/bebj.csv"), sep = ",", dec = ",")%>% mutate(inv_year = 2012, inv = inv_name(inv_year))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here("data/input/BZE2_HBI/bebj.csv"), sep = ",", dec = ",")%>% mutate(inv_year = 2012, inv = inv_name(inv_year))
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here("data/input/BZE2_HBI/bejb.csv"), sep = ",", dec = ",")%>% mutate(inv_year = 2012, inv = inv_name(inv_year))
# this dataset contains the position and extend of the sampling circle satelites of the regeneration inventory of the HBI (BZE2) including stand and area info
HBI_RG_loc <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_loc_update_1.csv")), sep = ",", dec = ",")
HBI_RG
# ----- 1.3 dbh to size class ----------------------------------------------------------
# defining regernation size class
sizeclass_to_d <- function(size.class){
d.cm = case_when(size.class == 0 ~ 0,
size.class == 1 ~ (4.9+0)/2,
size.class == 2 ~ (5.9+5)/2,
TRUE ~ (6.9+6)/2);
return(d.cm)
}
# translate size class into diameter
HBI_RG %>% mutate(
D_cm = sizeclass_to_d(grklasse))
#  "bund_nr"  "pk_nr"  "lfd_nr"   "bart"  "hoehe"    "grklasse"
colnames(HBI_RG) <- c("plot_ID", "CCS_no", "t_ID", "SP_code", "H_cm", "D_class_cm", "inv_year", "inv")
# translate size class into diameter
HBI_RG %>% mutate(
D_cm = sizeclass_to_d(D_class_cm))
# translate size class into diameter
HBI_RG <- HBI_RG %>% mutate(
D_cm = sizeclass_to_d(D_class_cm))
# 1.1. size class to diameter ---------------------------------------------
# translate size class into diameter
HBI_RG <- HBI_RG %>% mutate(
D_cm = sizeclass_to_d(D_class_cm),
H_m = H_cm/100)
HBI_RG[, HBI_RG$H_m > 1.3]
HBI_RG[HBI_RG$H_m > 1.3, ]
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them
# to be processed in TapeS
HBI.RG.above.1.3 <- HBI_RG[HBI_RG$H_m > 1.3, ]
nrow(HBI.RG.above.1.3)
# create output list
bio.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
nrow(unique(HBI.RG.above.1.3[, c("plot_ID", "t_ID")]))
nrow(HBI.RG.above.1.3)
HBI.RG.above.1.3
i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.plot.id
# 0.4.3. import species names dataest x_bart ------------------------------
# species names & codes
SP_names_com_ID_tapeS <- read.delim(file = here("output/out_data/x_bart_tapeS.csv"), sep = ",", dec = ",")
# 1.1. size class to diameter ---------------------------------------------
# translate size class into diameter
HBI_RG <- HBI_RG %>%
mutate(
D_cm = sizeclass_to_d(D_class_cm),
H_m = H_cm/100) %>%
# join in species names and codes from x_bart
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.tree.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.tree.id
my.tree.id <- HBI.RG.above.1.3[,"t_ID"][i]
my.tree.id
BL.or.CF <- unique(HBI.RG.above.1.3$HBI.RG.above.1.3[trees$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id])
BL.or.CF
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
HBI.RG.above.1.3 <- HBI_RG[HBI_RG$H_m > 1.3, ]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[trees$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id])
BL.or.CF
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id]))
spp
HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id]
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.tree.id <- HBI.RG.above.1.3[,"t_ID"][i]
my.tree.id
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id])
BL.or.CF
HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
spp
Dm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$DBH_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))))
Hm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$DBH_h_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])/100)))
Ht = na.omit(as.numeric(unique(trees$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
Dm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$DBH_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))))
Hm = na.omit(as.list(as.numeric(1.3)))
Ht = na.omit(as.numeric(unique(trees$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
spp
Dm
Dm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))))
Dm
Hm = na.omit(as.list(as.numeric(1.3)))
Hm
Hm = na.omit(as.list(as.numeric(1.3)))
Ht = na.omit(as.numeric(unique(trees$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
Ht
Ht = na.omit(as.numeric(unique(HBI.RG.above.1.3$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
Ht
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
obj.trees
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(HBI.RG.above.1.3$plot_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"t_ID" = c(as.integer(HBI.RG.above.1.3$t_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"inv" = c(HBI.RG.above.1.3$inv[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"inv_year" = c(as.integer(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"LH_NH" = c(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.info.df
# create output list
bio.ag.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
HBI.RG.above.1.3 <- HBI_RG[HBI_RG$H_m > 1.3, ]
# create output list
bio.ag.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
for (i in 1:nrow(HBI.RG.above.1.3)) {
# i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"t_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
Dm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))))
Hm = na.omit(as.list(as.numeric(1.3)))
Ht = na.omit(as.numeric(unique(HBI.RG.above.1.3$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$t_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(HBI.RG.above.1.3$plot_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"t_ID" = c(as.integer(HBI.RG.above.1.3$t_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"inv" = c(HBI.RG.above.1.3$inv[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"inv_year" = c(as.integer(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"LH_NH" = c(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$t_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.RG.above.1.3[[i]] <- bio.info.df
}
bio.ag.kg.RG.above.1.3.df <- as.data.frame(rbindlist(bio.ag.kg.RG.above.1.3))
bio.ag.kg.RG.above.1.3.df
nrow(HBI.RG.above.1.3)
i = 1
# basic tree info
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
# basic tree info
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the  national soil inventory
# stock calculations for regeneration
# working hours: out 14:30, in: 14:45, out: 17:00
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# ----- 0.3 data import --------------------------------------------------------
# regeneration
# this dataset contains the plant specific inventory data of the regenertaion inventory of the HBI (BZE2), including stand and area info
HBI_RG <- read.delim(file = here("data/input/BZE2_HBI/bejb.csv"), sep = ",", dec = ",")%>% mutate(inv_year = 2012, inv = inv_name(inv_year))
#  "bund_nr"  "pk_nr"  "lfd_nr"   "bart"  "hoehe"    "grklasse"
colnames(HBI_RG) <- c("plot_ID", "CCS_no", "tree_ID", "SP_code", "H_cm", "D_class_cm", "inv_year", "inv")
# this dataset contains the position and extend of the sampling circle satelites of the regeneration inventory of the HBI (BZE2) including stand and area info
HBI_RG_loc <- read.delim(file = here(paste0(out.path.BZE3, "HBI_RG_loc_update_1.csv")), sep = ",", dec = ",")
# 1. calculations ---------------------------------------------------------
# 1.1. size class to diameter ---------------------------------------------
# translate size class into diameter
HBI_RG <- HBI_RG %>%
mutate(
D_cm = sizeclass_to_d(D_class_cm),
H_m = H_cm/100) %>%
# join in species names and codes from x_bart
left_join(., SP_names_com_ID_tapeS %>%
mutate(char_code_ger_lowcase = tolower(Chr_code_ger)),
by = c("SP_code" = "char_code_ger_lowcase"))
# 1.2 biomass -------------------------------------------------------------
# 1.2.1. biomass for RG trees height > 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
HBI.RG.above.1.3 <- HBI_RG[HBI_RG$H_m > 1.3, ]
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
# create output list
bio.ag.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
for (i in 1:nrow(HBI.RG.above.1.3)) {
# i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
# select variales for tree object: tapes species, diameter, diameter measuring height, tree height
spp = na.omit(unique(HBI.RG.above.1.3$tpS_ID[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
Dm = na.omit(as.list(as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))))
Hm = na.omit(as.list(as.numeric(1.3)))
Ht = na.omit(as.numeric(unique(HBI.RG.above.1.3$H_m[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])))
# create tapes compartiments
comp <- as.character(c("stw","stb","sw", "sb", "fwb", "ndl" ))
# create object
obj.trees <- tprTrees(spp, Dm, Hm, Ht, inv = 4)
# calculate biomass per compartiment
bio.df <- as.data.frame(tprBiomass(obj = obj.trees, component = comp)) %>%
pivot_longer(cols = stw:ndl,
names_to = "compartiment",
values_to = "B_kg_tree")
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(HBI.RG.above.1.3$plot_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"tree_ID" = c(as.integer(HBI.RG.above.1.3$tree_ID[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"inv" = c(HBI.RG.above.1.3$inv[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"inv_year" = c(as.integer(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])),
"LH_NH" = c(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID == my.plot.id & HBI.RG.above.1.3$tree_ID == my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]),
"compartiment" = c(bio.df$compartiment),
"B_kg_tree" = c(as.numeric(bio.df$B_kg_tree))
) ) %>%
# if the tree is a broadleafed tree Tapes cannot calculate the foliage mass,
# thus we calculate this subsequently trough the biomass function by Wutzler (2008)
mutate(B_kg_tree = ifelse(compartiment == "ndl" & LH_NH == "LB",
Wutzler_fB_L1(as.numeric(Dm), as.numeric(Ht)),
B_kg_tree)) %>%
dplyr::select(-c("LH_NH"))
bio.ag.kg.RG.above.1.3[[i]] <- bio.info.df
}
bio.ag.kg.RG.above.1.3.df <- as.data.frame(rbindlist(bio.ag.kg.RG.above.1.3))
bio.ag.kg.RG.above.1.3.df
# basic tree info
# basic tree info
# select one tree ID and plot ID for each individual tree per plot through unique(trees[, c("plot_ID", "tree_ID")])
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
BL.or.CF
# select variales for belowground functions
spp = unique(HBI.RG.above.1.3$Bio_SP_group[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
spp
dbh.cm = as.numeric(unique(HBI.RG.above.1.3$DBH_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
dbh.cm
dbh.cm = as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
dbh.cm
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
B_kg_tree
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(HBI.RG.above.1.3$inv[trees$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.info.df
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
bio.bg.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
for (i in 1:nrow(nrow(HBI.RG.above.1.3))) {
# i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
# select variales for belowground functions
spp = unique(HBI.RG.above.1.3$Bio_SP_group[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
dbh.cm = as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(HBI.RG.above.1.3$inv[trees$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.RG.above.1.3[[i]] <- bio.info.df
}
# 1.2.1.1. aboveground biomass for RG trees height > 1.3m -------------------------------
bio.bg.kg.RG.above.1.3 <- vector("list", length = nrow(HBI.RG.above.1.3))
for (i in 1:nrow(HBI.RG.above.1.3)) {
# i = 1
# basic tree info
# select one tree ID and plot ID for each individual tree per plot and sampling circuit
my.plot.id <- HBI.RG.above.1.3[,"plot_ID"][i]
my.ccs.id <- HBI.RG.above.1.3[,"CCS_no"][i]
my.tree.id <- HBI.RG.above.1.3[,"tree_ID"][i]
BL.or.CF <- unique(HBI.RG.above.1.3$LH_NH[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
# select variales for belowground functions
spp = unique(HBI.RG.above.1.3$Bio_SP_group[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id])
dbh.cm = as.numeric(unique(HBI.RG.above.1.3$D_cm[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id & HBI.RG.above.1.3$CCS_no==my.ccs.id]))
# calculate biomass per compartiment
B_kg_tree <- as.data.frame(GHGI_bB(spp, dbh.cm))[,1]
bio.info.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv" = unique(HBI.RG.above.1.3$inv[trees$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]),
"inv_year" = c(as.integer(unique(HBI.RG.above.1.3$inv_year[HBI.RG.above.1.3$plot_ID==my.plot.id & HBI.RG.above.1.3$tree_ID==my.tree.id]))),
"compartiment" = c("bg"),
"B_kg_tree" = c(as.numeric(B_kg_tree))
) )
bio.bg.kg.RG.above.1.3[[i]] <- bio.info.df
}
bio.bg.kg.RG.above.1.3.df <- as.data.frame(rbindlist(bio.bg.kg.RG.above.1.3))
bio.bg.kg.RG.above.1.3.df
# 1.2.2. biomass for RG trees height < 1.3m -------------------------------
# subset those trees that have a height above 1.3m and thus a DBH which allows them to be processed in TapeS
HBI.RG.below.1.3 <- HBI_RG[HBI_RG$H_m < 1.3, ]

group_by(plot_ID, DW_type) %>%
summarise(B_t = sum(B_t),
C_t = sum(C_t),
N_t = sum(N_t),
V_tot_m3 = sum(na.omit(V_dw_m3))) %>%
left_join(., DW_total %>%
filter(compartiment == "total") %>%
group_by(plot_ID) %>%
summarise(plot_B_tot_t = sum(B_t),
plot_C_tot_t = sum(C_t),
plot_N_tot_t = sum(N_t),
plot_V_tot_m3 = sum(V_dw_m3)),
by = "plot_ID") %>%
mutate(C_share = (C_t/plot_C_tot_t)*100,
N_share = (N_t/plot_N_tot_t)*100,
B_share = (B_t/plot_B_tot_t)*100,
V_share = (V_tot_m3/plot_V_tot_m3)*100) %>%
dplyr::select(- c("plot_B_tot_t", "plot_C_tot_t", "plot_N_tot_t", "B_t", "C_t", "N_t",  "V_tot_m3", "plot_V_tot_m3")),
by = c("plot_ID","DW_type"))
write.csv(DW_P_TY, paste0(momok.out.home, "DW_P_TY_MoMoK.csv"))
# -----2.5.2.7. deadwood  by plot ---------------------------------------------------
DW_P <- DW_total %>%
group_by(plot_ID, compartiment) %>%
summarise(V_m3_plot = sum(na.omit(V_dw_m3)),
B_t_plot = sum(na.omit(B_t)),
# actually this should be the B_t_ha because it also includes the fine wood compartiment,
# which is not included in the transformation from volume to biomass performed by the BWI
#B_t_tapes_plot = sum(na.omit(tons(dw_ag_kg))),
C_t_plot = sum(na.omit(C_t)),
N_t_plot = sum(na.omit(N_t)),
Nt_plot = n()) %>%
# dataset with are per plot cnsidreing multpiple sampling circuits per plot
left_join(., DW_total %>%
select(plot_ID, CCS_nr) %>%
distinct() %>%
mutate(CCS_A_ha = c_A(12.62)/10000) %>%
group_by(plot_ID) %>%
summarize(plot_A_ha = sum(CCS_A_ha))%>%
mutate(MoMoK_A_ha = (50*50)/10000),
by = "plot_ID") %>%
mutate(V_m3_ha = V_m3_plot/plot_A_ha,
B_t_ha = B_t_plot/plot_A_ha,
#B_t_tapes_ha = B_t_tapes_plot/ plot_A_ha,
C_t_ha = C_t_plot/plot_A_ha,
N_t_ha = N_t_plot/plot_A_ha,
Nt_ha = Nt_plot/plot_A_ha,
# referring carbon & nitrogen stocks to actual Momok size
V_m3_MA = (V_m3_plot/plot_A_ha)*MoMoK_A_ha,
B_t_MA = (B_t_plot/plot_A_ha)*MoMoK_A_ha,
#B_t_tapes_MA = (B_t_tapes_plot/ plot_A_ha)*MoMoK_A_ha,
C_t_MA = (C_t_plot/ plot_A_ha)*MoMoK_A_ha,
N_t_MA = (N_t_plot/plot_A_ha)*MoMoK_A_ha,
Nt_MA = (Nt_plot/ plot_A_ha)*MoMoK_A_ha) %>%
# number of decay types per plot
left_join(., DW_total %>%
select(plot_ID, dec_type) %>%
group_by(plot_ID) %>%
distinct() %>%
summarise(N_dec_type_plot = n()),
by = "plot_ID") %>%
# number of deadwood types per plot
left_join(., DW_total %>%
select(plot_ID, DW_type) %>%
group_by(plot_ID) %>%
distinct() %>%
summarise(N_DW_type_plot = n()),
by = "plot_ID")
summary(DW_P)
write.csv(DW_P, paste0(momok.out.home, "DW_P_MoMoK.csv"))
# ----- 2.5.4. REGENERATION plot level -------------------------------------------------------------------
# ----- 2.5.4.1. grouped by Plot and species  ------------------------------------------------------------------
RG_P_SP <- RG_total %>%
# sum plot area of all sampling circuits per plot together to calcualte plot area to reffer data to hectare
left_join(., RG_total %>%
filter(compartiment == "total") %>%
group_by(plot_ID, CCS_nr) %>%
summarise(CCS_max_dist_m = mean(CCS_max_dist/100)) %>%
mutate(CCS_A_ha = c_A(CCS_max_dist_m)/10000) %>%  # 10000 to transform m2 into ha, the plot radius has to be the distance of furthest plant to the RG sampling circuit
group_by(plot_ID) %>%
summarise(plot_A_ha = sum(CCS_A_ha)),
by = "plot_ID") %>%
# summing up biomass, carbon and nitrogen per speices, plot and compartiment
group_by(plot_ID, SP_code, compartiment) %>%                            # group by plot and species to calculate BA per species
summarise(B_t_plot = sum(B_t),
C_t_plot = sum(C_t),                           # sum of  carbon stock per plot,  species and compartiment
N_t_plot = sum(na.omit(N_t)),      # sum of aboveground Nitrogen stock per plot and species and compartiment
plot_A_ha = mean(plot_A_ha)) %>% # plot area
mutate(MoMok_A_ha = (50*50)/10000,                 # momok area 0.25 ha
# B, C, N hectar values
B_t_ha = B_t_plot/plot_A_ha,
C_t_ha = C_t_plot/plot_A_ha,
N_t_ha = N_t_plot/plot_A_ha,
# B, C, N  MoMoK area values
B_t_MA = (B_t_plot/plot_A_ha)*MoMok_A_ha,
C_t_MA = (C_t_plot/plot_A_ha)*MoMok_A_ha,
N_t_MA = (N_t_plot/plot_A_ha)*MoMok_A_ha) %>%
# join in mean diameter and height per plot and species group (grouped separately to avoid repetition with every compartiment)
left_join(., RG_total %>%
filter(compartiment == "total") %>%
group_by(plot_ID, SP_code) %>%
summarise(mean_D_cm = mean(D_cm),                         # mean diameter per species per canopy layer per plot
mean_H_m = mean(H_cm/100),                      # mean height per species per canopy layer per plot
#SP_BA_m2_plot = sum(c_A(D_cm/2)),               # Basal area in m2 per plot and speices --> doesnt make sense bacause not all trees have a diameter
N_trees_plot = n()), # %>%                          # number of individuals per plot and species
#  mutate(compartiment = "total"),                           # just to enable a clean join
by = c("plot_ID", "SP_code")) %>%
# join in C, N and number of trees of whole plot to calculate shares
left_join(., RG_total %>%
filter(compartiment == "total") %>%
group_by(plot_ID, CCS_nr) %>%
summarise(CCS_max_dist_m = mean(CCS_max_dist/100),
CCS_tot_B_t = sum(B_t),
CCS_tot_C_t = sum(C_t),                    # total C stock in tons per sampling circuit
CCs_tot_N_t = sum(na.omit(N_t)),     # total N stock in tons per sampling circuit
CCS_tot_N_trees = n()) %>%                 # 10000 to transform m2 into ha, the plot radius has to be the distance of furthest plant to the RG sampling circuit
mutate(CCS_A_ha = c_A(CCS_max_dist_m)/10000) %>%
group_by(plot_ID) %>%
summarise(plot_A_ha = sum(CCS_A_ha),                  # calcualte plot area in ha by summing up area of sampling circuits per plot
plot_tot_B_t = sum(CCS_tot_B_t),
plot_tot_C_t = sum(CCS_tot_C_t),                    # total C stock in tons per plot
plot_tot_N_t = sum(CCs_tot_N_t),     # total N stock in tons per plot
plot_tot_N_trees = sum(CCS_tot_N_trees)) %>%                 # total number of trees per plot
#mutate(compartiment = "total") %>%
select(-plot_A_ha),
by = c("plot_ID")) %>%
mutate(tot_N_trees_ha = plot_tot_N_trees/plot_A_ha,                  # total number trees per ha
tot_N_trees_MA = (plot_tot_N_trees/plot_A_ha)*MoMok_A_ha,      # total number RG trees per MA
SP_N_trees_ha = N_trees_plot/ plot_A_ha,                       #  number trees per species per ha
SP_N_trees_MA =( N_trees_plot/ plot_A_ha)*MoMok_A_ha,          #  number trees per species per MA
B_SP_share = (B_t_plot/plot_tot_B_t)*100,
C_SP_share = (C_t_plot/plot_tot_C_t)*100,                      # carbon share species
N_SP_share = (N_t_plot/plot_tot_N_t)*100,                      # nitrogen share species
N_trees_SP_share =  (N_trees_plot)/plot_tot_N_trees)           # number share species
write.csv(RG_P_SP, paste0(momok.out.home, "RG_P_SP_MoMoK.csv"))
# ----- 2.5.4.2. grouped by Plot  ------------------------------------------------------------------
RG_P <- RG_total %>%
# plot area of all sampling circuits together
left_join(., RG_total %>%
filter(compartiment == "total") %>%
group_by(plot_ID, CCS_nr) %>%
summarise(CCS_max_dist_m = mean(CCS_max_dist/100)) %>%
mutate(CCS_A_ha = c_A(CCS_max_dist_m)/10000) %>%      # 10000 to transform m2 into ha, the plot radius has to be the distance of furthest plant to the RG sampling circuit
group_by(plot_ID) %>%
summarise(plot_A_ha = sum(CCS_A_ha)) %>%
mutate(MoMoK_A_ha = (50*50)/10000),
by = "plot_ID") %>%
# summing up biomass, carbon and nitrogen per speices, plot and compartiment
group_by(plot_ID, compartiment) %>%                            # group by plot and species to calculate BA per species
summarise(B_t_plot = sum(B_t),
C_t_plot = sum(C_t),                           # sum of  carbon stock per plot,  species and compartiment
N_t_plot = sum(na.omit(N_t)),      # sum of aboveground Nitrogen stock per plot and species and compartiment
plot_A_ha = mean(plot_A_ha)) %>% # plot area
mutate(MoMok_A_ha = (50*50)/10000,                 # momok area 0.25 ha
# B, C, N hectar values
B_t_ha = B_t_plot/plot_A_ha,
C_t_ha = C_t_plot/plot_A_ha,
N_t_ha = N_t_plot/plot_A_ha,
# B, C, N  MoMoK area values
B_t_MA = (B_t_plot/plot_A_ha)*MoMok_A_ha,
C_t_MA = (C_t_plot/plot_A_ha)*MoMok_A_ha,
N_t_MA = (N_t_plot/plot_A_ha)*MoMok_A_ha) %>%
# number of species per plot
left_join(., RG_total %>%
filter(compartiment == "total") %>%
select(plot_ID, SP_code) %>%
group_by(plot_ID) %>%
distinct() %>%
summarise(N_species_plot = n()), #%>%
# mutate(compartiment = "total"),
by = c("plot_ID")) %>%
# number of RG trees per plot
left_join(., RG_total %>%
filter(compartiment == "total") %>%
group_by(plot_ID) %>%
summarise(Nt_plot = n()), #%>%
# mutate(compartiment = "total"),
by = c("plot_ID")) %>%
mutate(Nt_ha = Nt_plot/plot_A_ha,              # number of RG trees per hectar
Nt_MA = (Nt_plot/plot_A_ha)*MoMok_A_ha) # number of RG trees per MA
summary(RG_P)
write.csv(RG_P, paste0(momok.out.home, "RG_P_MoMoK.csv"))
# ----- 2.5.5.JOINT PLOTWISE: living trees, deadwood, regeneration  -------
plot_total <- rbind(
# living trees
trees_P %>%
dplyr::select(plot_ID,compartiment,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha) %>%        # per hectare
mutate(stand_component = "LT") %>%
dplyr::select(plot_ID,compartiment, stand_component,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha),           # per hectare
# regeneration trees
RG_P %>%
dplyr::select(plot_ID, compartiment,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha) %>%        # per hectare
mutate(stand_component = "RG") %>%
dplyr::select(plot_ID, compartiment, stand_component,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha),           # per hectar
# deadwood
DW_P %>%
dplyr::select(plot_ID, compartiment,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha) %>%        # per hectare
mutate(stand_component = "DW") %>%
dplyr::select(plot_ID, compartiment, stand_component,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha))           # per hectar
# add sum of all stand components together by plot and compartiment to plot total dataset
plot_total<-
rbind(plot_total,
plot_total %>%
group_by(plot_ID, compartiment) %>%
# https://dplyr.tidyverse.org/reference/across.html
summarise(across(B_t_plot:Nt_ha, ~ sum(.x, na.rm = TRUE))) %>%
mutate(stand_component = "all") %>%
dplyr::select(plot_ID, compartiment, stand_component,
B_t_plot, C_t_plot, N_t_plot, Nt_plot,    # per plot
B_t_MA, C_t_MA, N_t_MA, Nt_MA,            # per momok area 50X50m
B_t_ha, C_t_ha, N_t_ha, Nt_ha)
)
plot_total <- anti_join(plot_total, plots.to.exclude.LT.RG.DW, by = "plot_ID")
write.csv(plot_total, paste0(momok.out.home, "LB_RG_DW_Plot_MoMoK.csv"))
# export Bucchenhorst side for Marvin:
plot_total %>%
filter(plot_ID == 33300)
inner_join(., trees_total %>%
select(plot_ID, loc_name, state) %>%
filter(state == "MV" & loc_name == "Buchenhorst") %>%
distinct(),
by = "plot_ID") %>%
select(compartiment, stand_component,  C_t_ha) %>%
filter(compartiment %in% c("ag", "bg", "total")) %>%
mutate(compartiment = case_when(compartiment == "ag" ~ "oberirdisch",
compartiment == "bg" ~ "unterirdisch",
TRUE ~ "gesamt"),
stand_component = case_when(stand_component == "LT" ~ "Oberstand",
stand_component == "RG" ~ "Verjüngung",
stand_component == "all" ~ "Gesamter Bestand",
TRUE ~ "Totholz")) %>%
unite("component_compartiment", stand_component, compartiment, sep = " ") %>%
pivot_wider(names_from = component_compartiment, values_from = C_t_ha)
# ----- legend MoMoK output -----------------------------------------------
# here  will collect all column names of all datasets I everexportet so i can do an ultimate inner join and assign the meaning to the respective columns
legend_col_names <-
rbind(
as_tibble(c("B", "C", "N", "V", "BA", "D" ,"DBH", "D_h", "h", "H", "CH", "ID",
"b", "w", "f", "fw", "sw", "swb", "stw", "stwb", "ag", "bg", "total", "tot",
"Nt",
"DW", "dw", "RG", "LT",
"P", "SP", "CP",
"A", "t", "kg", "m3",
"ha", "m2",
"mm", "cm", "dm",
"BWI", "group","tapes", "tps", "tpS", "WuWi", "GHG", "Vondr")),
# keys between x bart and TapeS, Biomass species groups, Nitrogen species groups, height species groups
as_tibble( colnames(SP_names_com_ID_tapeS)),
# from trees_total_5 which contains all tree- and compartiment data of biomass and dendrometric parameters of living trees in picot longer
as_tibble( colnames(trees_tot_piv_wider)),
# from trees_total_5 which contains all tree- and compartiment data (B, C, N) of living trees in picot longer
as_tibble( colnames(trees_total_5)),
# from biotest which contains biomasse calculated by different calculation methods
as_tibble( colnames(biotest)),
# living tree data per species per plot per canopy layer summary --> forstliche zusammenfassung
as_tibble( colnames(trees_P_CP_SP)),
# living tree data per species per plot per compartiment summary
as_tibble( colnames(trees_P_SP.export)),
# living tree data per species per plot per compartiment summary, not groupped by species anymore
as_tibble( colnames(trees_P.export)),
# DW all deadwood item wise data
as_tibble( colnames(DW_total)),
# DW per species group, deadwood type, decay stage per plot summary
as_tibble( colnames(DW_P_SP_TY_DEC)),
# DW per species group, deadwood type, per plot summary
as_tibble( colnames(DW_P_SP_TY)),
# DW per deadwood type and decay stage per plot summary
as_tibble( colnames(DW_P_TY_DEC)),
# DW perdecay stage per plot summary
as_tibble( colnames(DW_P_DEC)),
# DW per deadwood type per plot summary
as_tibble( colnames(DW_P_TY)),
# DW per plot summary
as_tibble( colnames(DW_P)),
# RG per species per plot summary
as_tibble( colnames(RG_P_SP)),
# RG per plot
as_tibble( colnames(RG_P)),
# all plots, all stand components summary
as_tibble(colnames(plot_total)),
as_tibble(colnames(N_con_w))) %>%
distinct()
write.csv(legend_col_names, paste0(momok.out.home, "legend_MoMoK.csv"))
# EXPORTING AND COPYING ---------------------------------------------------
# save everything exportet to the output folder also to a folder on the server
# 1. create output path:
momok.out.path <- ("O:/a7bze/ZZ_BZE3_Bestand_Auswertung/Momok_out_data/")
# 2. get names of all files in the momok outout folder: https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list.files
momok.out.files <- list.files(momok.out.home)
# copy the files from one filder to the other: https://statisticsglobe.com/move-files-between-folders-r
file.copy(from = paste0(momok.out.home, momok.out.files),
to = paste0(momok.out.path, momok.out.files),
overwrite = TRUE)
plot_total %>%
filter(plot_ID == 33300)
# export Bucchenhorst side for Marvin:
plot_total %>%
filter(plot_ID == 33300) %>%
select(stand_component) %>% distinct()
# export Bucchenhorst side for Marvin:
plot_total %>%
inner_join(., trees_total %>%
select(plot_ID, loc_name, state) %>%
filter(state == "MV" & loc_name == "Buchenhorst") %>%
distinct(),
by = "plot_ID") %>%
select(compartiment, stand_component,  C_t_ha) %>%
filter(compartiment %in% c("ag", "bg", "total")) %>%
mutate(compartiment = case_when(compartiment == "ag" ~ "oberirdisch",
compartiment == "bg" ~ "unterirdisch",
TRUE ~ "gesamt"),
stand_component = case_when(stand_component == "LT" ~ "Oberstand",
stand_component == "RG" ~ "Verjüngung",
stand_component == "all" ~ "Gesamter Bestand",
TRUE ~ "Totholz")) %>%
unite("component_compartiment", stand_component, compartiment, sep = " ") %>%
pivot_wider(names_from = component_compartiment, values_from = C_t_ha)
# export Bucchenhorst side for Marvin:
view(plot_total %>%
inner_join(., trees_total %>%
select(plot_ID, loc_name, state) %>%
filter(state == "MV" & loc_name == "Buchenhorst") %>%
distinct(),
by = "plot_ID") %>%
select(compartiment, stand_component,  C_t_ha) %>%
filter(compartiment %in% c("ag", "bg", "total")) %>%
mutate(compartiment = case_when(compartiment == "ag" ~ "oberirdisch",
compartiment == "bg" ~ "unterirdisch",
TRUE ~ "gesamt"),
stand_component = case_when(stand_component == "LT" ~ "Oberstand",
stand_component == "RG" ~ "Verjüngung",
stand_component == "all" ~ "Gesamter Bestand",
TRUE ~ "Totholz")) %>%
unite("component_compartiment", stand_component, compartiment, sep = " ") %>%
pivot_wider(names_from = component_compartiment, values_from = C_t_ha)
)
# trees with HD status "warning" and sampled height
trees_tot_piv_wider %>%
filter(C_layer == 1) %>%
mutate(HD_status = case_when(HD_value >= 5 & HD_value <= 65 | HD_value >= 85  & HD_value <= 139.9 ~ "WARNING",
HD_value <= 4.9 | HD_value > 140 ~ "ERROR",
TRUE ~ "FINE")) %>%
filter(HD_status == "WARNING" & H_method == "sampled")
write.csv(Buchenhorst, paste0(momok.out.home, "Buchenhorst_Hektarwerte.csv"))
# export Bucchenhorst side for Marvin:
Buchenhorst <- plot_total %>%
inner_join(., trees_total %>%
select(plot_ID, loc_name, state) %>%
filter(state == "MV" & loc_name == "Buchenhorst") %>%
distinct(),
by = "plot_ID") %>%
select(compartiment, stand_component,  C_t_ha) %>%
filter(compartiment %in% c("ag", "bg", "total")) %>%
mutate(compartiment = case_when(compartiment == "ag" ~ "oberirdisch",
compartiment == "bg" ~ "unterirdisch",
TRUE ~ "gesamt"),
stand_component = case_when(stand_component == "LT" ~ "Oberstand",
stand_component == "RG" ~ "Verjüngung",
stand_component == "all" ~ "Gesamter Bestand",
TRUE ~ "Totholz")) %>%
unite("component_compartiment", stand_component, compartiment, sep = " ") %>%
pivot_wider(names_from = component_compartiment, values_from = C_t_ha)
write.csv(Buchenhorst, paste0(momok.out.home, "Buchenhorst_Hektarwerte.csv"))
write.csv2(Buchenhorst, paste0(momok.out.home, "Buchenhorst_Hektarwerte.csv"))
# save everything exportet to the output folder also to a folder on the server
# 1. create output path:
momok.out.path <- ("O:/a7bze/ZZ_BZE3_Bestand_Auswertung/Momok_out_data/")
# 2. get names of all files in the momok outout folder: https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list.files
momok.out.files <- list.files(momok.out.home)
# copy the files from one filder to the other: https://statisticsglobe.com/move-files-between-folders-r
file.copy(from = paste0(momok.out.home, momok.out.files),
to = paste0(momok.out.path, momok.out.files),
overwrite = TRUE)
bark_div <- read.delim(file = here("data/input/General/barkdiv_FSI_storch.csv"), sep = ";", dec = ",")
bark_div <- read.delim(file = here("data/input/General/barkdiv_FSI_storch_2018.csv"), sep = ";", dec = ",")
bark_div <- read.delim(file = here("data/input/General/barkdiv_FSI_storch_2018.csv"), sep = ";", dec = ",")
bark_div
colnames(bark_div) <- c("species", "bark_type", "DBH_type_1", "DBH_type_2", "DBH_type_3")
fruit_div <- read.delim(file = here("data/input/General/fruitdiv_FSI_storch_2018.csv"), sep = ";", dec = ",")
colnames(fruit_div)
colnames(fruit_div) <- c("species", "fruct_age", "pollination_type", "fruit_type")
bark_div %>% select(species)
SP_names_com_ID_tapeS %>%
left_join(., bark_div,
by = ("bot_name" == "species"))
SP_names_com_ID_tapeS %>%
left_join(., bark_div,
by = ("bot_name" = "species"))
bark_div
SP_names_com_ID_tapeS%>%
left_join(., bark_div,
by = c("bot_name" = "species"))
SP_names_com_ID_tapeS%>%
left_join(., bark_div %>% select(bark_type),
by = c("bot_name" = "species"))
SP_names_com_ID_tapeS%>%
left_join(., bark_div %>% select(bark_type),
by = c("bot_name" = "species"))
SP_names_com_ID_tapeS%>%
left_join(., bark_div %>% select(species, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS%>%
left_join(., bark_div %>% select(species, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_1 %>% filter(is.na(bark_type))
bark_div %>%
mutate_at(species, stringr::str_remove("?+.(_=?)"))
bark_div %>%
mutate_at(., "species", stringr::str_remove("?+.(_=?)"))
bark_div %>%
mutate_at(., "species", stringr::str_remove("?+.( =?)"))
bark_div %>%
mutate_at(., "species", stringr::str_remove, ("?+.( =?)"))
bark_div %>% select(species, bark_type)
bark_div %>%
mutate_at(., "species", gsub(" *", "", .)
bark_div %>%
mutate_at(., "species", gsub(" *", "", .))
bark_div %>%
mutate_at(., "species", gsub(" *", "")
bark_div %>%
mutate_at(., "species", gsub(" *", ""))
bark_div %>%
mutate_at(., "species", gsub(" *", ""))
bark_div %>%
mutate_at("species", gsub(" *", ""))
bark_div %>%
mutate_at("species", gsub, (" *", ""))
gsub(".*", "", bark_div$species)
gsub(" .*", "", bark_div$species)
bark_div %>%
mutate_at("species", gsub(" .*", "", bark_div$species))
bark_div %>%
mutate_at("species", gsub(" .*", ""))
bark_div %>%
mutate_at("species", gsub(" .*", "", species))
bark_div %>%
mutate_at("species", gsub(" .*", "", "species"))
bark_div %>%
mutate(bot_genus = gsub(" .*", "", "species"))
bark_div %>%
mutate(bot_genus = gsub(" .*", "", species))
bark_div %>%
mutate(bot_genus = gsub(" .*", "", species),
bot_species = gsub("*. ", "", species))
bark_div %>%
mutate(bot_genus = gsub(" .*", "", species),
bot_species = gsub("*.", "", species))
bark_div %>%
mutate(bot_genus = gsub(" .*", "", species),
bot_species = gsub(".* ", "", species))
bark_div <- bark_div %>%  mutate(bot_genus = gsub(" .*", "", species),
bot_species = gsub(".* ", "", species))
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS %>%
left_join(., bark_div %>% select(species, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_2 %>% filter(is.na(bark_type)) %>%
left_join(., bark_div %>%
select(bot_name, bark_type),
by = "bot_name")
bark_TY_species_groups_1 %>% filter(is.na(bark_type)) %>%
left_join(., bark_div %>%
select(bot_name, bark_type),
by = "bot_name")
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS %>%
left_join(., bark_div %>% select(species, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS %>%
left_join(., bark_div %>% select(species, bot_name, bot_genus, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS %>%
left_join(., bark_div %>% select(species, bot_genus, bot_species, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_1 %>% filter(is.na(bark_type)) %>%
left_join(., bark_div %>%
select(bot_genus, bark_type),
by = "bot_genus")
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS %>%
left_join(., bark_div %>% select(species, bot_genus, bot_species, bark_type),
by = c("bot_name" = "species"))
bark_TY_species_groups_1
bark_TY_species_groups_1 <- SP_names_com_ID_tapeS %>%
left_join(., bark_div %>% select(species, bot_genus, bot_species, bark_type),
by = c("bot_name" = "species", "bot_genus", "bot_species"))
bark_TY_species_groups_1 %>% filter(is.na(bark_type)) %>%
left_join(., bark_div %>%
select(bot_genus, bark_type),
by = "bot_genus")
bark_TY_species_groups_2 <-
bark_TY_species_groups_1 %>% filter(is.na(bark_type)) %>%
left_join(., bark_div %>%
select(bot_genus, bark_type),
by = "bot_genus")
bark_TY_species_groups_2 %>% filter(is.na(bark_type.y))
bark_TY_species_groups_2 %>% filter(is.na(bark_type.y)) %>% select(bot_genus) %>% distinct()# 32 species remain that cannot be allocated to group

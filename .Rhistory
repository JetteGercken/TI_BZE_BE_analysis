RG_SP_ST_BCN_ha,
RG_SP_BCN_ha,
RG_ST_BCN_ha,
RG_P
) %>%
arrange(plot_ID)
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. number of DW items per hectar ----------------------------------------------
n_ha_DW <- DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "DW")
# 3.2. stocks per hectar deadwood -----------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-X)) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
DW_BCN_ha_SP_TY_DEC_P
# 3.2. stocks per hectar deadwood -----------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-X)) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
DW_BCN_ha_SP_TY_DEC_P
DW_BCN_ha_SP_TY_DEC_P%>%
group_by(plot_ID, inv_year, dw_sp, dw_type, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(B_t_ha), # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(C_t_ha),
N_t_ha = sum(N_t_ha)) %>%
distinct()
DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
#1.17.  summarize data with varying grouing variables ---------------------------
summarize_data <- function(data, group_vars, columns, operation) {
mean_df <- data %>%
group_by(across(all_of(group_vars), .names = "{.col}")) %>%
summarise(across(all_of(columns), mean, na.rm = TRUE))
sum_df <- data %>%
group_by(across(all_of(group_vars), .names = "{.col}")) %>%
summarise(across(all_of(columns), sum, na.rm = TRUE))
switch(operation,
mean_df = mean_df,
sum_df = sum_df)
}
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df")
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all")
DW_stat_2
plyr::rbind.fill(
# grouped by species, decay type, deadwoodtype, plot, compartiment, inventory
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all")
)
plyr::rbind.fill(
# grouped by species, decay type, deadwoodtype, plot, compartiment, inventory
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all")
) %>%
distinct() %>%
arrange(plot_ID)
plyr::rbind.fill(
# grouped by species, decay type, deadwoodtype, plot, compartiment, inventory
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all")
) %>%
distinct() %>%
arrange(plot_ID) %>%
mutate(stand_component = "DW")
# 3. DEADWOOD -------------------------------------------------------------
# 3.1. number of DW items per hectar ----------------------------------------------
n_ha_DW <- DW_data %>%
filter(compartiment == "ag") %>%
group_by(plot_ID, inv_year) %>%
reframe(n_ha = n()/plot_A_ha) %>%
distinct() %>%
mutate(stand_component = "DW")
# 3.2. stocks per hectar deadwood -----------------------------------------
# create one very fine grouped summary for deadwood which we sum up into different groups later on
if(exists('DW_stat_2') == TRUE && nrow(DW_stat_2)!=0){
DW_BCN_ha_SP_TY_DEC_P <- plyr::rbind.fill(DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct(),
DW_stat_2 %>% select(-X, plot_A_ha)) %>%
mutate(stand_component = "DW")}else{
DW_BCN_ha_SP_TY_DEC_P <- DW_data %>%
group_by(plot_ID, inv_year, dw_sp, dw_type, decay, compartiment, plot_A_ha) %>%
# convert Biomass into tons per hectar and divide it by the plot area to calculate stock per hectar
reframe(B_t_ha = sum(ton(B_kg_tree))/plot_A_ha, # plot are is the area of the respecitive sampling circuit in ha
C_t_ha = sum(ton(C_kg_tree))/plot_A_ha,
N_t_ha = sum(ton(N_kg_tree))/plot_A_ha) %>%
distinct()
}
# 3.4. DW big summary over all grouping variables -------------------------
DW_summary_trial <-
plyr::rbind.fill(
# grouped by species, decay type, deadwoodtype, plot, compartiment, inventory
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all"),
# grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
decay = "all"),
# grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
dw_type = "all"),
# grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all"),
# grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%
left_join(., n_ha_DW,
by = c("plot_ID", "inv_year"))
# 3.4. DW big summary over all grouping variables -------------------------
DW_summary_trial <-
plyr::rbind.fill(
# grouped by species, decay type, deadwoodtype, plot, compartiment, inventory
DW_BCN_ha_SP_TY_DEC_P,
# grouped by species, deadwoodtype, plot, compartiment, inventory. not by decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all"),
# grouped by species, decay, plot, compartiment, inventory, not by deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_type = "all"),
# grouped by deadwoodtype, decay, plot, compartiment, inventory, not by species type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all"),
# grouped by deadwoodtype, plot, compartiment, inventory, not by species and decay type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_type", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
decay = "all"),
# grouped by decay, plot, compartiment, inventory, not by species and deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "decay", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(dw_sp = "all",
dw_type = "all"),
# grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "dw_sp", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all"),
# grouped by species group, plot, compartiment, inventory, not by decay and deadwood type anymore
summarize_data(DW_BCN_ha_SP_TY_DEC_P,
c("plot_ID", "inv_year", "compartiment"),
c("B_t_ha", "C_t_ha", "N_t_ha"),
operation = "sum_df") %>%
mutate(decay = "all",
dw_type = "all",
dw_sp = "all")
) %>%
left_join(., n_ha_DW,
by = c("plot_ID", "inv_year")) %>%
distinct() %>%
arrange(plot_ID) %>%
mutate(stand_component = "DW")
DW_summary_trial
# 2.7. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
c("plot_ID", "inventory", "compartiment", "SP_code"),  # variables to group by
operation = "sum_df") # statistical operation
RG_stat_2
# 2.7. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
c("plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
operation = "sum_df") # statistical operation
summarize_data
# 2.7. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") # statistical operation
RG_n_SP_plot
RG_n_ha
# 2.6.2. RG summary by plot and species, without grouping by stand ---------------------------------------------------------
RG_summary <- plyr::rbind.fill(
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "SP_code"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(stand = "all"),
# 2.6.3. RG summary by plot and stand, without grouping by species ---------------------------------------------------------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment", "stand"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
mutate(SP_code = "all"),
# 2.6.4. RG summary by plot, inventory, compartiment, not by speci --------
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv_year, n_ha),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component")) %>%
mutate(n_ha = ifelse(is.na(n_ha), 0, n_ha),
n_SP = ifelse(is.na(n_SP), 0, n_SP),
stand = "all",
SP_code = "all")
) %>% # close rbind
distinct() %>%
arrange(plot_ID)
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df")
RG_n_ha
RG_n_SP_plot
RG_n_ha
summarize_data(RG_SP_ST_BCN_ha,
c("stand_component", "plot_ID", "inv_year", "compartiment"),  # variables to group by
c("B_t_ha", "C_t_ha", "N_t_ha"), # variables to sum up
operation = "sum_df") %>% # statistical operation
# join in number of plants and species per ha to plowise summary
left_join(., RG_n_ha %>% select(plot_ID, inv_year, n_ha),
by = c("plot_ID", "inv_year", "stand_component")) %>%
left_join(., RG_n_SP_plot,
by = c("plot_ID", "inv_year", "stand_component"))
paste(inv_name(HBI_trees$inv_year)[1], inv_name(BZE3_trees$inv_year)[1], "LT_dbh_growth", sep = "_"), ".csv")
paste(inv_name(HBI_trees$inv_year)[1], inv_name(BZE3_trees$inv_year)[1], "LT_dbh_growth", sep = "_"), ".csv")
paste(inv_name(HBI_trees$inv_year)[1], inv_name(BZE3_trees$inv_year)[1], "LT_dbh_growth", sep = "_")
# 2. data export ----------------------------------------------------------
write.csv2(growth_summary, paste0(out.path.BZE3, paste(inv_name(HBI_trees$inv_year)[1], inv_name(BZE3_trees$inv_year)[1], "LT_dbh_growth", sep = "_"), ".csv"))
# Thuenen Institute - Bodenschutz und Waldzustand
# Analysis of the forest inventory accompanying the  national soil inventory
# growth
# ----- 0. SETUP ---------------------------------------------------------------
# ----- 0.1. packages and functions --------------------------------------------
source(paste0(getwd(), "/scripts/01_00_functions_library.R"))
# ----- 0.2. working directory -------------------------------------------------
here::here()
getwd()
out.path.BZE3 <- ("output/out_data/out_data_BZE/")
# vorräte: über alle jahre
# einzelbaumdurchmesser
# veränderung grundflächenanteil
# 0.3. data import --------------------------------------------------------
BZE3_trees <- read.delim(file = here("output/out_data/out_data_BZE/BZE3_LT_update_4.csv"), sep = ";", dec = ",")
BZE3_ha_stocks_P <- read.delim(file = here("output/out_data/out_data_BZE/BZE3_LT_stocks_ha_P.csv"), sep = ";", dec = ",")
BZE3_summary <- read.delim(file = here("output/out_data/out_data_BZE/BZE3_LT_stocks_ha_P_SP_TY.csv"), sep = ";", dec = ",")
HBI_trees <- read.delim(file = here("output/out_data/out_data_BZE/HBI_LT_update_4.csv"), sep = ";", dec = ",")
HBI_ha_stocks_P <- read.delim(file = here("output/out_data/out_data_BZE/HBI_LT_stocks_ha_P.csv"), sep = ";", dec = ",")
HBI_summary <- read.delim(file = here("output/out_data/out_data_BZE/HBI_LT_stocks_ha_P_SP_TY.csv"), sep = ";", dec = ",")
# 1. calculations ---------------------------------------------------------
# 1.1. single tree growth -------------------------------------------------
# this inventory status means that the tree should have been assessed in the previous
# invenotry but wasn´t
# thus we have to calculate how much the tree of that species at that plot would have grown
# between the previous and current inventory, then deduct it from the diameter of the
# respective tree in the current inventory and add the tree to the previous inventory with
# the same ID, tree status 0 and the reduced diameter
# for this inventory status
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1, -9) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "SP_code")) %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
# 1.2. grouping growth ------------------------------------------------------------------
growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"))
## join HBI and BZE3 single tree diameters together by tree & plot ID
dbh_growth_tree <- left_join(
# select trees that are repeatedly inventory, or unknown status
BZE3_trees %>%
filter(tree_inventory_status %in% c(1, -9) & compartiment == "ag") %>%
rename(BZE3_DBH_cm = DBH_cm) %>%
rename(BZE3_inv_year = inv_year) %>%
select(plot_ID, tree_ID, BZE3_inv_year, stand, C_layer, SP_code, BZE3_DBH_cm),
HBI_trees %>%
# select trees that were newly inventored, repeated inventory, or unknown status
filter(tree_inventory_status %in% c(0, 1, -9) & compartiment == "ag")%>%
rename(HBI_DBH_cm = DBH_cm) %>%
rename(HBI_inv_year = inv_year) %>%
select(plot_ID, tree_ID, HBI_inv_year, stand, C_layer, SP_code, HBI_DBH_cm),
by = c("plot_ID", "tree_ID", "C_layer", "stand", "SP_code")) %>%
# there may be trees that are new in BZE3 and havent been inventorised in HBI
# so we have to put these trees DBHs to 0 and the invenotry year to the one of the other trees
# to calculate the increment properly
mutate(HBI_DBH_cm = ifelse(is.na(HBI_DBH_cm), 0, HBI_DBH_cm),
HBI_inv_year = ifelse(is.na(HBI_inv_year), 2012, HBI_inv_year)) %>%
mutate(DBH_growth_cm = BZE3_DBH_cm - HBI_DBH_cm,
age_period = BZE3_inv_year- HBI_inv_year,
annual_growth_cm = DBH_growth_cm/age_period)
dbh_growth_tree
# 1.2. grouping growth ------------------------------------------------------------------
growth_summary <- plyr::rbind.fill(
# growth by plot, species, canopy layer and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code", "C_layer"),
c("age_period", "annual_growth_cm"),
operation = "mean_df"),
# growth by plot, species and stand
summarize_data(dbh_growth_tree,
c("plot_ID", "stand", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df") %>%
mutate(C_layer = "all"),
# growth by plot, species
summarize_data(dbh_growth_tree,
c("plot_ID", "SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all"),
# growth by species
summarize_data(dbh_growth_tree,
c("SP_code"),
c("age_period", "annual_growth_cm"),
operation = "mean_df")%>%
mutate(C_layer = "all",
stand = "all",
plot_ID = "all"))
growth_summary
# 2. data export ----------------------------------------------------------
write.csv2(growth_summary, paste0(out.path.BZE3, paste(inv_name(HBI_trees$inv_year)[1], inv_name(BZE3_trees$inv_year)[1], "LT_dbh_growth", sep = "_"), ".csv"))
growth_summary
BZE3_trees
# growth
growth <-  read.delim(file = here("output/out_data/out_data_BZE/HBI_BZE3_LT_dbh_growth.csv"), sep = ";", dec = ",")
BZE3_trees_removed <- read.delim(file = here("output/out_data/out_data_BZE/BZE3_LT_removed_2.csv"), sep = ";", dec = ",")
# 1.1. find  trees in HBI dataset that were found removed in BZE3  --------
BZE3_trees_removed
# 1.1. find  trees in HBI dataset that were found removed in BZE3  --------
BZE3_trees_removed %>% filter(tree_inventory_status == 2)
# 1.1. find  trees in HBI dataset that were found removed in BZE3  --------
BZE3_trees_removed %>% filter(tree_inventory_status == 2) %>%
anti_join(., HBI_trees, by = c("plot_ID", "tree_ID"))
# 1.1. find  trees in HBI dataset that were found removed in BZE3  --------
HBI_trees %>%
anti_join(., BZE3_trees_removed %>% filter(tree_inventory_status == 2),
by = c("plot_ID", "tree_ID"))
# 1.1. find  trees in HBI dataset that were found removed in BZE3  --------
HBI_trees %>%
semi_join(., BZE3_trees_removed %>% filter(tree_inventory_status == 2),
by = c("plot_ID", "tree_ID"))

## create poolygon of intersection for first polygon with circle
inter.poly.5.1  <- st_intersection(my.circle, my.poly.1)
inter.status.poly.5.1 <- ifelse(nrow(inter.poly.5.1) == 0, "no intersections",
ifelse(my.e.form.1 == 1 & inter.poly.5.1$geometry == my.circle$geometry,  "no intersections",
ifelse(my.e.form.1 == 2 & inter.poly.5.1$geometry == my.circle$geometry, "fully covering circle",
"partly intersecting")))
# if the first ednge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections and the circle is passed on to the next edge to calcualte the intersection
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.5.1.a <- if(isTRUE(inter.poly.5.1) && inter.poly.5.1$geometry == my.circle$geometry){inter.poly.5.1 <- data.frame()}else{inter.poly.5.1}
## create poolygon of remaining circle after first edge polygone is intersected
# create poly with remaining area: https://gis.stackexchange.com/questions/353633/r-spatial-erase-one-polygon-from-another-correct-use-of-st-difference
remaining.circle.5.1.a <- if(nrow(inter.poly.5.1)==0){my.circle}else{sf::st_difference(my.circle, inter.poly.5.1)}
# print(plot(remaining.circle.5.1$geometry, main = paste0(my.plot.id, "-",my.e.form.1,  "-", c.r1)))
# here we have to correct the remaining circle: the circle can only be the part that contains the center of the plot
inter.poly.5.1 <- if(nrow(st_intersection(inter.poly.5.1.a, circle.pt))==0){inter.poly.5.1.a}else{remaining.circle.5.1.a}
remaining.circle.5.1 <- if(nrow(st_intersection(remaining.circle.5.1.a, circle.pt))!=0){remaining.circle.5.1.a}else{inter.poly.5.1.a}
# print(plot(remaining.circle.12.1$geometry, main = paste0(my.plot.id, "-", my.e.form.2,  "-", c.r2)))
## create polygone of intersecting area of second polygone with remaining circle
inter.poly.5.2 <- st_intersection(my.poly.2, st_geometry(remaining.circle.5.1))
inter.status.poly.5.2 <- ifelse(nrow(inter.poly.5.2) == 0, "no intersections",
ifelse(my.e.form.2== 1 & inter.poly.5.2$geometry == remaining.circle.5.1$geometry,  "no intersections",
ifelse(my.e.form.2 == 2 & inter.poly.5.2$geometry == remaining.circle.5.1$geometry, "fully covering circle",
"partly intersecting")))
# if the second edge covers all of the circle remaining its going to be set to 0 so we know there are no direct intersections
# https://www.statology.org/r-argument-is-of-length-zero/
inter.poly.5.2 <- if(isTRUE(inter.poly.5.2) && inter.poly.5.2$geometry == remaining.circle.5.1$geometry){inter.poly.5.2 <- data.frame()}else{inter.poly.5.2}
## create polygone of the  remaining cricle after both intersects are decucted
# so the area of the frst remining circle minus the area of the second remaining circle
remaining.circle.5.1.and.2.poly <- if(nrow(inter.poly.5.2)==0){remaining.circle.5.1}else{sf::st_difference(remaining.circle.5.1, inter.poly.5.2)}
#### calculate the area
## 17m cricle
# area of the intersection 1
inter.17.1.area <- ifelse(nrow(inter.poly.17.1) == 0, 0, sf::st_area(inter.poly.17.1))
# area of the intersection polygone 2
inter.17.2.area <- ifelse(nrow(inter.poly.17.2) == 0, 0, sf::st_area(inter.poly.17.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.17 <- sf::st_area(remaining.circle.17.1.and.2.poly)
# save area in dataframe
inter.area.df.17 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id), "e_ID" = c(my.e.id.1, my.e.id.2, 0),
"inv_year" = c(my.inv.year, my.inv.year, my.inv.year),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"CCS_r_m" = c(c.r3, c.r3, c.r3),
"inter_stat" = c(inter.status.poly.17.1, inter.status.poly.17.2, 0),
"area_m2" = c(inter.17.1.area, inter.17.2.area, remaining.circle.area.17)
))
## 12m cricle
# area of the intersection 1
inter.12.1.area <- ifelse(nrow(inter.poly.12.1) == 0, 0, sf::st_area(inter.poly.12.1))
# area of the intersection polygone 2
inter.12.2.area <- ifelse(nrow(inter.poly.12.2) == 0, 0, sf::st_area(inter.poly.12.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.12 <- sf::st_area(remaining.circle.12.1.and.2.poly)
# save area in dataframe
inter.area.df.12 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id), "e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"inv_year" = c(my.inv.year, my.inv.year, my.inv.year),
"CCS_r_m" = c(c.r2, c.r2, c.r2),
"inter_stat" = c(inter.status.poly.12.1, inter.status.poly.12.2, 0),
"area_m2" = c(inter.12.1.area, inter.12.2.area, remaining.circle.area.12)
))
## 5m cricle
# area of the intersection 1
inter.5.1.area <- ifelse(nrow(inter.poly.5.1) == 0, 0, sf::st_area(inter.poly.5.1))
# area of the intersection polygone 2
inter.5.2.area <- ifelse(nrow(inter.poly.5.2) == 0, 0, sf::st_area(inter.poly.5.2))
#  area of the remaining circle, after both intersections are deducted
remaining.circle.area.5 <- sf::st_area(remaining.circle.5.1.and.2.poly)
# save area in dataframe
inter.area.df.5 <- as.data.frame(
cbind("plot_ID" = c(my.plot.id, my.plot.id, my.plot.id),
"e_ID" = c(my.e.id.1, my.e.id.2, 0),
#"e_form" = c(my.poly.1$e_form, my.poly.2$e_form, 0),"shape" = c("edge", "edge", "circle"),
"inv_year" = c(my.inv.year, my.inv.year, my.inv.year),
"CCS_r_m" = c(c.r1, c.r1, c.r1),
"inter_stat" = c(inter.status.poly.5.1, inter.status.poly.5.2, 0),
"area_m2" = c(inter.5.1.area, inter.5.2.area, remaining.circle.area.5)
))
# bind area datafames of all 3 circles together
inter.area.df <- rbind(inter.area.df.17, inter.area.df.12,inter.area.df.5 ) %>%
mutate(across(c("plot_ID", "e_ID", "inv_year", "CCS_r_m", "area_m2"), as.numeric))
# assing stand to the edges depedning on area and the stand with trees
# is there a polygone that does not incluce the middle of the plot, has the t<pe 1 or 2 (if its an edge) and doesn´t have trees
# then the poylgone is labelled with "no forest" and the remaining polygones are allocated into stands by area
# first "if": both edges are edge type 1 or 2 and do not have trees and do not have the middle of the plot
if(isTRUE(nrow(st_intersection(inter.poly.17.1, tree.sf))!=0 & my.poly.1$e_type %in% c(1,2))){inter.17.1.tree.stat <- "trees but outer edge"}else{inter.17.1.tree.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.2, tree.sf))!=0 & my.poly.2$e_type %in% c(1,2))){inter.17.2.tree.stat <- "trees but outer edge"}else{inter.17.2.tree.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.1, circle.pt))!=0 & my.poly.1$e_type %in% c(1,2))){inter.17.1.center.stat <- "center but outer edge"}else{inter.17.1.center.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.2, circle.pt))!=0 & my.poly.2$e_type %in% c(1,2))){inter.17.2.center.stat <- "center but outer edge"}else{inter.17.2.center.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.1, tree.sf))==0 & nrow(st_intersection(inter.poly.17.1, circle.pt))==0 & my.poly.1$e_type %in% c(1,2))){inter.17.1.forest.stat <- "no forest"}else{inter.17.1.forest.stat <- NA}
if(isTRUE(nrow(st_intersection(inter.poly.17.2, tree.sf))==0 & nrow(st_intersection(inter.poly.17.2, circle.pt))==0 & my.poly.2$e_type %in% c(1,2))){inter.17.2.forest.stat <- "no forest"}else{inter.17.2.forest.stat <- NA}
my.poly.1$stand <- case_when(inter.17.1.tree.stat ==  "trees but outer edge" | inter.17.1.center.stat == "center but outer edge" ~ "warning",
inter.17.1.tree.stat ==  "trees but outer edge" & inter.17.1.center.stat == "center but outer edge" ~ "warning",
inter.17.1.forest.stat == "no forest"~ "no forest",
TRUE ~ NA)
my.poly.2$stand <- case_when(inter.17.2.tree.stat ==  "trees but outer edge" | inter.17.2.center.stat == "center but outer edge" ~ "warning",
inter.17.2.tree.stat ==  "trees but outer edge" | inter.17.2.center.stat == "center but outer edge" ~ "warning",
inter.17.2.forest.stat == "no forest"~ "no forest",
TRUE ~ NA)
# create dataframe with stand info per edge/ remaining circle
stand.df <- as.data.frame(cbind(
"plot_ID" = my.plot.id,
"e_ID" = c(my.poly.1$e_ID, my.poly.2$e_ID, 0),
"stand"= c(ifelse(length(my.poly.1$stand) == 0, NA, my.poly.1$stand),
ifelse(length(my.poly.2$stand) == 0, NA, my.poly.2$stand),
ifelse(length(remaining.circle.17.1.and.2.poly$stand) == 0, NA, remaining.circle.17.1.and.2.poly$stand) ))) %>%
mutate(plot_ID = as.numeric(plot_ID),
e_ID = as.numeric(e_ID))
stand.df <-
rbind(
inter.area.df%>%
filter(CCS_r_m  == 17.84) %>%
mutate(area_m2 = as.numeric(area_m2)) %>%
left_join(., stand.df, by = c("plot_ID", "e_ID")) %>%
group_by(plot_ID, inv_year) %>%
arrange(desc(area_m2)) %>%
filter(!(stand %in% c("no forest", "warning"))) %>%
# assing stand according to row number by selecting the letter of the alphabet with the respective number e.g. row == 1 --> A:
# https://www.geeksforgeeks.org/sequence-of-alphabetical-character-letters-from-a-z-in-r/
# lowest area receives stand ID C, then B, then A
mutate(stand = LETTERS[row_number()]),
# dataset with "no forest" or "warning" stands (if there are any, if not i´ll just not bind them)
inter.area.df%>%
filter(CCS_r_m  == 17.84) %>%
mutate(area_m2 = as.numeric(area_m2)) %>%
left_join(., stand.df, by = c("plot_ID", "e_ID")) %>%
filter(stand %in% c("no forest", "warning")) %>%
mutate(stand = as.character(stand))
) %>%
# make stand.df joinable by only leaving plot_ID, e_ID, no matter the diameter of the CCS
select(- c(CCS_r_m, inter_stat, area_m2))
stand.df <- stand.df %>%
mutate(plot_ID = as.numeric(plot_ID),
e_ID = as.numeric(e_ID),
inv_year = as.numeric(inv_year))
# join in stand info based on area of the edge segment
inter.area.df <- inter.area.df %>% left_join(., stand.df,
by = c("plot_ID", "e_ID", "inv_year"))
print(  c(plot(circle.17$geometry, main = paste0(my.plot.id, " - ", my.e.form.1, " - ", my.e.form.2)),
plot(remaining.circle.17.1.and.2.poly$geometry, col = "grey", add = T),
plot(remaining.circle.12.1.and.2.poly$geometry, add = T),
plot(remaining.circle.5.1.and.2.poly$geometry, add = T),
plot(inter.poly.17.1$geometry, col = "green", add =TRUE),
plot(inter.poly.17.2$geometry, col = "blue", add =TRUE),
plot(circle.pt$geometry, col = "red",  add = TRUE),
legend("topleft", legend=c(paste0(unique(inter.area.df$stand[inter.area.df$e_ID == my.poly.1$e_ID]),":",  my.poly.1$e_type),
paste0(unique(inter.area.df$stand[inter.area.df$e_ID == my.poly.2$e_ID]),":",  my.poly.2$e_type),
paste0(unique(inter.area.df$stand[inter.area.df$e_ID == 0]),":","rem_circle")),
col=c("green", "blue", "grey"), lty=1:2, cex=0.8),
plot(st_geometry(tree.sf), add = TRUE)))
# save datacframe per plot in list
outer.edges.list.two.edges.nogeo[[i]] <- inter.area.df
# create list with those plot ID where the two edges intersect within the radius of 17.84m
intersection.between.edges.17 <- sf::st_intersection(
sf::st_intersection(my.poly.1, circle.17), # intersection poly 1 and cirlce 17
sf::st_intersection(my.poly.2, circle.17)) # intersection poly 2 and cirlce 17
intersection.warning.edges <- ifelse(nrow(intersection.between.edges.17) == 0, NA, intersection.between.edges.17$plot_ID)
outer.intersection.warning.edges.list.nogeo[[i]] <- as.data.frame(cbind("plot_ID" = c(intersection.warning.edges)))
## save intersection polygones in list
# poly.1
outer.inter.poly.1.list.nogeo[[i]] <- if(nrow(inter.poly.17.1)!= 0){c(inter.poly.17.1)}else{c(my.poly.1)}
# poly.2
outer.inter.poly.2.list.nogeo[[i]] <- if(nrow(inter.poly.17.2)!= 0){c(inter.poly.17.2)}else{c( my.poly.2)}
## save the reimaingf circle polygones in a list
remaining.circle.17.1.and.2.poly$plot_ID <- my.plot.id
remaining.circle.17.1.and.2.poly$e_ID <- 0
remaining.circle.17.1.and.2.poly$inv_year <- my.inv.year
remaining.circle.17.1.and.2.poly$e_form <- 0
remaining.circle.17.1.and.2.poly$geometry <- remaining.circle.17.1.and.2.poly$geometry
# create list wit polygones of the remaining cirlce when it´s only one polygone
outer.rem.circle.poly.2.edges.list.nogeo[[i]] <- if(st_geometry_type(remaining.circle.17.1.and.2.poly)== "POLYGON"){c(remaining.circle.17.1.and.2.poly)}else{}
# create list wit polygones of the remaining cirlce when it´s a multipoligone
outer.rem.circle.multipoly.2.edges.list.nogeo[[i]] <- if(st_geometry_type(remaining.circle.17.1.and.2.poly)== "MULTIPOLYGON"){c(remaining.circle.17.1.and.2.poly)}else{}
}
# save areas into dataframe
outer.edges.area.two.edges.df.nogeo <- as.data.frame(rbindlist(outer.edges.list.two.edges.nogeo))
# save plot IDs with overlappig edges within the 17.84m circle into dataframe
outer.intersection.two.edges.warning.df.nogeo <- na.omit(as.data.frame(rbindlist(outer.intersection.warning.edges.list.nogeo, fill=TRUE)))
if(nrow(intersection.two.edges.warning.df.nogeo)!=0){print("There are plots with overlapping edges within a 17.84m radius around the plot center.
Please check dataset intersection.two.edges.warning.df.nogeo")}
outer.edges.area.two.edges.df.nogeo
# save intersection polygones into dataframe
# list of polygones 1 of forest edges
outer.inter.poly.1.two.edges.df.nogeo <- as.data.frame(rbindlist(outer.inter.poly.1.list.nogeo, fill=TRUE))
# list of polygones 2 of forest edges
outer.inter.poly.2.two.edges.df.nogeo <- as.data.frame(rbindlist(outer.inter.poly.2.list.nogeo, fill=TRUE))
# bind the both edges per plot together
outer.inter.poly.two.edges.df.nogeo <- rbind(outer.inter.poly.1.two.edges.df.nogeo, outer.inter.poly.2.two.edges.df.nogeo) %>% arrange(plot_ID, e_ID)
# list of polygones of remainign circles
outer.rem.circle.poly.two.edges.list.final.nogeo <- rbindlist(outer.rem.circle.poly.2.edges.list.nogeo, fill = TRUE)
outer.rem.circle.poly.two.edges.df.nogeo <- as.data.frame(outer.rem.circle.poly.two.edges.list.final.nogeo)[,c(1,2,3,4, 5, 6)]  %>% distinct()
# list of multipolygones of remaining circles
outer.rem.circle.multipoly.two.edges.list.final.nogeo <- rbindlist(outer.rem.circle.multipoly.2.edges.list.nogeo, fill = TRUE)
outer.rem.circle.multipoly.two.edges.df.nogeo <- as.data.frame(outer.rem.circle.multipoly.two.edges.list.final.nogeo)[,c(1,2,3,4,5,11)] %>% distinct()
# binding the both circle lists back together
outer.rem.circle.two.edges.df.nogeo <- if(nrow(outer.rem.circle.poly.two.edges.df.nogeo) != 0 && nrow(outer.rem.circle.multipoly.two.edges.df.nogeo) != 0){
rbind(outer.rem.circle.poly.two.edges.df.nogeo, outer.rem.circle.multipoly.two.edges.df.nogeo)
}else{outer.rem.circle.poly.two.edges.df.nogeo}
outer.rem.circle.multipoly.two.edges.df.nogeo
outer.rem.circle.poly.two.edges.df.nogeo
# bind all edges area dataframes together
edges.area.df.nogeo <- rbind(edges.area.df.nogeo, edges.area.two.edges.df.nogeo, outer.edges.area.df.nogeo, outer.edges.area.two.edges.df.nogeo) %>% mutate(area_m2 = as.numeric(area_m2)) %>% arrange(plot_ID)
inter.poly.one.edge.df.nogeo <- rbind(inter.poly.one.edge.df.nogeo, outer.inter.poly.one.edge.df.nogeo %>% select(colnames(inter.poly.one.edge.df.nogeo)))%>% arrange(plot_ID)
rem.circle.one.edge.df.nogeo <- rbind(rem.circle.one.edge.df.nogeo, outer.rem.circle.one.edge.df.nogeo %>% select(colnames(rem.circle.one.edge.df.nogeo)))%>% arrange(plot_ID)
edges.area.df.nogeo
inter.poly.one.edge.df.nogeo
rem.circle.one.edge.df.nogeo
# 3.2.2. sorting TREES into edge and remaining circle polygones ---------
# 3.2.2.1. plots with one edge: sorting trees into edge and remaining circle polygones ---------
trees.one.edge.nogeo <- trees_data %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
# filter for trees located in plots htat haev only one forest edge
anti_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") #%>%
tree.status.list.nogeo <- vector("list", length = length(trees.one.edge.nogeo$tree_ID))
tree.points.list.nogeo <- vector("list", length = length(trees.one.edge.nogeo$tree_ID))
for (i in 1:length(trees.one.edge.nogeo$tree_ID)){
#i = 63
# i = which(grepl(50009, (trees.one.edge.nogeo$plot_ID)))
# select plot ID accordint to positioin in the list
my.plot.id <-trees.one.edge.nogeo [i, "plot_ID"]
my.tree.id <- trees.one.edge.nogeo[i, "tree_ID"]
my.inv.year <- trees.one.edge.nogeo[i, "inv_year"]
## select the UTM coordiantes of the center of the cirlce corresponding with the plot ID
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
# select the remaining cirlce we want to intersect the tree with
my.rem.circle <- sf::st_as_sf(rem.circle.one.edge.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct())
my.inter <- sf::st_as_sf(inter.poly.one.edge.df.nogeo  %>% filter(plot_ID == my.plot.id) %>% distinct())
# sort area dataframe by size of cirlce fragments if it is not a :
# bigger polygone/ polygone with greater area is assigned to category A, smaller area polygone is assigned to B
area.plot.df <- edges.area.df.nogeo %>% filter(plot_ID == my.plot.id & CCS_r_m == 17.84)
# assign stand category to the polygones depending on which one is bigger/ smaller
my.rem.circle$stand <- area.plot.df$stand[area.plot.df$e_ID == 0]
my.inter$stand <- area.plot.df$stand[area.plot.df$e_ID == 1 | area.plot.df$e_ID == 2]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.one.edge.nogeo[i, "dist_cm"]/100
azi.tree <- trees.one.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree   # + my.center.easting
tree.north <-  y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(tree.east),
"lat" = c(tree.north)
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
print(c(plot(my.inter$geometry),
plot(my.rem.circle$geometry, add = T),
plot(tree.sf$geometry, add = T))
)
inter.tree.circle <- sf::st_intersection(tree.sf, my.rem.circle)
inter.tree.edge <- sf::st_intersection(tree.sf, my.inter)
tree_status <- ifelse(nrow(inter.tree.edge)!= 0, my.inter$stand,
ifelse(nrow(inter.tree.circle) != 0,  my.rem.circle$stand,
"warning"))
tree.status.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status)))
# export tree points as sf
tree.points.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
}
# save tree corodiantes and status into dataframe
tree.status.one.edge.df.nogeo <- as.data.frame(rbindlist(tree.status.list.nogeo))
tree.status.one.edge.df.nogeo
# save tree sf into dataframe
tree.points.one.edge.df.nogeo <- as.data.frame(rbindlist(tree.points.list.nogeo))
tree.status.one.edge.df.nogeo %>% filter(plot_ID == 50124)
# 3.2.2.2. plots with 2 edges: sorting trees into edge and remaining circle polygones ---------
# bind all edges area dataframes together
edges.area.two.edges.df.nogeo
# 3.2.2.2. plots with 2 edges: sorting trees into edge and remaining circle polygones ---------
# bind all edges area dataframes together
inter.poly.two.edges.df.nogeo <- rbind(inter.poly.two.edges.df.nogeo, outer.inter.poly.two.edges.df.nogeo %>% select(colnames(inter.poly.two.edges.df.nogeo)))%>% arrange(plot_ID)
rem.circle.two.edges.df.nogeo <- rbind(rem.circle.two.edges.df.nogeo, outer.rem.circle.two.edges.df.nogeo %>% select(colnames(rem.circle.two.edges.df.nogeo)))%>% arrange(plot_ID)
# intersection of trees with 2 edges
trees.two.edges.nogeo <- trees_data %>%
# filter only for trees that are located in plots with a forest edge
semi_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2) %>%
#& inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
select(plot_ID) %>% distinct(), by = "plot_ID") %>%
# filter for trees located in plots htat haev only one forest edge
semi_join(forest_edges.man %>% filter(e_form == 1 | e_form == 2 & inter_status_AT_17 == "two I" | e_form == 2 & inter_status_BT_17 == "two I") %>%
group_by(plot_ID) %>% summarise(n = n()) %>% filter(n > 1) %>% select(plot_ID), by = "plot_ID") #%>%
tree.status.two.edges.list.nogeo <- vector("list", length = length(trees.two.edges.nogeo$tree_ID))
tree.points.two.edges.list.nogeo <- vector("list", length = length(trees.two.edges.nogeo$tree_ID))
for (i in 1:length(trees.two.edges.nogeo$tree_ID)){
# i = 1
# i = which(grepl(50122, (trees.two.edges.nogeo$plot_ID)))[2]
# select plot ID accordint to positioin in the list
my.plot.id <- trees.two.edges.nogeo[i, "plot_ID"]
my.tree.id <- trees.two.edges.nogeo[i, "tree_ID"]
my.inv.year <- trees.two.edges.nogeo[i, "inv_year"]
## select the UTM coordiantes of the center of the cirlce corresponding with the plot ID
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
# select the remaining cirlce we want to intersect the tree with
my.rem.circle <- sf::st_as_sf(rem.circle.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct())
my.edges.df <- inter.poly.two.edges.df.nogeo %>% filter(plot_ID == my.plot.id) %>% distinct() %>% arrange(e_ID)
my.inter.1 <- sf::st_as_sf(my.edges.df[1,])
my.inter.2 <- sf::st_as_sf(my.edges.df[2,])
# assign stand category to the polygones depending on which one is bigger/ smaller:
# bigger polygone/ polygone with greater area is assigned to category A, smaller area polygone is assigned to B
area.plot.df <- edges.area.df.nogeo %>% filter(plot_ID == my.plot.id & CCS_r_m == 17.84)
# assign stand category to the polygones depending on which one is bigger/ smaller
my.rem.circle$stand <- area.plot.df$stand[area.plot.df$e_ID == 0]
my.inter.1$stand <- area.plot.df$stand[area.plot.df$e_ID == 1]
my.inter.2$stand <- area.plot.df$stand[area.plot.df$e_ID == 2]
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.two.edges.nogeo[i, "dist_cm"]/100
azi.tree <- trees.two.edges.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(tree.east),
"lat" = c(tree.north)
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
# print(plot(my.rem.circle$geometry, col = "red"),
#       plot(my.inter.2$geometry, add = T),
#       plot(my.inter.1$geometry, add = T),
#       plot(tree.sf$geometry, add = T)
#       )
inter.tree.circle <- sf::st_intersection(tree.sf, my.rem.circle)
inter.tree.edge.1 <- sf::st_intersection(tree.sf, my.inter.1)
inter.tree.edge.2 <- sf::st_intersection(tree.sf, my.inter.2)
tree_status <- ifelse(nrow(inter.tree.edge.1)!= 0 & nrow(inter.tree.edge.2)== 0 & nrow(inter.tree.circle)== 0,  my.inter.1$stand,                     # if tree is in edge 1
ifelse(nrow(inter.tree.edge.2)!= 0 & nrow(inter.tree.edge.1)== 0 & nrow(inter.tree.circle)== 0,  my.inter.2$stand,              # if tree is in edge 2
ifelse(nrow(inter.tree.circle)!= 0 & nrow(inter.tree.edge.1)== 0 & nrow(inter.tree.edge.2)== 0,  my.rem.circle$stand,    # if tree is in circle
#ifelse(nrow(inter.tree.circle)== 0 & nrow(inter.tree.edge.1)!= 0 & nrow(inter.tree.edge.2)!= 0,  "warning",       # if tree is in two edges
"warning")))                                                                                             # if tree is nowhere
tree.status.two.edges.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status)))
tree.points.two.edges.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
}
# save tree corodiantes and status into dataframe
tree.status.list.two.edges.final.nogeo <- rbindlist(tree.status.two.edges.list.nogeo)
tree.status.list.two.edges.final.nogeo
tree.status.two.edges.df.nogeo <- as.data.frame(tree.status.list.two.edges.final.nogeo)
tree.status.two.edges.df.nogeo
# save tree sf into dataframe
tree.points.list.two.edges.final.nogeo <- rbindlist(tree.points.two.edges.list.nogeo)
tree.points.two.edges.df.nogeo <- as.data.frame(tree.points.list.two.edges.final.nogeo)
# bind the tree point datafarmes of one and two edges plots together
# bind the tree point datafarmes of one and two edges plots together
two.and.one.edge.trees.points.df.nogeo <- rbind(tree.points.one.edge.df.nogeo,tree.points.two.edges.df.nogeo)
# this step i separated in case both of the rbinded dfs are empty and the mutate wouldn´t grip
two.and.one.edge.trees.points.df.nogeo <- two.and.one.edge.trees.points.df.nogeo %>% mutate(plot_ID = as.integer(plot_ID))
# 3.2.2.3 plots with no edge edge: sorting trees into circle ---------
trees.no.edge.nogeo <- anti_join(trees_data, two.and.one.edge.trees.points.df.nogeo %>%
select(plot_ID) %>%
distinct(), by = "plot_ID")#%>%
tree.status.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
tree.points.no.edge.list.nogeo <- vector("list", length = length(trees.no.edge.nogeo$tree_ID))
trees.no.edge.nogeo
for (i in 1:length(trees.no.edge.nogeo$tree_ID)){
#i = 2173
#i = which(grepl(50124, unique(trees.no.edge.nogeo$plot_ID)))
# select plot ID accordint to positioin in the list
my.plot.id <- trees.no.edge.nogeo[i, "plot_ID"]
my.tree.id <- trees.no.edge.nogeo[i, "tree_ID"]
my.inv.year <- trees.no.edge.nogeo[i, "inv_year"]
## georeference
## select UTM corrdinates of the plot center
# my.center.easting <- geo_loc[geo_loc$plot_ID == my.plot.id, "RW_MED"]
# my.center.northing <- geo_loc[geo_loc$plot_ID == my.plot.id, "HW_MED"]
## select crs
# my.utm.epsg <-  paste0("+proj=utm +zone=", pick_utm(my.center.easting)," ", "+datum=WGS84 +units=m +no_defs +type=crs")
# extract polar coordiantes of forest edge
# point A
dist.tree <- trees.no.edge.nogeo[i, "dist_cm"]/100
azi.tree <- trees.no.edge.nogeo[i, "azi_gon"]
x.tree <- dist.tree*sin(azi.tree)   # longitude, easting, RW, X
y.tree <- dist.tree*cos(azi.tree)   # latitude, northing, HW, y
# transform polar into cartesian coordiantes
tree.east <- x.tree  # + my.center.easting
tree.north <- y.tree # + my.center.northing
# save cartesian coordiantes in dataframe
tree.coord.df <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.east)),
"lat" = c(as.numeric(tree.north))
))
# create sf point object from dataframe
#https://stackoverflow.com/questions/52551016/creating-sf-points-from-multiple-lat-longs
tree.sf <-  sf::st_as_sf(tree.coord.df, coords = c("lon", "lat"), remove = FALSE)
## assing CRS to points
#sf::st_crs(tree.sf) <- my.utm.epsg
#### build circle
# circle data
c.x0 = 0  # + my.center.easting
c.y0 = 0  # + my.center.northing
c.r3 = 17.84
c.r2 = 12.62
c.r1 = 5.64
# build polygon (circlular buffer) around center point
center.df<- as.data.frame(cbind("lon" = c.x0, "lat" = c.y0))
circle.pt <- sf::st_as_sf(center.df, coords = c("lon", "lat"))
## assing crs to cirlce corodiantes
# sf::st_crs(circle.pt) <- my.utm.epsg
circle.17 <- sf::st_buffer(circle.pt, c.r3)
circle.12 <- sf::st_buffer(circle.pt, c.r2)
circle.5 <- sf::st_buffer(circle.pt, c.r1)
inter.tree.circle.17 <- sf::st_intersection(tree.sf, circle.17)
# if a tree is not intersecting with the circle or its exactly at the edge of the cirlce the inter.tree.circle.17 will be empty,
# however, trees that are exactly 17.84 meters apart from the circle center would still be part of the plot, tho the polygones won´t detect and intersection
# which is why trees only receive the status "warning" if they are acturally situated outside of the circle
tree_status <- ifelse(nrow(inter.tree.circle.17) == 0 & dist.tree > 17.84,  "warning", "A")                                                                                            # if tree is nowhere
tree.status.no.edge.list.nogeo[[i]] <- as.data.frame(cbind(
"plot_ID" = c(as.integer(my.plot.id)),
"tree_ID" = c(as.integer(my.tree.id)),
"inv_year" = c(my.inv.year),
"lon" = c(as.numeric(tree.coord.df$lon)),
"lat" = c(as.numeric(tree.coord.df$lat)),
"t_stat" = c(tree_status))
)
tree.points.no.edge.list.nogeo[[i]] <- c("t_stat" = tree_status, tree.sf)
}
# save tree corodiantes and status into dataframe
tree.status.no.edges.df.nogeo <- as.data.frame(rbindlist(tree.status.no.edge.list.nogeo))
tree.status.no.edges.df.nogeo
# save tree sf into dataframe
tree.points.no.edges.df.nogeo <- as.data.frame(rbindlist(tree.points.no.edge.list.nogeo))
# bind all tree point.sf dataframes (with & without edges together)
all.trees.points.df.nogeo <-
rbind(tree.points.one.edge.df.nogeo ,
tree.points.two.edges.df.nogeo,
tree.points.no.edges.df.nogeo) %>%
mutate(across(plot_ID:tree_ID, ~ as.integer(.x))) %>%
left_join(., trees_data %>%
select(plot_ID, tree_ID, inv_year, DBH_cm),
by = c("plot_ID", "tree_ID", "inv_year"),
multiple = "all")
# bind all tree status dataframes together (one edge, two edges, no edge plots)
all.trees.status.df <-
rbind(tree.status.no.edges.df.nogeo,
tree.status.one.edge.df.nogeo,
tree.status.two.edges.df.nogeo)
for(i in 1:(nrow(trees_data %>% select(plot_ID) %>% distinct()))){
# https://ggplot2.tidyverse.org/reference/ggsf.html
#i = 2
# i = which(grepl(50124, unique(trees_data$plot_ID)))
my.plot.id = unique(trees_data$plot_ID)[i]
#print(my.plot.id)
c.df <- as.data.frame(cbind("lon" = 0, "lat" = 0))
c.pt <- sf::st_as_sf(c.df, coords = c("lon", "lat"))
c.poly.17 <- sf::st_buffer(c.pt, 17.84)
c.poly.12 <- sf::st_buffer(c.pt, 12.62)
c.poly.5 <- sf::st_buffer(c.pt, 5.64)
all.trees.points.df.nogeo.sp <- all.trees.points.df.nogeo %>%
filter(plot_ID == my.plot.id) %>%
left_join(trees_data %>%
filter(plot_ID == my.plot.id) %>%
select(plot_ID, tree_ID, SP_code), by = c("plot_ID", "tree_ID"))
print(ggplot() +
ggtitle(my.plot.id)+
geom_sf(data = c.poly.17, aes(alpha = 0))+
geom_sf(data = c.poly.12, aes(alpha = 0))+
geom_sf(data = c.poly.5, aes(alpha = 0))+
geom_sf(data = triangle.e1.poly.df.nogeo$geometry[triangle.e1.poly.df.nogeo$plot_ID == my.plot.id], aes(alpha = 0))+
geom_sf(data = triangle.e2.poly.df.nogeo$geometry[triangle.e2.poly.df.nogeo$plot_ID == my.plot.id], aes(alpha = 0))+
geom_sf(data = all.trees.points.df.nogeo.sp$geometry[all.trees.points.df.nogeo.sp$plot_ID == my.plot.id],
aes(color = all.trees.points.df.nogeo.sp$t_stat[all.trees.points.df.nogeo.sp$plot_ID == my.plot.id],
size =  all.trees.points.df.nogeo.sp$DBH_cm[all.trees.points.df.nogeo.sp$plot_ID == my.plot.id]))+
guides(color=guide_legend(title="tree status"))+
guides(size=guide_legend(title="DBH cm"))+
geom_sf_text(data = all.trees.points.df.nogeo.sp$geometry[all.trees.points.df.nogeo.sp$plot_ID == my.plot.id],
aes(label = all.trees.points.df.nogeo.sp$tree_ID[all.trees.points.df.nogeo.sp$plot_ID == my.plot.id]))+
xlim(-30, 30)+
ylim(-30, 30)
)
}
